<!doctype html>
<html lang="en-US">
<head>
    <title>Graderoom</title>
    <link rel="icon" href="/public/resources/common/icon.png">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat:500&display=swap">
    <% let theme; %>
    <% let date = new Date(); %>
    <% let zeroTime = new Date("0/" + date.getHours() + ":" + date.getMinutes()); %>
    <% zeroTime = zeroTime.getTime(); %>
    <% if (_appearance.theme === "dark") { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="/public/css/dark_mode.css">
    <% } else if (_appearance.theme === "light") { %>
        <% theme = false; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="/public/css/light_mode.css">
    <% } else if (_appearance.theme === "auto" && (((_appearance.darkModeStart < _appearance.darkModeFinish) && ((zeroTime >= _appearance.darkModeStart) && (zeroTime < _appearance.darkModeFinish))) || ((_appearance.darkModeStart > _appearance.darkModeFinish) && ((zeroTime >= _appearance.darkModeStart) || (zeroTime < _appearance.darkModeFinish))))) { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="/public/css/dark_mode.css">
    <% } else if (_appearance.theme === "system") { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="/public/css/dark_mode.css">
    <% } else if (_appearance.theme === "sun" && ((zeroTime >= sunset.getTime()) || (zeroTime <= sunrise.getTime()))) { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="/public/css/dark_mode.css">
    <% } else { %>
        <% theme = false; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="/public/css/light_mode.css">
    <% } %>
    <link rel="stylesheet" type="text/css" href="/public/css/main.css">
    <link id="blur_base" rel="stylesheet" type="text/css" href="/public/css/blur.css"
          <% if (!_appearance.blurEffects) { %>disabled
            <% } %>
    >
    <link id="blur_overrides" rel="stylesheet" type="text/css"
    <% if (theme === true) { %>
          href="/public/css/dark_blur.css"
    <% } else if (theme === false) { %> href="/public/css/light_blur.css"
            <% } %>
          <% if (!_appearance.blurEffects) { %>disabled
            <% } %>
    >
    <link id="reduceMotion" rel="stylesheet" type="text/css" href="/public/css/reduce_motion.css"
          <% if (!_appearance.reduceMotion) { %>disabled
            <% } %>
    >
    <link id="fade" rel="stylesheet" type="text/css" href="/public/css/fade.css" disabled>
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>

<!-- Admin Navbar -->
<%- include('../partials/admin/admin_navbar.ejs', {theme: theme, page: page}); %>

<!-- Main Screen -->
<div class="container">
    <!-- Messages -->
    <% if (adminSuccessMessage.length > 0) { %>
        <br>
        <div class="alert alert-danger alert-dismissible">
            <a class="close" data-dismiss="alert" aria-label="close">X</a>
            <%= adminSuccessMessage %>
        </div>
    <% } else if (adminFailMessage.length > 0) { %>
        <br>
        <div class="alert alert-success alert-dismissible">
            <a class="close" data-dismiss="alert" aria-label="close">X</a>
            <%= adminFailMessage %>
        </div>
    <% } else { %>
        <br>
    <% } %>

    <div id="table-container">
        <% let users = _userList %>
        <h6><%= userCount %> Total Users, <select class="minimal" id="showNPerPageSelect">
                <% for (let i = 1; i <= 20; i++) { %>
                    <option <% if (i === queryCount) { %>selected
                            <% } %>
                    ><%= i %></option>
                <% } %>
            </select> on this page (<select class="minimal" id="goToPageSelect">
                <% for (let i = 1; i <= maxPage; i++) { %>
                    <option <% if (i === _page) { %>selected
                            <% } %>
                    ><%= i %></option>
                <% } %>
            </select> of <%= maxPage %>)</h6>
        <hr>
        <h1><%= count %> Users</h1>
        <div style="max-height: 100vh; overflow: auto">
            <table class="table rounded-table" style="width: 100% !important;">
                <thead>
                    <tr>
                        <th class="admin">Username</th>
                        <th class="admin">Name</th>
                        <th class="admin">Account Created</th>
                        <th class="admin">Last Logged In</th>
                        <th class="admin">Attributes</th>
                        <th class="admin">Actions</th>
                        <th class="admin">Donations</th>
                    </tr>
                </thead>
                <% for (let i = 0; i < users.length; i++) {
                    let u = users[i]; %>
                <tr>
                    <td class="admin"><%= u.username %> </td>
                    <td class="admin"><%= u.personalInfo.firstName + " " + u.personalInfo.lastName + " '" + (u.personalInfo.graduationYear - 2000) %></td>
                    <td class="admin">
                        <%= new Date(u.loggedIn[0]).toLocaleString("en-US", {timeZone: "America/Los_Angeles"}); %>
                    </td>
                    <td class="admin">
                        <% if (new Date(u.loggedIn.slice(-1)[0]).toLocaleString("en-US", {timeZone: "America/Los_Angeles"}) === "Invalid Date") { %>
                            Never Logged In
                        <% } else { %>
                            <%= new Date(u.loggedIn.slice(-1)[0]).toLocaleString("en-US", {timeZone: "America/Los_Angeles"}) %>
                        <% } %>
                    </td>
                    <td class="admin">
                        <% if ("schoolPassword" in u) { %> GradeSync<br>
                        <% } %>
                        <% if (u.isAdmin) { %> Admin<br>
                        <% } %>
                        <% if (new Date(u.alerts.termsLastSeen).toLocaleString("en-US", {timeZone: "America/Los_Angeles"}) === "Invalid Date") { %>
                            Terms not Seen<br>
                        <% } %>
                        <% if (new Date(u.alerts.policyLastSeen).toLocaleString("en-US", {timeZone: "America/Los_Angeles"}) === "Invalid Date") { %>
                            Policy not Seen<br>
                        <% } %>
                        <% if (u.betaFeatures.active) { %>
                            Beta<br>
                        <% } %>
                        <%= u.loggedIn.length; %> logins<br>
                        <%= u.alerts.lastUpdated.length; %> syncs
                    </td>
                    <td class="admin">
                        <% if (u.alerts.remoteAccess === "allowed") { %>
                            <form action="/viewuser" method="get" style="display: inline-block;">
                                <button type="submit" name="usernameToRender" class="btn btn-sm admin"
                                        value="<%= u.username; %>">
                                    Render User Site
                                </button>
                            </form>
                            <br><br>
                        <% } %>
                        <button class="btn btn-sm admin" type="button"
                                onclick="{$('#add-donation-container<%= i %>').addClass('active').find('.addDonationDate input').trigger('focus').trigger('blur');}">
                            Add Donation
                        </button>
                        <div class="add-donation-container"
                             id="add-donation-container<%= i %>">
                            <form id="addDonationForm<%= i; %>">
                                <h5>Adding Donation for <%= u.username %></h5>
                                <div class="addDonationDate form-weights form-signin input-group form-group">
                                    <label>Date</label>
                                    <input class="form-control dynamic-input"
                                           type="text"
                                           onfocus="this.type='date'; this.valueAsDate = new Date(); checkLabel(this)"
                                           onblur="this.type='text'; checkLabel(this)" required>
                                </div>
                                <div class="addDonationPlatform input-group form-group">
                                    <label class="label-active">Platform</label>
                                    <select class="minimal addPlatform">
                                        <option value="venmo">Venmo</option>
                                        <option value="zelle">Zelle</option>
                                        <option value="paypal">PayPal</option>
                                        <option value="cash">Cash</option>
                                    </select>
                                </div>
                                <div class="addDonationPaid form-weights form-signin input-group form-group">
                                    <label>Paid Amount</label>
                                    <input class="form-control dynamic-input"
                                           type="number"
                                           step="0.01"
                                           onfocus="checkLabel(this)"
                                           oninput="checkLabel(this)"
                                           onblur="checkLabel(this)" required>
                                </div>
                                <div class="addDonationReceived form-weights form-signin input-group form-group">
                                    <label>Received Amount</label>
                                    <input class="form-control dynamic-input"
                                           type="number"
                                           step="0.01"
                                           onfocus="checkLabel(this)"
                                           oninput="checkLabel(this)"
                                           onblur="checkLabel(this)" required>
                                </div>
                                <div>
                                    <button type="submit" style="margin: 0" class="btn btn-med">Add</button>
                                </div>
                            </form>
                        </div>
                        <br><br>
                        <% if (!u.isAdmin) { %>
                            <form action="/archiveUser" method="post">
                                <button type="submit" name="deleteUser" class="btn btn-sm admin"
                                        value="<%= u.username %>">Archive User
                                </button>
                            </form>
                            <br>
                        <% } %>
                        <% if (u.username !== username) { %>
                            <% if (u.isAdmin) { %>
                                <form action="/removeadmin" method="post">
                                    <button type="submit" name="removeAdminUser" class="btn btn-sm admin"
                                            value="<%= u.username %>">Remove Admin Privileges
                                    </button>
                                </form>
                            <% } else { %>
                                <form action="/makeadmin" method="post">
                                    <button type="submit" name="newAdminUser" class="btn btn-sm admin"
                                            value="<%= u.username %>">Make User Admin
                                    </button>
                                </form>
                            <% } %>
                        <% } %>
                    </td>
                    <td class="donations"></td>
                </tr>
                <% } %>
            </table>
        </div>
        <hr>
        <h1>Archived Users</h1>
        <div style="max-height: 100vh; overflow: auto"></div>
        <table class="table rounded-table" style="width: 100% !important;">
            <thead>
                <tr>
                    <th class="admin">Username</th>
                    <th class="admin">School Username</th>
                    <th class="admin">Restore User</th>
                    <th class="admin">Delete Forever</th>
                </tr>
            </thead>

            <% for (let u of _deletedUserList) { %>
                <tr>
                    <td class="admin"><%= u.username %> </td>
                    <td class="admin"><%= u.schoolUsername %></td>
                    <td class="admin">
                        <form action="/restoreUser" method="post">
                            <button type="submit" name="restoreUser" class="btn btn-sm admin"
                                    value="<%= u.username %>">Restore User
                            </button>
                        </form>
                    </td>
                    <td class="admin">
                        <form action="/deleteuser" method="post">
                            <button type="submit" name="deleteUser" class="btn btn-sm admin"
                                    value="<%= u.username %>">Delete Forever
                            </button>
                        </form>
                    </td>
                </tr>
            <% } %>
        </table>
        <div style="max-height: 100px; overflow: auto"></div>

    </div>
</div>
<script>
    let userCount = <%= userCount; %>;
    let count = <%= count; %>;
    let page = <%= _page; %>;
    let users = <%- JSON.stringify(_userList); %>;

    function checkLabel(input) {
        let label = $($(input)[0].previousElementSibling);
        input = $(input);
        if (input[0].value !== "") {
            if (!label.hasClass("label-active")) {
                label.addClass("label-active");
            }
        } else {
            label.removeClass("label-active");
        }
    }

    for (let i = 0; i < users.length; i++) {
        $("#addDonationForm" + i).submit(function (e) {
            e.preventDefault();
            addDonation(i);
            $("#addDonationForm" + i + " input").val("").trigger("input").trigger("blur");
        });
    }

    setupDonations();

    function setupDonations(userIndex) {
        for (let h = 0; h < users.length; h++) {
            let donoDiv = $($("td.donations")[h]);
            if (userIndex === undefined || userIndex === h) {
                let donoData = users[h].donoData;
                if (donoData.length === 0) {
                    donoDiv.html("");
                    continue;
                }
                let donoTable = `<table id="donoTable"><thead><tr><th>Platform</th><th>Amount Paid</th><th>Actual Value</th><th>Date Donated</th><th></th></tr></thead><tbody>`;
                let totalPaid = 0;
                let totalReceived = 0;
                for (let i = 0; i < donoData.length; i++) {
                    let platform = donoData[i].platform;
                    let paid = donoData[i].paidValue;
                    let received = donoData[i].receivedValue;
                    totalPaid += paid;
                    totalReceived += received;
                    let date = donoData[i].dateDonated;

                    if (platform === "paypal") {
                        platform = "PayPal";
                    } else if (platform === "zelle") {
                        platform = "Zelle";
                    } else if (platform === "venmo") {
                        platform = "Venmo";
                    } else if (platform === "cash") {
                        platform = "Cash";
                    }

                    donoTable += `<tr><td class="dono-platform-${platform.toLowerCase()}">${platform}</td><td>$${paid.toFixed(2)}</td><td>$${received.toFixed(2)}</td><td>${new Date(date).toLocaleDateString()}</td><td><button class="btn btn-sm admin" onclick="removeDonation(${h}, ${i})">Delete</button></td></tr>`;
                }
                donoTable += `<tfoot><tr><td style="text-align: right">Total:</td><td>$${totalPaid.toFixed(2)}</td><td>$${totalReceived.toFixed(2)}</td><td></td></tr></tfoot></tbody></table>`;
                donoDiv.html(donoTable);
            }
        }
    }

    function addDonation(userIndex) {
        let username = users[userIndex].username;
        let donoDate = $(".addDonationDate input")[userIndex].value.split("-");
        donoDate = Date.parse(donoDate[1] + "/" + donoDate[2] + "/" + donoDate[0]);
        let donoPlatform = $(".addDonationPlatform select")[userIndex].selectedOptions[0].value;
        let donoPaid = parseFloat($(".addDonationPaid input")[userIndex].value);
        let donoReceived = parseFloat($(".addDonationReceived input")[userIndex].value);
        let donationObject = {
            username: username,
            platform: donoPlatform,
            paidValue: donoPaid,
            receivedValue: donoReceived,
            dateDonated: donoDate
        };
        $.ajax({
                   type: "POST", url: "/addDonation", data: {data: JSON.stringify(donationObject)}
               }).done(function (response) {
            if (typeof response === "string" && response.startsWith("<!")) {
                $(".session-timeout").show();
                $("body").find("*").not(".session-timeout").remove();
            } else {
                let donation = $($(".add-donation-container")[userIndex]);
                donation.removeClass("active");
                users[userIndex].donoData.push(donationObject);
                setupDonations(userIndex);
            }
        });
    }

    function removeDonation(userIndex, donoIndex) {
        let username = users[userIndex].username;
        $.ajax({
                   type: "POST", url: "/removeDonation", data: {username: username, index: donoIndex}
               }).done(function (response) {
            if (typeof response === "string" && response.startsWith("<!")) {
                $(".session-timeout").show();
                $("body").find("*").not(".session-timeout").remove();
            } else {
                users[userIndex].donoData.splice(donoIndex, 1);
                setupDonations(userIndex);
            }
        });
    }

    $(document).mousedown(function (e) {
        if (!$(e.target).is(".addDonation, .add-donation-container") && !$(e.target).parents(".add-donation-container, .addDonation").length) {
            $($(".add-donation-container")).removeClass("active");
        }
    });

    $("#showNPerPageSelect").on("change", (event) => {
        let search = new URLSearchParams(window.location.search);
        let count = event.target.selectedIndex + 1;
        search.set("count", count);
        window.location.search = search;
    });

    $("#goToPageSelect").on("change", (event) => {
        let search = new URLSearchParams(window.location.search);
        let page = event.target.selectedIndex + 1;
        search.set("page", page);
        window.location.search = search;
    });

    let checkingTheme;
    let theme = appearance.theme;
    let darkModeStart = appearance.darkModeStart;
    let darkModeFinish = appearance.darkModeFinish;
    let sunrise = <%= sunrise.getTime() %>;
    let sunset = <%= sunset.getTime() %>;

    if (theme === "auto" || theme === "sun") {
        checkTime();
    }

    function setAutoTheme() {
        let date = new Date();
        let zeroTime = new Date("0/" + date.getHours() + ":" + date.getMinutes());
        if (theme !== "auto" && theme !== "sun" && theme !== "system") {
            if (checkingTheme) {
                clearInterval(checkingTheme);
            }
            return;
        }

        let oldDarkMode = document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css";
        let oldDarkBlur = document.getElementById("blur_overrides").getAttribute("href") === "/public/css/dark_blur.css";
        if ((theme === "system" && window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches) || (theme === "sun" && (zeroTime >= sunset || zeroTime <= sunrise)) || (theme === "auto" && (((darkModeStart < darkModeFinish) && ((zeroTime >= darkModeStart) && (zeroTime < darkModeFinish)) || ((darkModeStart > darkModeFinish) && ((zeroTime >= darkModeStart) || (zeroTime < darkModeFinish))))))) {
            darkMode = true;
            if (darkMode !== oldDarkMode) {
                document.getElementById("fade").disabled = false;
                document.getElementById("pageStyle").setAttribute("href", "/public/css/dark_mode.css");
                $(".navbar-brand img").attr("src", "/public/resources/dark_mode/logo.png");
                $(".navbar").removeClass("navbar-light").addClass("navbar-dark");
                setTimeout(() => {
                    document.getElementById("fade").disabled = true;
                }, 500);
                if (appearance.seasonalEffects) {
                    init = performance.now();
                    if (darkMode === false) {
                        $("#light_snowfall").attr("media", "");
                    } else if (darkMode) {
                        $("#light_snowfall").attr("media", "not all");
                    }
                }
            }
            if (appearance.blurEffects && !oldDarkBlur) {
                document.getElementById("blur_overrides").setAttribute("href", "/public/css/dark_blur.css");
            }
        } else {
            darkMode = false;
            if (darkMode !== oldDarkMode) {
                document.getElementById("fade").disabled = false;
                document.getElementById("pageStyle").setAttribute("href", "/public/css/light_mode.css");
                if (appearance.blurEffects) {
                    document.getElementById("blur_overrides").setAttribute("href", "/public/css/light_blur.css");
                }
                $(".navbar-brand img").attr("src", "/public/resources/light_mode/logo.png");
                $(".navbar").removeClass("navbar-dark").addClass("navbar-light");
                setTimeout(() => {
                    document.getElementById("fade").disabled = true;
                }, 500);
                if (appearance.seasonalEffects) {
                    init = performance.now();
                    if (darkMode === false) {
                        $("#light_snowfall").attr("media", "");
                    } else if (darkMode) {
                        $("#light_snowfall").attr("media", "not all");
                    }
                }
            }
            if (appearance.blurEffects && oldDarkBlur) {
                document.getElementById("blur_overrides").setAttribute("href", "/public/css/light_blur.css");
            }
        }
    }

    async function checkTime() {
        if (checkingTheme) {
            clearInterval(checkingTheme);
        }
        setAutoTheme();
        checkingTheme = window.setInterval(function () {
            setAutoTheme();
        }, 100);
    }
</script>
</body>
</html>
