<!doctype html>
<html lang="en-US">
<head>
    <title>Graderoom</title>
    <link rel="icon" href="../../public/resources/common/icon.png">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat:500&display=swap">
    <% let theme; %>
    <% let zeroTime = new Date("0/"); %>
    <% zeroTime.setHours(new Date().getHours()); %>
    <% zeroTime.setMinutes(new Date().getMinutes()); %>
    <% zeroTime = zeroTime.getTime(); %>
    <% if (JSON.parse(appearance).theme === "dark") { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="../../public/css/dark_mode.css">
    <% } else if (JSON.parse(appearance).theme === "light") { %>
        <% theme = false; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="../../public/css/light_mode.css">
    <% } else if (JSON.parse(appearance).theme === "auto" && (((JSON.parse(appearance).darkModeStart < JSON.parse(appearance).darkModeFinish) && ((zeroTime >= JSON.parse(appearance).darkModeStart) && (zeroTime < JSON.parse(appearance).darkModeFinish))) || ((JSON.parse(appearance).darkModeStart > JSON.parse(appearance).darkModeFinish) && ((zeroTime >= JSON.parse(appearance).darkModeStart) || (zeroTime < JSON.parse(appearance).darkModeFinish))))) { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="../../public/css/dark_mode.css">
    <% } else if ((zeroTime >= sunset.getTime()) || (zeroTime <= sunrise.getTime())) { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="../../public/css/dark_mode.css">
    <% } else { %>
        <% theme = false; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="../../public/css/light_mode.css">
    <% } %>
    <link rel="stylesheet" type="text/css" href="../../public/css/main.css">
    <link id="blur_base" rel="stylesheet" type="text/css" href="../../public/css/blur.css"
          <% if (!JSON.parse(appearance).blurEffects) { %>disabled
            <% } %>
    >
    <link id="blur_overrides" rel="stylesheet" type="text/css"
          href="public/css/<%= (theme ? "dark" : "light"); %>_blur.css"
          <% if (!JSON.parse(appearance).blurEffects) { %>disabled
            <% } %>
    >
    <link id="fade" rel="stylesheet" type="text/css" href="../../public/css/fade.css" disabled>
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>

<!-- Admin Navbar -->
<% include ../partials/admin/admin_navbar.ejs %>
<div class="container">
    <h1>
        Usage Statistics
    </h1>
    <h5>A user is considered active if they logged in within two weeks prior to a data point</h5>
    <div id="cool" class="chart">
        <canvas id="chart-cool"></canvas>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/moment@2.24.0/moment.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3"></script>

<script>

    let checkingTheme;
    let appearance = <%- appearance %>;
    let theme = appearance.theme;
    let darkModeStart = appearance.darkModeStart;
    let darkModeFinish = appearance.darkModeFinish;
    let sunrise = <%= sunrise.getTime() %>;
    let sunset = <%= sunset.getTime() %>;

    if (theme === "auto" || theme === "sun") {
        checkTime();
    }

    function setAutoTheme() {
        let zeroTime = new Date("0/");
        zeroTime.setHours(new Date().getHours());
        zeroTime.setMinutes(new Date().getMinutes());
        zeroTime = zeroTime.getTime();
        if (theme !== "auto" && theme !== "sun") {
            if (checkingTheme) {
                clearInterval(checkingTheme);
            }
            return;
        }
        if ((theme === "sun" && (zeroTime >= sunset || zeroTime <= sunrise)) || (theme === "auto" && (((darkModeStart < darkModeFinish) && ((zeroTime >= darkModeStart) && (zeroTime < darkModeFinish)) || ((darkModeStart > darkModeFinish) && ((zeroTime >= darkModeStart) || (zeroTime < darkModeFinish))))))) {
            let oldDarkMode = document.getElementById("pageStyle").getAttribute("href") === "../../public/css/dark_mode.css";
            darkMode = true;
            if (darkMode !== oldDarkMode) {
                document.getElementById("fade").disabled = false;
                document.getElementById("pageStyle").setAttribute("href", "../../public/css/dark_mode.css");
                if (appearance.blurEffects) {
                    document.getElementById("blur_overrides").setAttribute("href", "../../public/css/dark_blur.css");
                }
                $(".navbar-brand img").attr("src", "/public/resources/dark_mode/logo.png");
                $(".navbar").removeClass("navbar-light").addClass("navbar-dark");
                setTimeout(() => {
                    document.getElementById("fade").disabled = true;
                }, 500);
            }
        } else {
            let oldDarkMode = document.getElementById("pageStyle").getAttribute("href") === "../../public/css/dark_mode.css";
            darkMode = false;
            if (darkMode !== oldDarkMode) {
                document.getElementById("fade").disabled = false;
                document.getElementById("pageStyle").setAttribute("href", "../../public/css/light_mode.css");
                if (appearance.blurEffects) {
                    document.getElementById("blur_overrides").setAttribute("href", "../../public/css/light_blur.css");
                }
                $(".navbar-brand img").attr("src", "/public/resources/light_mode/logo.png");
                $(".navbar").removeClass("navbar-dark").addClass("navbar-light");
                setTimeout(() => {
                    document.getElementById("fade").disabled = true;
                }, 500);
            }
        }
        if (appearance.holidayEffects) {
            init = performance.now();
            $('#lights-disabled-message').hide();
            $('#snow-disabled-message').hide();
            $("#snow-fall").show();
            $(".lightrope").show();
            if (!darkMode) {
                $("#light_snowfall").attr("media", "");
            } else {
                $("#light_snowfall").attr("media", "not all");
            }
        } else {
            $('#lights-disabled-message').hide();
            $('#snow-disabled-message').hide();
            $("#snow-fall").hide();
            $(".lightrope").hide();
        }
    }

    async function checkTime() {
        if (checkingTheme) {
            clearInterval(checkingTheme);
        }
        setAutoTheme();
        checkingTheme = window.setInterval(function () {
            setAutoTheme();
        }, 100);
    }

    let allUsers = <%- userList %>;
    console.log(allUsers);
    let loginDates = allUsers.map(u => u.loggedIn.map(d => {
        let date = new Date(d);
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    })).reduce((a, b) => a.concat(b));
    let syncDates = allUsers.map(u => u.alerts.lastUpdated.map(d => {
        let date = new Date(d.timestamp);
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    })).reduce((a, b) => a.concat(b));
    loginDates = loginDates.concat(syncDates.filter(t => !loginDates.find(u => u.getTime() === t.getTime()))).sort((a, b) => a.getTime() - b.getTime());
    syncDates = syncDates.concat(loginDates.filter(t => !syncDates.find(u => u.getTime() === t.getTime()))).sort((a, b) => a.getTime() - b.getTime());
    let dataset = []
    let loginData = []
    for (let j = 0; j < loginDates.length; j++) {
        let r = loginData.find(d => d.x.getTime() === loginDates[j].getTime());
        if (r) {
            r.y++;
        } else {
            loginData.push({x: loginDates[j], y: 1});
        }
    }
    let loginsDataset = {
        label: "Logins",
        backgroundColor: "transparent",
        pointBackgroundColor: "green",
        pointBorderColor: "transparent",
        borderColor: "green",
        data: loginData,
        cubicInterpolationMode: "monotone",
        spanGaps: false,
        pointRadius: 1,
        borderWidth: 1,
        pointHoverRadius: 3,
        pointHoverBackgroundColor: "green",
        pointHoverBorderColor: "green",
        pointHoverBorderWidth: 2
    };
    let uniqueLoginDates = allUsers.map(user => [...new Set(user.loggedIn.map(loggedIn => {
        let date = new Date(loggedIn);
        return new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();
    }))].map(loggedIn => new Date(loggedIn))).reduce((a, b) => a.concat(b));
    uniqueLoginDates = uniqueLoginDates.concat(loginDates.filter(time => !uniqueLoginDates.find(anotherTime => anotherTime.getTime() === time.getTime())));
    uniqueLoginDates.sort((a, b) => a.getTime() - b.getTime());
    let uniqueLoginData = [];
    for (let j = 0; j < uniqueLoginDates.length; j++) {
        let r = uniqueLoginData.find(d => d.x.getTime() === uniqueLoginDates[j].getTime());
        if (r) {
            r.y++;
        } else {
            uniqueLoginData.push({x: uniqueLoginDates[j], y: 1});
        }
    }
    let uniqueLoginDataset = {
        label: "Unique Logins",
        backgroundColor: "transparent",
        pointBackgroundColor: "red",
        pointBorderColor: "transparent",
        borderColor: "red",
        data: uniqueLoginData,
        cubicInterpolationMode: "monotone",
        spanGaps: false,
        pointRadius: 1,
        borderWidth: 1,
        pointHoverRadius: 3,
        pointHoverBackgroundColor: "red",
        pointHoverBorderColor: "red",
        pointHoverBorderWidth: 2
    };
    let syncData = [];
    for (let j = 0; j < syncDates.length; j++) {
        let r = syncData.find(d => d.x.getTime() === syncDates[j].getTime());
        if (r) {
            r.y++;
        } else {
            syncData.push({x: syncDates[j], y: 1});
        }
    }
    let syncsDataset = {
        label: "Syncs",
        backgroundColor: "transparent",
        pointBackgroundColor: "orange",
        pointBorderColor: "transparent",
        borderColor: "orange",
        data: syncData,
        cubicInterpolationMode: "monotone",
        spanGaps: false,
        pointRadius: 1,
        borderWidth: 1,
        pointHoverRadius: 3,
        pointHoverBackgroundColor: "orange",
        pointHoverBorderColor: "orange",
        pointHoverBorderWidth: 2
    }
    let userData = loginData.map(t => ({
        x: t.x, y: allUsers.filter(u => {
            let date = new Date(Math.min(...u.loggedIn));
            return new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() <= t.x.getTime();
        }).length
    }));
    let numUsersDataset = {
        label: "Num Users",
        backgroundColor: "transparent",
        pointBackgroundColor: "blue",
        pointBorderColor: "transparent",
        borderColor: "blue",
        data: userData,
        cubicInterpolationMode: "monotone",
        spanGaps: false,
        pointRadius: 1,
        borderWidth: 1,
        pointHoverRadius: 3,
        pointHoverBackgroundColor: "blue",
        pointHoverBorderColor: "blue",
        pointHoverBorderWidth: 2
    }
    let uniqueUsersData = loginData.map(t => ({
        x: t.x, y: allUsers.filter(u => u.loggedIn.filter(v => {
            let vDate = new Date(v);
            let vTime = new Date(vDate.getFullYear(), vDate.getMonth(), vDate.getDate()).getTime();
            return (vTime <= t.x.getTime()) && (vTime >= (t.x.getTime() - (14 * 24 * 60 * 60 * 1000)))
        }).length).length
    }));
    let uniqueUsersDataset = {
        label: "Active Users",
        backgroundColor: "transparent",
        pointBackgroundColor: "purple",
        pointBorderColor: "transparent",
        borderColor: "purple",
        data: uniqueUsersData,
        cubicInterpolationMode: "monotone",
        spanGaps: false,
        pointRadius: 1,
        borderWidth: 1,
        pointHoverRadius: 3,
        pointHoverBackgroundColor: "purple",
        pointHoverBorderColor: "purple",
        pointHoverBorderWidth: 2
    }
    let activePercentageData = userData.map((t, i) => ({x: t.x, y: uniqueUsersData[i].y / t.y}));
    let activePercentageDataset = {
        label: "Active Percentage",
        yAxisID: "percent",
        backgroundColor: "rgba(255, 255, 255, 0.1)",
        pointBackgroundColor: "pink",
        pointBorderColor: "transparent",
        borderColor: "pink",
        data: activePercentageData,
        cubicInterpolationMode: "monotone",
        spanGaps: false,
        pointRadius: 1,
        borderWidth: 1,
        pointHoverRadius: 3,
        pointHoverBackgroundColor: "pink",
        pointHoverBorderColor: "pink",
        pointHoverBorderWidth: 2
    }
    dataset.push(activePercentageDataset);
    dataset.push(loginsDataset);
    dataset.push(uniqueLoginDataset);
    dataset.push(syncsDataset);
    dataset.push(numUsersDataset);
    dataset.push(uniqueUsersDataset);
    let ctx = document.getElementById("chart-cool");
    new Chart(ctx, {
        type: "line", data: {
            datasets: dataset
        }, options: {
            hover: {
                mode: "index", intersect: false
            }, scales: {
                xAxes: [{
                    type: "time", time: {
                        unit: "month"
                    }, ticks: {
                        fontColor: (document.getElementById("pageStyle").getAttribute("href") === "../../public/css/dark_mode.css" ? "white" : "black"),
                        fontFamily: "Verdana",
                        fontSize: "13"
                    }, gridLines: {
                        color: (document.getElementById("pageStyle").getAttribute("href") === "../../public/css/dark_mode.css" ? "#555555" : "#CCCCCC")
                    }
                }], yAxes: [{
                    ticks: {
                        fontColor: (document.getElementById("pageStyle").getAttribute("href") === "../../public/css/dark_mode.css" ? "white" : "black"),
                        fontFamily: "Verdana",
                        fontSize: "12"
                    }, gridLines: {
                        color: (document.getElementById("pageStyle").getAttribute("href") === "../../public/css/dark_mode.css" ? "#555555" : "#CCCCCC"),
                        drawBorder: false
                    }
                },
                    {
                        id: "percent",
                        position: "right",
                        ticks: {
                            fontColor: (document.getElementById("pageStyle").getAttribute("href") === "../../public/css/dark_mode.css" ? "white" : "black"),
                            fontFamily: "Verdana",
                            fontSize: "13",
                            callback: function (value) {
                                return value.toLocaleString('de-DE', {style: 'percent'});
                            }
                        }, gridLines: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "../../public/css/dark_mode.css" ? "#555555" : "#CCCCCC")
                        }
                    }
                ]
            }, animation: {
                easing: "easeOutCubic"
            }, legend: {
                display: true, position: "top", labels: {
                    usePointStyle: true,
                    fontColor: (document.getElementById("pageStyle").getAttribute("href") === "../../public/css/dark_mode.css" ? "white" : "black"),
                    fontFamily: "Verdana",
                    boxWidth: 20,
                    fontSize: 13
                }
            }, tooltips: {
                enabled: true, mode: "index", intersect: false, displayColors: true, caretSize: 10, callbacks: {
                    title: function (tooltipItems, data) {
                        return moment(tooltipItems[0].xLabel).format("MM/DD/YY");
                    }
                }
            }, responsive: true, maintainAspectRatio: true
        }
    });
</script>
</body>
