<!doctype html>
<html lang="en-US">
<head>
    <title>Graderoom</title>
    <link rel="icon" href="public/resources/common/icon.png">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat:500&display=swap">
    <% let theme; %>
    <% if (JSON.parse(appearance).theme === "dark") { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/dark_mode.css">
    <% } else if (JSON.parse(appearance).theme === "light") { %>
        <% theme = false; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/light_mode.css">
    <% } else if ((((JSON.parse(appearance).darkModeStart < JSON.parse(appearance).darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= JSON.parse(appearance).darkModeStart - (dst ? (JSON.parse(appearance).darkModeStart === 0 ? -23 : 1) : 0)) && ((Date.now() / 1000 / 3600 - 8) % 24) < JSON.parse(appearance).darkModeFinish - (dst ? (JSON.parse(appearance).darkModeFinish === 1 ? -23 : 1) : 0))) || ((JSON.parse(appearance).darkModeStart > JSON.parse(appearance).darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= JSON.parse(appearance).darkModeStart - (dst ? (JSON.parse(appearance).darkModeStart === 0 ? -23 : 1) : 0)) || ((Date.now() / 1000 / 3600 - 8) % 24) < JSON.parse(appearance).darkModeFinish - (dst ? (JSON.parse(appearance).darkModeFinish === 1 ? -23 : 1) : 0))))) { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/dark_mode.css">
    <% } else { %>
        <% theme = false; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/light_mode.css">
    <% } %>
    <link rel="stylesheet" type="text/css" href="public/css/main.css">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Javascript imports -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
</head>
<body>

<!-- Navbar -->
<% include partials/user/navbar.ejs %>
<div class="container h-100 d-flex justify-content-center">
    <div class="col-sm-12 col-md-10 col-lg-9 col-xl-8">
        <div class="card card-signin my-5">
            <div class="card-body">
                <h1 class="text-center card-title">
                    <i class="fa fa-calculator" aria-hidden="true"></i> Final Grade Calculator
                </h1>
                <div id="calculatorMessage" class="alert alert-info">
                    <div style="font-weight: bold" class="messageTxt">
                        Step 1: Enter Current Grade or Select a Class
                    </div>
                </div>
                <form id="calculateFinalGrade" class="form-signin">
                    <div class="card-footer">
                        <h5>Current Info</h5>
                        <div style="display: flex; justify-content: space-between; align-items: center">
                            <label style="display: flex; align-items: flex-end"> <select class="classic"
                                                                                         id="chooseClass">
                                    <option selected>- - Select Class - -</option>
                                    <% for (let i = 0; i < JSON.parse(gradeData).length; i++) { %>
                                        <option><%= JSON.parse(gradeData)[Object.keys(JSON.parse(gradeData))[i]].class_name %></option>
                                    <% } %>
                                </select> </label> <label style="display: flex; align-items: flex-end;">
                                <select class="classic" id="chooseLetterGrade" style="float: right">
                                    <option disabled selected hidden>- - Grade - -</option>
                                    <option value="97.5">A+</option>
                                    <option value="92.5">A</option>
                                    <option value="89.5">A-</option>
                                    <option value="87.5">B+</option>
                                    <option value="82.5">B</option>
                                    <option value="79.5">B-</option>
                                    <option value="77.5">C+</option>
                                    <option value="72.5">C</option>
                                    <option value="69.5">C-</option>
                                    <option value="67.5">D+</option>
                                    <option value="62.5">D</option>
                                    <option value="59.5">D-</option>
                                </select> </label>
                        </div>
                        <div style="display: flex; align-items: center; align-self: center">
                            <label class="form-group" style="display: flex; align-items: flex-end"> <span
                                        style="text-align: right">Your current grade is</span> <input
                                        class="number-input form-control" style="margin-left: 1rem;"
                                        id="currentGrade" type="number" step="0.0001" required autofocus> <span
                                        style="text-align: left">%</span> </label> <label class="form-group"
                                                                                          style="display: flex; align-items: flex-end">
                                <span style="text-align: right">You want at least a</span> <input
                                        class="number-input form-control" style="margin: 0 1rem 0 1rem;"
                                        id="goal" type="number" step="0.01" required> <span style="text-align: left">%
                                    in the class.</span>
                            </label>
                        </div>
                    </div>
                    <div class="card-footer">
                        <h5>Final Info</h5>
                        <div style="display: flex; align-items: center">
                            <label class="form-group" style="display: flex; align-items: flex-end;"> <span
                                        style="text-align: right">Your final is worth</span> <input
                                        class="number-input form-control" style="width: 8rem; margin: 0 1rem 0 1rem;"
                                        id="finalWeight" type="number" step="0.00000001" required> <span
                                        style="text-align: left">% of your grade.</span> </label>
                        </div>
                        <div id="specialFinal" style="display: none; align-items: center">
                            <h6><strong>or</strong></h6>
                            <label class="form-group"
                                   style="align-items: center; display: flex; align-items: flex-end;"> <span
                                        style="text-align: right">Your final is worth</span> <input
                                        class="number-input form-control" style="margin: 0 1rem 0 1rem;"
                                        id="finalPoints" type="number" step="1"> <span
                                        style="text-align: left">points in </span>
                                <select style="margin-left: 1rem" class="classic" id="chooseWeight">
                                    <option disabled selected hidden>- - Select Class - -</option>
                                </select> </label>
                        </div>
                        <div id="pointFinal" style="display:none">
                            <h6><strong>or</strong></h6>
                            <label class="form-group" style="display: flex; align-items: flex-end;"> <span
                                        style="text-align: right">Your final is worth</span> <input
                                        class="number-input form-control" style="margin: 0 1rem 0 1rem;"
                                        id="pointFinalPoints" type="number" step="1"> <span
                                        style="text-align: left">points</span></label>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

</body>
</html>

<script>

    let data = <%- gradeData %>;
    let weights = <%- weightData %>;
    let appearance = <%- appearance %>;

    // Set up input divs
    let currentGradeDiv = $("#currentGrade");
    let chooseClassDiv = $("#chooseClass");
    let goalDiv = $("#goal");
    let chooseLetterGradeDiv = $("#chooseLetterGrade");
    let finalWeightDiv = $("#finalWeight");
    let finalPointsDiv = $("#finalPoints");
    let chooseWeightDiv = $("#chooseWeight");
    let pointFinalPointsDiv = $("#pointFinalPoints");
    let form = $("#calculateFinalGrade");

    // Messages
    let feedbackMessageDiv = $("#calculatorMessage");

    // Manage changes of currentGradeDiv
    currentGradeDiv.on("input", function () {
        // Submit the form.
        form.submit();
    });

    // Manage changes of chooseClassDiv
    chooseClassDiv.on("change", function () {
        if ($(this)[0].selectedIndex === 0) {
            currentGradeDiv.val("");
            currentGradeDiv.prop("defaultValue", "");
            finalWeightDiv.val("");
            finalWeightDiv.prop("defaultValue", "");
            $("#specialFinal").hide();
            $("#pointFinal").hide();
        } else if (weights[data[Object.keys(data)[$(this)[0].selectedIndex - 1]].class_name]["hasWeights"] === "false") {
            currentGradeDiv.val(+(getOverallGrade($(this)[0].selectedIndex - 1).toFixed(3)));
            currentGradeDiv.prop("defaultValue", +(getOverallGrade($(this)[0].selectedIndex - 1).toFixed(3)));
            $("#specialFinal").hide();
            $("#pointFinal").show();
        } else {
            currentGradeDiv.val(+(getOverallGrade($(this)[0].selectedIndex - 1).toFixed(3)));
            currentGradeDiv.prop("defaultValue", +(getOverallGrade($(this)[0].selectedIndex - 1).toFixed(3)));
            $("#specialFinal").show();
            $("#pointFinal").hide();
            manageChooseWeight($(this)[0].selectedIndex - 1);
        }
        if (finalWeightDiv !== null) {
            finalWeightDiv.val("");
            finalWeightDiv.prop("defaultValue", "");
            finalPointsDiv.val("");
            finalPointsDiv.prop("defaultValue", "");
            pointFinalPointsDiv.val("");
            pointFinalPointsDiv.prop("defaultValue", "");
        }

        // Submit the form.
        form.submit();
    });

    // Manage changes of goalDiv
    goalDiv.on("input", function () {
        // Submit the form.
        form.submit();
    });

    // Manage changes of chooseLetterGradeDiv
    chooseLetterGradeDiv.on("change", function () {
        goalDiv.val(document.getElementById("chooseLetterGrade").options[$(this)[0].selectedIndex].value);
        goalDiv.prop("defaultValue", document.getElementById("chooseLetterGrade").options[$(this)[0].selectedIndex].value);
        form.submit();
    });

    // Manage changes of finalWeightDiv
    finalWeightDiv.on("input", function () {
        finalPointsDiv.val("");
        finalPointsDiv.prop("defaultValue", "");
        pointFinalPointsDiv.val("");
        pointFinalPointsDiv.prop("defaultValue", "");
        $("#chooseWeight")[0].selectedIndex = 0;
        // Submit the form.
        form.submit();
    });

    // Manage changes of finalPointsDiv
    finalPointsDiv.on("input", function () {
        finalWeightDiv.val("");
        finalWeightDiv.prop("defaultValue", "");
        updateFinalWeight($("#chooseWeight option:selected"), "finalPointsDiv");
    });

    // Mange changes of chooseWeightDiv
    chooseWeightDiv.on("change", function () {
        finalWeightDiv.val("");
        finalWeightDiv.prop("defaultValue", "");
        updateFinalWeight($("#chooseWeight option:selected"), "chooseWeightDiv");
    });

    // Manage changes of pointFinalPointsDiv
    pointFinalPointsDiv.on("input", function () {
        updateFinalWeight(null, "pointFinalPointsDiv");
    });

    function updateFinalWeight(selectedWeight, editedField) {

        let classIndex = chooseClassDiv[0].selectedIndex - 1;
        let finalPoints;
        let categoryWeight;
        let grades = data;
        let classGrades = Object.values(grades)[classIndex].grades;
        let numPossible = 0;
        if (selectedWeight) {
            let categoryName = selectedWeight.html();
            finalPoints = finalPointsDiv.val();
            categoryWeight = selectedWeight[0].value;

            if (categoryWeight === "" && finalPoints === "") {
                feedbackMessageDiv.removeClass("alert-success").removeClass("alert-danger").addClass("alert-info").css("display", "block").find(".messageTxt").text("Step 3: Complete Final Info");
                return;
            }

            switch (editedField) {
                case "finalPointsDiv":
                    if (categoryWeight === "") {
                        feedbackMessageDiv.removeClass("alert-success").removeClass("alert-danger").addClass("alert-info").css("display", "block").find(".messageTxt").text("Step 4: Select a Category");
                        return;
                    }
                    if (finalPoints === "") {
                        feedbackMessageDiv.removeClass("alert-success").removeClass("alert-danger").addClass("alert-info").css("display", "block").find(".messageTxt").text("Step 4: Enter Final Points");
                        return;
                    }
                case "chooseWeightDiv":
                    if (finalPoints === "") {
                        feedbackMessageDiv.removeClass("alert-success").removeClass("alert-danger").addClass("alert-info").css("display", "block").find(".messageTxt").text("Step 4: Enter Final Points");
                        return;
                    }
                    if (categoryWeight === "") {
                        feedbackMessageDiv.removeClass("alert-success").removeClass("alert-info").addClass("alert-info").css("display", "block").find(".messageTxt").text("Step 4: Select a Category");
                        return;
                    }
            }
            for (let i = 0; i < classGrades.length; i++) {
                if (classGrades[i].category === categoryName) {
                    numPossible += classGrades[i].points_possible;
                }
            }
        } else {
            finalPoints = pointFinalPointsDiv.val();
            if (editedField === "pointFinalPointsDiv") {
                if (finalPoints === "") {
                    feedbackMessageDiv.removeClass("alert-success").removeClass("alert-danger").addClass("alert-info").css("display", "block").find(".messageTxt").text("Step 4: Enter Final Points");
                    return;
                }
            }
            for (let i = 0; i < classGrades.length; i++) {
                numPossible += classGrades[i].points_possible;
            }
            categoryWeight = 100;
        }
        let finalWeight = 0;
        if (parseFloat(finalPoints) > 0) {
            finalWeight = parseFloat(finalPoints) / (numPossible + parseFloat(finalPoints)) * categoryWeight;
        }

        // Get the text field
        let message = finalWeightDiv;
        $(message).val(parseFloat(finalWeight.toFixed(8)));
        $(message).prop("defaultValue", parseFloat(finalWeight.toFixed(8)));

        // Submit the form
        form.submit();

    }

    // Manage form submission
    form.submit(function (event) {

        event.preventDefault();
        let currentGrade = currentGradeDiv[0].valueAsNumber;
        let goal = goalDiv[0].valueAsNumber;
        let finalWeight = finalWeightDiv[0].valueAsNumber;
        let letterGoal;

        if (!currentGrade && currentGrade !== 0) {
            feedbackMessageDiv.removeClass("alert-success").removeClass("alert-danger").addClass("alert-info").find(".messageTxt").text("Step 1: Enter Current Grade or Select a Class");
            return;
        }

        if (currentGrade < 0) {
            feedbackMessageDiv.removeClass("alert-success").removeClass("alert-info").addClass("alert-danger").find(".messageTxt").text("Your Current Grade Should Be a Positive Number");
            return;
        }

        if (goal <= 0) {
            feedbackMessageDiv.removeClass("alert-success").removeClass("alert-info").addClass("alert-danger").find(".messageTxt").text("Try aiming higher");
            return;
        }

        if (!goal && goal !== 0) {
            feedbackMessageDiv.removeClass("alert-success").removeClass("alert-danger").addClass("alert-info").find(".messageTxt").text("Step 2: Enter Your Goal or Select Letter Grade");
            return;
        }

        if (finalWeight <= 0) {
            feedbackMessageDiv.removeClass("alert-success").removeClass("alert-info").addClass("alert-danger").find(".messageTxt").text("Your final weight must be positive");
            return;
        }

        if (!finalWeight) {
            feedbackMessageDiv.removeClass("alert-success").removeClass("alert-danger").addClass("alert-info").find(".messageTxt").text("Step 3: Complete Final Info");
            return;
        }

        let digitsInGoalMinusOne = Math.floor(Math.log10(goal)),
            firstDigitInGoal = Math.floor(goal / Math.pow(10, digitsInGoalMinusOne));
        if (firstDigitInGoal === 8) {
            letterGoal = "an " + goal + "%";
        } else {
            letterGoal = "a " + goal + "%";
        }

        if (goal === 97.5) {
            letterGoal = "an A+";
        } else if (goal === 92.5) {
            letterGoal = "an A";
        } else if (goal === 89.5) {
            letterGoal = "an A-";
        } else if (goal === 87.5) {
            letterGoal = "a B+";
        } else if (goal === 82.5) {
            letterGoal = "a B";
        } else if (goal === 79.5) {
            letterGoal = "a B-";
        } else if (goal === 77.5) {
            letterGoal = "a C+";
        } else if (goal === 72.5) {
            letterGoal = "a C";
        } else if (goal === 69.5) {
            letterGoal = "a C-";
        } else if (goal === 67.5) {
            letterGoal = "a D+";
        } else if (goal === 62.5) {
            letterGoal = "a D";
        } else if (goal === 59.5) {
            letterGoal = "a D-";
        }

        //TODO Finish these messages
        let grade = +((goal - (currentGrade * (100 - finalWeight) / 100)) / finalWeight * 100).toFixed(3);
        if (grade == null) {
            return;
        }
        let startMessage;
        let endMessage;
        if (grade > 100) {
            startMessage = "";
            endMessage = "";
        } else if (grade > 90) {
            startMessage = "";
            endMessage = "";
        } else if (grade > 80) {
            startMessage = "";
            endMessage = "";
        } else if (grade > 70) {
            startMessage = "";
            endMessage = "";
        } else if (grade > 60) {
            startMessage = "";
            endMessage = "";
        } else if (grade > 50) {
            startMessage = "";
            endMessage = "";
        } else if (grade > 0) {
            startMessage = "";
            endMessage = "";
        } else {
            startMessage = "";
            endMessage = "";
        }

        let digitsInGradeMinusOne = Math.floor(Math.log10(grade)),
            firstDigitInGrade = Math.floor(grade / Math.pow(10, digitsInGradeMinusOne));

        let formattedGrade;
        if (firstDigitInGrade === 8) {
            formattedGrade = "an " + grade + "%";
        } else {
            formattedGrade = "a " + grade + "%";
        }

        let gradeMessage = "You need " + formattedGrade + " on the final to get " + letterGoal + " overall.";
        let message = startMessage + " " + gradeMessage + " " + endMessage;

        if (grade > 100) {
            feedbackMessageDiv.removeClass("alert-success").removeClass("alert-info").addClass("alert-danger").css("display", "block").find(".messageTxt").text(message);
        } else if (grade > 80) {
            feedbackMessageDiv.removeClass("alert-success").removeClass("alert-danger").addClass("alert-info").css("display", "block").find(".messageTxt").text(message);
        } else {
            feedbackMessageDiv.removeClass("alert-info").removeClass("alert-danger").addClass("alert-success").css("display", "block").find(".messageTxt").text(message);
        }

    });

    // Sets up weight dropdown based on selected class
    function manageChooseWeight(classIndex) {
        let weightDropdown = document.getElementById("chooseWeight");
        chooseWeightDiv.find("option").remove();
        let newWeight = document.createElement("option");
        newWeight.text = "-- Category --";
        newWeight.value = "";
        weightDropdown.add(newWeight);
        if (classIndex >= 0) {
            for (let i = 0; i < Object.keys(weights[data[Object.keys(data)[classIndex]].class_name]["weights"]).length; i++) {
                if (Object.values(weights[data[Object.keys(data)[classIndex]].class_name]["weights"])[i]) {
                    let newWeight = document.createElement("option");
                    newWeight.text = Object.keys(weights[data[Object.keys(data)[classIndex]].class_name]["weights"])[i];
                    newWeight.value = Object.values(weights[data[Object.keys(data)[classIndex]].class_name]["weights"])[i].toString();
                    weightDropdown.add(newWeight);
                }
            }
        }
        if (weightDropdown.length === 1) {
            chooseWeightDiv.find("option").remove();
            newWeight.text = "-- Select Class --";
            newWeight.value = "";
            weightDropdown.add(newWeight);
        }
    }

    let alerts = <%- alerts %>;

    function updateTutorial(action) {
        if (window.innerWidth <= 991) {
            return;
        }
        $.ajax({
                   url: "/UpdateTutorialStatus", type: "POST", async: true, data: {action: action}
               }).done((response) => {
            alerts.tutorialStatus = JSON.parse(response);
            $("#" + action + "Popup").animate({opacity: 0}, 400, function () {
                $(this).removeClass("always-show").css("opacity", "");
            });
            setupTutorialPopups();
            updateTutorialProgress();
        });
    }

    // Hides message
    function closeMessage(id) {
        document.getElementById(id).style.display = "none";
    }

    // Returns total weight of class
    function getTotalWeight(classIndex) {
        let className = data[classIndex].class_name;
        let classWeights = Object.values(weights[className]["weights"]);
        let totalWeight = 0;
        let classCategories = Object.keys(weights[className]["weights"]);
        for (let i = 0; i < classWeights.length; i++) {
            if (getCategoryGottenAndPossible(classIndex, classCategories[i]).possible !== 0) {
                totalWeight += classWeights[i];
            }
        }
        return totalWeight;
    }

    // Returns category gotten and possible
    function getCategoryGottenAndPossible(classIndex, categoryName) {
        let grades = data[classIndex].grades;
        let totalGotten = 0;
        let totalPossible = 0;
        for (let i = 0; i < grades.length; i++) {
            if (!grades[i].exclude && grades[i].category === categoryName) {
                if (grades[i].points_gotten !== false && grades[i].points_possible !== false) {
                    totalGotten += grades[i].points_gotten;
                    totalPossible += grades[i].points_possible;
                }
            }
        }
        return {"gotten": totalGotten, "possible": totalPossible};
    }

    // Returns overall grade of class
    function getOverallGrade(classIndex) {
        let className = data[classIndex].class_name;
        if (className in weights) {
            let overallGrade = 0;
            if (weights[className]["hasWeights"] === "false") {
                let points_earned = 0;
                let points_total = 0;
                for (let assignment of data[classIndex]["grades"]) {
                    if (assignment["points_gotten"] !== false && assignment["points_possible"] !== false && assignment["exclude"] !== true) {
                        points_earned += assignment["points_gotten"];
                        points_total += assignment["points_possible"];
                    }
                }
                overallGrade = points_earned / points_total * 100;
            } else {
                let classCategories = Object.keys(weights[className]["weights"]);
                let classWeights = Object.values(weights[className]["weights"]);
                for (let i = 0; i < classCategories.length; i++) {
                    overallGrade += getCategoryGrade(classIndex, classCategories[i]) * classWeights[i] / 100;
                }
                let ratio = 100 / getTotalWeight(classIndex);
                overallGrade *= ratio;
            }
            return overallGrade;
        }
        return 0;
    }

    // Returns grade in category of class
    function getCategoryGrade(classIndex, categoryName) {
        let categoryGottenAndPossible = getCategoryGottenAndPossible(classIndex, categoryName);
        let totalGotten = categoryGottenAndPossible.gotten;
        let totalPossible = categoryGottenAndPossible.possible;
        if (totalPossible === 0) {
            return 0;
        }
        return +((totalGotten / totalPossible * 100).toFixed(3));
    }


    function isDST() {
        return Math.max(new Date(new Date(Date.now()).getFullYear(), 0, 1).getTimezoneOffset(), new Date(new Date(Date.now()).getFullYear(), 6, 1).getTimezoneOffset()) !== new Date(Date.now()).getTimezoneOffset();
    }

    let checkingTheme;
    let theme = appearance.theme;
    let darkModeStart = appearance.darkModeStart;
    let darkModeFinish = appearance.darkModeFinish;

    function setAutoTheme() {
        if (theme !== "auto") {
            clearInterval(checkingTheme);
            return;
        }
        darkModeStart = parseInt(darkModeStart);
        darkModeFinish = parseInt(darkModeFinish);
        if (theme === "dark" || (theme === "auto" && (((darkModeStart < darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= darkModeStart - (isDST() ? (darkModeStart === 0 ? -23 : 1) : 0)) && ((Date.now() / 1000 / 3600 - 8) % 24) < darkModeFinish - (isDST() ? (darkModeFinish === 1 ? -23 : 1) : 0))) || ((darkModeStart > darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= darkModeStart - (isDST() ? (darkModeStart === 0 ? -23 : 1) : 0)) || ((Date.now() / 1000 / 3600 - 8) % 24) < darkModeFinish - (isDST() ? (darkModeFinish === 1 ? -23 : 1) : 0)))))) {
            let oldDarkMode = document.getElementById("pageStyle").getAttribute("href") === "public/css/dark_mode.css";
            darkMode = true;
            if (darkMode !== oldDarkMode) {
                clearTimeout(changeTransition);
                document.getElementById("fade").disabled = false;
                $(".navbar-brand img").attr("src", "/public/resources/dark_mode/logo.png");
                document.getElementById("pageStyle").setAttribute("href", "public/css/dark_mode.css");
                setTimeout(() => {
                    document.getElementById("fade").disabled = true;
                }, 1000);
            }
        } else {
            let oldDarkMode = document.getElementById("pageStyle").getAttribute("href") === "public/css/dark_mode.css";
            darkMode = false;
            if (darkMode !== oldDarkMode) {
                clearTimeout(changeTransition);
                document.getElementById("fade").disabled = false;
                $(".navbar-brand img").attr("src", "/public/resources/light_mode/logo.png");
                document.getElementById("pageStyle").setAttribute("href", "public/css/light_mode.css");
                setTimeout(() => {
                    document.getElementById("fade").disabled = true;
                }, 1000);
            }
        }
    }

    async function checkTime() {
        clearInterval(checkingTheme);
        setAutoTheme();
        checkingTheme = window.setInterval(function () {
            setAutoTheme();
        }, 100);
    }

</script>
