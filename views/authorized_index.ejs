<!doctype html>
<html>
<head>
    <title>Graderoom</title>
    <link rel="icon" href="../public/resources/common/icon.png">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat:500&display=swap">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/chart.js@2.8.0/dist/Chart.min.css">
    <% if (user.appearance.darkMode) { %>
        <link rel="stylesheet" type="text/css" href="public/css/dark_mode.css">
    <% } else { %>
        <link rel="stylesheet" type="text/css" href="public/css/light_mode.css">
    <% } %>
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
    
    <!-- Navbar -->
    <% include partials/user/navbar.ejs %>
    <% include partials/user/edit_weights_card.ejs %>

    <!-- Class Links -->
    <ul class="mx-5 my-3 nav nav-fill" style="border-bottom: 2px solid #999999; color: #BBBBBB;" >
        <li class="nav-item active" id="link-1">
            <a class="nav-link" onclick="showPage(-1)">Overview</a>
        </li>
        <% for (let i = 0; i<JSON.parse(gradeData).length; i++) { %>
            <li class="nav-item" id="link<%=i%>">
                <a style="color: <%=user.appearance.classColors[i]%>" class="nav-link" onclick="showPage(<%=i%>)"><%=(JSON.parse(gradeData)[i].class_name)%></a>
            </li>
        <% } %>
    </ul>

    <!-- Main Screen -->
    <div class="container">
        <!-- Messages -->
        <% if (updateGradesMessageSuccess.length > 0) { %>
            <br>
            <div class="alert alert-success alert-dismissible">
                <a class="close" data-dismiss="alert" aria-label="close">X</a>
                <%= updateGradesMessageSuccess %>
            </div>
        <% } else if (updateGradesMessageFail.length > 0) { %>
            <br>
            <div class="alert alert-danger alert-dismissible">
                <a class="close" data-dismiss="alert" aria-label="close">X</a>
                <%= updateGradesMessageFail %>
            </div>
        <% } else { %>
            <br>
        <% } %>

        <!-- <div class="alert alert-danger alert-dismissible" id="weightmsg" style="display:none">
            <a class="close" data-dismiss="alert" aria-label="close">X</a>
            <span id="weightmsg_text">asdf</span>
        </div> -->

        <!-- Overview Section -->
        <span id="section-1">
            <div class="alert alert-danger alert-dismissible" id="weightmsg-1" style="display:none">
                <a class="close" data-dismiss="alert" aria-label="close">X</a>
                <span id="weightmsg_text-1"></span> | <u style="cursor: pointer" onclick="showUpdateWeights()">Edit Weights</u>
            </div>
            <a class="btn btn-med" onclick="showUpdateWeights()">Edit Weights</a>
            <div id="chart-container-1" class="chart-container" style="position: relative; height:60vh; width:75vw;margin: 0 auto;">
                <canvas id="chart-1" class="chart" style="width:50%; margin: auto;"></canvas>
            </div>
        </span>

        <!-- Class Sections -->
        <% for (let i = 0; i<JSON.parse(gradeData).length; i++) { %>
        <span id="section<%=i%>" style="display: none;">
            <div class="alert alert-danger alert-dismissible" id="weightmsg<%=i%>" style="display:none">
                <a class="close" data-dismiss="alert" aria-label="close">X</a>
                <span id="weightmsg_text<%=i%>"></span>
            </div>
            <a class="btn btn-med" onclick="showUpdateWeights(<%=i%>)">Edit Weights</a>
            <div id="chart-container<%=i%>" class="chart-container" style="position: relative; height:40vh; width:50vw;margin: 0 auto;">
                <canvas id="chart<%=i%>" class="chart" style="width:50%; margin: auto;"></canvas>
            </div>
            <hr>
            <table class="table" id="table<%=i%>">
                <thead><tr>
                    <th style="width:25%;">Assignment Name</th>
                    <th style="width:25%;">Date</th>
                    <th style="width:25%;">Category</th>
                    <th style="width:25%;">Assignment Percent</th>
                    <th style="width:25%;">Score</th>
                </tr></thead>

                <% for (let grade of JSON.parse(gradeData)[i].grades) { %>
                    <tr>
                        <td><%= grade.assignment_name%> </td>
                        <td><%= grade.date%> </td>
                        <td><%= grade.category%> </td>
                        <% if (grade.grade_percent == -1) { %>
                        <td></td>
                        <% } else { %>
                        <td><%= grade.grade_percent %></td>
                        <% } %>
                        <% if (grade.points_possible != 0) { %>
                        <td><%= grade.points_gotten %>/<%= grade.points_possible %></td>
                        <% } else { %>
                        <td><%= grade.points_gotten %></td>
                        <% } %>
                    </tr>
                <% } %>
            </table>
        </span>
        <% } %>
    </div>
        
    <!-- JavaScript Imports -->
    <script src="https://cdn.jsdelivr.net/npm/moment@2.24.0/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0/dist/Chart.min.js"></script>

    <!-- Custom JavaScript -->
    <script>

        let user = <%- userRef %>;
        let data = <%- gradeData %>;
        let weights = <%- weightData %>;
            
        let parsedData = [];
        let unobtainedWeights = {};

        parseData();
        if (Object.keys(unobtainedWeights).length){ //If not empty
            showUpdateWeights();
        }
        updateWeightMessages();
        renderAllCharts();

        function showWeightMessage(msg,id) {
            let wmRef = document.getElementById("weightmsg"+id);
            let wmTextRef = document.getElementById("weightmsg_text"+id);
            if (msg !== 'Missing Weights: ') {
                wmRef.style.display = "block";
                wmTextRef.innerText = msg;
            }
        }

        function hideWeightMessage(id) {
            let wmRef = document.getElementById("weightmsg"+id);
            let wmTextRef = document.getElementById("weightmsg_text"+id);
            wmRef.style.display = "none";
            wmTextRef.innerText = "";
        }

        function updateWeightMessages() {
            if (unobtainedWeights.length > 0) {
                hideWeightMessage(-1)
            } else {
                showWeightMessage("Missing Weights: " + Object.keys(unobtainedWeights).join(", "),-1);
            }
            for (var id = 0; id<data.length; id++){
                if (data[id].class_name in unobtainedWeights) { //TODO idk if this index get is safe
                    showWeightMessage("Missing Weights: " + unobtainedWeights[data[id].class_name].join(", "),id)
                } else {
                    hideWeightMessage(id)
                }
            }
        }

        function parseData() {

            /*
            WEIGHTS first
             */

            for (let classData of data){
                let className = classData.class_name;
                let needWeights = !(className in weights) || (Object.entries(weights[className]).length === 0 && weights[className].constructor === Object)
                let localMissingCategories = [];

                if ((className in weights) && (!weights[className].hasWeight))
                    needWeights = false;
                else {
                    for (let grade of classData.grades){
                        // console.log(grade.category)

                        if (!(className in weights) || !(grade.category in weights[className])) {
                            if (!localMissingCategories.includes(grade.category)) {
                                localMissingCategories.push(grade.category);
                            }
                            needWeights = true;
                        }
                    }
                    // console.log("LMC")
                    // console.log(localMissingCategories)

                    if (!(className in unobtainedWeights) && needWeights) {
                        unobtainedWeights[className] = localMissingCategories; //todo here add specific weights (i.e. You don't have the Test category...)
                    }
                }
            }

            console.log(unobtainedWeights)

            /**
             * now grades!
             */

            //Add array to each object in parsedData: one for weights (not needed?), one for missing weights
            //Get data for one class

            for (let classData of data) {

                let className = classData.class_name;
                let overallGradeSteps = [];
                let totalPossiblesAndGottens = {}; //by category
                let totalWeightValue = 0; // divide by the total weight amount - so even if the final is not entered the grade is still of of 100
                // VERY JANK CHANGE LATER
                let doesntHaveWeights = className in unobtainedWeights; //Already checked for above: || weights[className].hasWeights === false;
                // console.log(className + " DHW? : " + doesntHaveWeights);

                for (let grade of classData.grades) {
                    let category = grade.category;
                    if (doesntHaveWeights) {
                        category = 'default';
                    }
                    try {
                        if (typeof totalPossiblesAndGottens[category] === 'undefined') {
                            let weightVal = 100;
                            if (!doesntHaveWeights) {
                                weightVal = weights[className][category];
                            }
                            totalPossiblesAndGottens[category] = {
                                totalPossible: 0,
                                totalGotten: 0,
                                weight: weightVal,
                            }
                            totalWeightValue += weightVal;
                        }

                        if (!grade.exclude) {
                            totalPossiblesAndGottens[category].totalPossible += grade.points_possible;
                            totalPossiblesAndGottens[category].totalGotten += grade.points_gotten;
                        }

                        let overallPercent = 0;
                        for (let [key, value] of Object.entries(totalPossiblesAndGottens)) {
                            overallPercent = overallPercent + (value.weight * (value.totalPossible !== 0 ?
                                (value.totalGotten / value.totalPossible) : value.totalGotten));
                        }
                        let total = ((overallPercent/totalWeightValue) * 100).toFixed(3);
                        total = +total;
                        //rounds to 3 decimal places (the plus sign drops any trailing zeros)

                        overallGradeSteps.push(total);
                    } catch(err) {
                        console.log(err);
                        console.log("bad weight input");
                    }
                }

                let assignmentNames = classData.grades.map(x => x.assignment_name);
                let assignmentTimestamps = classData.grades.map(x => new Date(x.date));
                let assignmentPercents = classData.grades.map(x => x.grade_percent);
                let assignmentScoresParsed = classData.grades.map(x => x.points_gotten+"/"+x.points_possible);
                let mixedData = overallGradeSteps.map(function (grade, i) {
                    return {x:assignmentTimestamps[i], y:grade}
                });

                parsedData.push({
                    assignmentNames: assignmentNames,
                    assignmentTimestamps: assignmentTimestamps,
                    assignmentPercents: assignmentPercents,
                    assignmentScoresParsed: assignmentScoresParsed,
                    mixedData: mixedData,
                });
            }
        }

        function renderAllCharts() {
            renderOverviewChart();
            for (let i = 0; i<data.length; i++){
                renderChart(i)
            }
        }

        let hoveredDatasetIndex = -1;

        function renderOverviewChart() {
            let ctx = document.getElementById('chart-1');
            let id = 0;
            let dataset = []
            let colors = user.appearance.classColors;
            for (let i = 0; i<data.length; i++)
            {
                dataset.push({
                    label: data[i].class_name,
                    backgroundColor: 'transparent',
                    pointBackgroundColor: brighten(colors[i],100),
                    pointBorderColor: 'transparent',
                    borderColor: brighten(colors[i],100),
                    data: parsedData[i].mixedData,
                    cubicInterpolationMode: 'monotone',
                    spanGaps: false,
                    pointRadius: 3,
                    borderWidth: 3,
                    pointHoverRadius: 7,
                    pointHoverBackgroundColor: brighten(colors[i], -20),
                    pointHoverBorderColor: brighten(colors[i], 10),
                    pointHoverBorderWidth: 2
                });
            }
            let numRunning = 0;
            let myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: dataset,
                },
                options: {
                    hover: {
                        mode: 'nearest',
                        intersect: false,
                    },
                    onHover: function onHover (evt, activeElements) {
                        if (!activeElements || !activeElements.length) return;
                        let datasetIndex = activeElements[0]._datasetIndex;
                        let activeDataset = this.data.datasets[datasetIndex];
                        for (let i = 0; i < this.data.datasets.length; i++) {
                            let inactiveDataset = this.data.datasets[i];
                            inactiveDataset.borderWidth = 3;
                            inactiveDataset.pointRadius = 3;
                        }
                        activeDataset.borderWidth = 5;
                        activeDataset.pointRadius = 5;
                        this.update(200);
                        let chart = this;
                        numRunning++;
                        setTimeout(function () {
                            numRunning--;
                            if (numRunning === 0) {
                                for (let i = 0; i < chart.data.datasets.length; i++) {
                                    let dataset = chart.data.datasets[i];
                                    dataset.borderWidth = 3;
                                    dataset.pointRadius = 3;
                                }
                                chart.update(2000);
                            }
                        }, 3000);
                    },
                    scales: {
                        xAxes: [{
                            type: 'time',
                            time: {
                                unit: 'month'
                            },
                            ticks: {
                                fontColor: 'white',
                                fontFamily: 'Verdana',
                                fontSize: '13'
                            },
                            gridLines: {
                                color: '#555555',
                            }
                        }],
                        yAxes: [{
                            ticks: {
                                fontColor: 'white',
                                fontFamily: 'Verdana',
                                fontSize: '12'
                            },
                            gridLines: {
                                color: '#555555',
                                drawBorder: false
                            }
                        }]
                    },
                    animation: {
                        easing: 'easeOutCubic'
                    },
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            fontColor: 'white',
                            fontFamily: 'Verdana',
                            boxWidth: 20,
                            fontSize: 13,
                        }
                    },
                    tooltips: {
                        enabled: true,
                        position: 'nearest',
                        intersect: false,
                        displayColors: false,
                        callbacks: {
                            title: function(tooltipItems, data) {
                                return moment(tooltipItems[0].xLabel).format("MM/DD/YY") + " " + parseFloat(tooltipItems[0].value).toFixed(2) + "%";
                            },
                            label: function(tooltipItem, data) {
                                // console.log(tooltipItem);
                                // console.log(data);
                                return parsedData[tooltipItem.datasetIndex].assignmentNames[tooltipItem.index] + " - "
                                    + (parsedData[tooltipItem.datasetIndex].assignmentPercents[tooltipItem.index] !== -1 ?
                                        (parsedData[tooltipItem.datasetIndex].assignmentPercents[tooltipItem.index] + "%") :
                                        (""))
                                    + ((parsedData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index]
                                        .substring(parsedData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].length - 2))
                                    !== '/0' ?
                                        (" (" + parsedData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index] + ")") :
                                        (parsedData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].substring(0,
                                            parsedData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].length - 2)));
                            },
                        }
                    },
                    responsive: true,
                    maintainAspectRatio: false,
                }
            });
        }

        function brighten(color, amount) {
            let hex = color.substring(1);
            let origR = parseInt(hex.substring(0,2),16);
            let origG = parseInt(hex.substring(2,4),16);
            let origB = parseInt(hex.substring(4),16);
            let minAmtR = -100;
            let maxAmtR = Math.round((255 - origR) / 255 * 100);
            let minAmtG = -100;
            let maxAmtG = Math.round((255 - origG) / 255 * 100);
            let minAmtB = -100;
            let maxAmtB = Math.round((255 - origB) / 255 * 100);
            let commonMin = Math.max(minAmtR, minAmtG, minAmtB);
            let commonMax = Math.min(maxAmtR, maxAmtG, maxAmtB);
            amount < commonMin ? amount = commonMin : amount;
            amount > commonMax ? amount = commonMax : amount;
            let newR = Math.round(origR * (100 + amount) / 100);
            let newG = Math.round(origG * (100 + amount) / 100);
            let newB = Math.round(origB * (100 + amount) / 100);
            newR > 255 ? newR = 255 : newR < 0 ? newR = 0 : newR;
            newG > 255 ? newG = 255 : newG < 0 ? newG = 0 : newG;
            newB > 255 ? newB = 255 : newB < 0 ? newB = 0 : newB;
            return ('#' + newR.toString(16) + newG.toString(16) + newB.toString(16)).toUpperCase();
        }

        function renderChart(id) {
            let ctx = document.getElementById('chart'+id);
            let colors = user.appearance.classColors;
            let myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [
                        {
                            label: 'parsedData[id]',
                            backgroundColor: 'rgba(256,256,256,0.05)',
                            pointBackgroundColor: brighten(colors[id],100),
                            pointBorderColor: brighten(colors[id],100),
                            borderColor: brighten(colors[id],100),
                            fill: 'start',
                            data: parsedData[id].mixedData,
                            cubicInterpolationMode: 'monotone',
                            spanGaps: false,
                            pointRadius: 3,
                            borderWidth: 3,
                            pointHoverRadius: 7,
                            pointHoverBackgroundColor: brighten(colors[id],-20),
                            pointHoverBorderColor: brighten(colors[id],10),
                            pointHoverBorderWidth: 2
                        }
                    ]
                },
                options: {
                    hover: {
                        mode: 'nearest',
                        intersect: false
                    },
                    scales: {
                        xAxes: [{
                            type: 'time',
                            time: {
                                unit: 'month'
                            },
                            ticks: {
                                fontColor: 'white',
                                fontFamily: 'Verdana',
                                fontSize: '13'
                            },
                            gridLines: {
                                color: '#555555',
                            }
                        }],
                        yAxes: [{
                            ticks: {
                                fontColor: 'white',
                                fontFamily: 'Verdana',
                                fontSize: '12'
                            },
                            gridLines: {
                                color: '#555555',
                                drawBorder: false
                            }
                        }]
                    },
                    animation: {
                        easing: 'easeOutCubic'
                    },
                    legend: {
                        display: false,
                    },
                    tooltips: {
                        enabled: true,
                        position: 'nearest',
                        intersect: false,
                        displayColors: false,
                        callbacks: {
                            title: function(tooltipItems, data) {
                                return moment(tooltipItems[0].xLabel).format("MM/DD/YY") + " " + parseFloat(tooltipItems[0].value).toFixed(2) + "%";
                            },
                            label: function(tooltipItem, data) {
                                return parsedData[id].assignmentNames[tooltipItem.index] + " - "
                                        + (parsedData[id].assignmentPercents[tooltipItem.index] !== -1 ?
                                        (parsedData[id].assignmentPercents[tooltipItem.index] + "%") :
                                        (""))
                                        + ((parsedData[id].assignmentScoresParsed[tooltipItem.index]
                                        .substring(parsedData[id].assignmentScoresParsed[tooltipItem.index].length - 2))
                                        !== '/0' ?
                                        (" (" + parsedData[id].assignmentScoresParsed[tooltipItem.index] + ")") :
                                        (parsedData[id].assignmentScoresParsed[tooltipItem.index].substring(0,
                                        parsedData[id].assignmentScoresParsed[tooltipItem.index].length - 2)));
                            },
                        }
                    },
                    responsive: true,
                    maintainAspectRatio: false,
                }
            });
        }

        function showPage(id) {
            for (let i = -1; i < data.length; i++) {
                document.getElementById("link" + i).classList.remove("active");
            }
            document.getElementById("link" + id).classList.add("active");

            for (let i = -1; i < data.length; i++) {
                document.getElementById("section" + i).style.display = "none";
            }
            document.getElementById("section" + id).style.display = "block";
        }

    </script>
</body>
</html>
