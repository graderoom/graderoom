<!doctype html>
<html>
<head>
    <title>Graderoom</title>
    <link rel="icon" href="../public/resources/icon.png">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat:500&display=swap">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/chart.js@2.8.0/dist/Chart.min.css">
    <link rel="stylesheet" href="public/css/main.css">
</head>
<body>

    <script type="text/javascript">
        function showDiv(id) {document.getElementById(id).style.display = "block";}
        function hideDiv(id) {document.getElementById(id).style.display = "none";}
    </script>

    <!-- Update Grade Card -->
    <div class="container">
        <div class="blurred-login" id="toggle" style="position:fixed; display:none; height: 100%; width: 100%; top: 0; left: 0; z-index: 1">
            <div class="blurred-background" style="position: fixed; background-image: url(/public/resources/blur.png); width: 100%; height: 100%; filter: opacity(0.9);"></div>
            <div class="col-sm-10 col-md-8 col-lg-6 mx-auto">
                <div class="card card-signin my-5">
                    <btn class="btn btn-md" onclick="hideDiv('toggle')" style="width: fit-content; margin-bottom:0">
                        <i class="fa fa-arrow-left" aria-hidden="true"></i>
                        Return
                    </btn>
                    <div class="card-body">   
                        <h1 class="card-title text-center">School Login</h1>
                        <h5 class="text-center">Enter password for: </h5>
                        <h5 class="text-center" style="color: #BBBBBB;"><%=schoolUsername%></h5>
                        <br>
                        <form class="form-signin" action="/update" method="post">
                            <div class="form-group">
                                <input name="school_password" type="password" id="inputPassword" class="form-control" placeholder="Password" required>
                            </div>
                            <div class="text-center">
                                <button class="btn btn-lg btn-default" type="submit" onclick="hideDiv('toggle')">Sign In</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Nav Bar -->    
    <nav class="navbar navbar-dark navbar-expand-lg justify-content-center">
        <span class="d-flex w-50 mr-auto">
            <a href="/" class="navbar-brand" >            
                <h1> <img src="/public/resources/logo.png" style="width: 3rem" class="d-inline-block" alt=""> Graderoom </h1>
            </a>
        </span>
        <button class="navbar-toggler collapsed" type="button" data-toggle="collapse" data-target="#collapsingNav" aria-controls="collapsingNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="navbar-collapse collapse w-100" id="collapsingNav">
            <ul class="navbar-nav w-100 justify-content-center">
                <li class="nav-item">
                    <h5 class=""><%=user.username%></h5>
                </li>
            </ul>
            <ul class="navbar-nav w-100 justify-content-end">
                <li class="nav-item">
                    <button type="submit" class="btn btn-med" onclick="showDiv('toggle')">
                        <i class="fa fa-refresh" aria-hidden="true"></i>
                        Update Grades
                    </button>
                </li>
                <li class="nav-item">
                    <a href="/settings" class="btn btn-med">
                        <i class="fa fa-cog fa-lg" aria-hidden="true"></i>
                        Settings
                    </a>
                </li>
                <li class="nav-item active">
                    <a href="/logout" class="btn btn-med">
                        <i class="fa fa-sign-out" aria-hidden="true"></i>
                        Logout
                    </a>
                </li>
            </ul>
        </div>
    </nav>

    <!-- Messages-->
    <% if (updateGradesMessageSuccess.length > 0) { %>
        <div class="alert alert-success"><%= updateGradesMessageSuccess %></div>
    <% } %>

    <% if (updateGradesMessageFail.length > 0) { %>
        <div class="alert alert-danger"><%= updateGradesMessageFail %></div>
    <% } %>
    <br>

    <!-- Main Screen -->
    <div class="container">
        <ul class="nav nav-pills nav-justified">
            <li class="nav-item">
                <a class="nav-link" onclick="showPage(-1)">Overview</a>
            </li>
            <% for (let i = 0; i<JSON.parse(gradeData).length; i++) { %>
                <li class="nav-item">
                    <a class="nav-link" onclick="showPage(<%=i%>)"><%=(JSON.parse(gradeData)[i].class_name)%></a>
                </li>
            <% } %>
        </ul>
        
        <br> <br>

        <% for (let i = 0; i<JSON.parse(gradeData).length; i++) { %>
            <div id="chart-container<%=i%>" class="chart-container" style="position: relative; height:40vh; width:50vw;margin: 0 auto;">
                <canvas id="chart<%=i%>" class="chart" style="width:50%; margin: auto;"></canvas>
            </div>
        <% } %>

        <% for (let i = 0; i<JSON.parse(gradeData).length; i++) { %>
        <hr>
            <table class="table" id="table<%=i%>">
                <thead>
                <tr>
                    <th style="width:25%;">Assignment Name</th>
                    <th style="width:25%;">Date</th>
                    <th style="width:25%;">Category</th>
                    <th style="width:25%;">Assignment Percent</th>
                    <th style="width:25%;">Score</th>
                </tr>
                </thead>

                <% for (let grade of JSON.parse(gradeData)[i].grades) { %>
                    <tr>
                        <td><%= grade.assignment_name%> </td>
                        <td><%= grade.date%> </td>
                        <td><%= grade.category%> </td>
                        <td><%= grade.grade_percent%> </td>
                        <td><%= grade.points_gotten%>/<%= grade.points_possible%></td>
                    </tr>
                <% } %>
            </table>
        <hr>

        <% } %>


        <!-- JavaScript Imports -->
        <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
            integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
            crossorigin="anonymous"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"
            integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
            crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/moment@2.24.0/moment.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0/dist/Chart.min.js"></script>


        <!-- Custom JavaScript -->
        <script>         
            // Collapse navbar when click outside
            $(document).click(function (e) {
                if (!$(e.target).closest('#collapsingNav').length && !$(e.target).is('#collapsingNav')){
                    $('.navbar-collapse').collapse('hide');
                }
            });
            // Collapse navbar when press escape
            $(document).keyup(function (e) {
                if (e.key === "Escape") { // escape key maps to keycode `27`
                    $('.navbar-collapse').collapse('hide');
                }
            });

            let data = <%- gradeData %>;
            function renderChart(id)
            {
                /**
                 * TODO  - this should be calculated once onload
                 * not every time we want to render a charts
                 */
                let overallGradeSteps = [];
                let totalPossiblesAndGottens = {}; //by category
                let totalWeightValue = 0; // divide by the total weight amount - so even if the final is not entered the grade is still of of 100

                let doesntHaveWeights = Object.entries(data[id].weights).length === 0 && data[id].weights.constructor === Object

                for (let grade of data[id].grades) {

                    let category = grade.category;
                    if (doesntHaveWeights) {
                        category = 'default';
                    }

                    try {

                        if (typeof totalPossiblesAndGottens[category] === 'undefined') {

                            let weightVal = data[id].weights[category];
                            if (doesntHaveWeights) {
                                weightVal = 100;
                            }


                            totalPossiblesAndGottens[category] = {
                                totalPossible: 0,
                                totalGotten: 0,
                                weight: weightVal,
                            }
                            totalWeightValue += weightVal;
                        }

                        totalPossiblesAndGottens[category].totalPossible = totalPossiblesAndGottens[category].totalPossible + grade.points_possible;
                        totalPossiblesAndGottens[category].totalGotten = totalPossiblesAndGottens[category].totalGotten + grade.points_gotten;

                        let overallPercent = 0;
                        for (let [key, value] of Object.entries(totalPossiblesAndGottens)) {
                            overallPercent = overallPercent + (value.weight * (value.totalGotten / value.totalPossible));
                        }
                        let total = ((overallPercent/totalWeightValue) * 100).toFixed(3);
                        total = +total;
                        //rounds to 3 decimal places (the plus sign drops any trailing zeros)

                        overallGradeSteps.push(total);
                    } catch(err) {
                        console.log(err);
                        console.log("bad weight input");
                    }

                }

                let assignmentNames = data[id].grades.map(x => x.assignment_name)
                let assignmentTimestamps = data[id].grades.map(x => new Date(x.date))

                let mixedData = overallGradeSteps.map(function (grade, i) { 
                    return {x:assignmentTimestamps[i], y:grade}
                });

                var ctx = document.getElementById('chart'+id);
                var myChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        datasets: [
                            {
                                label: 'Overall Grade',
                                backgroundColor: 'rgba(256,256,256,0.05)',
                                pointBackgroundColor: 'white',
                                pointBorderColor: 'white',
                                borderColor: '#BBBBBB',
                                fill: 'start',
                                data: mixedData,
                                cubicInterpolationMode: 'monotone',
                                spanGaps: false
				            }
                        ]
                    },
                    options: {
                        scales: {
                            xAxes: [{
                                type: 'time',
                                time: {
                                    unit: 'month'
                                },
                                ticks: {
                                    fontColor: 'white',
                                    fontFamily: 'Verdana',
                                    fontSize: '13'
                                },
                                gridLines: {
                                    color: '#555555',
                                }
                            }],
                            yAxes: [{
                                ticks: {
                                    fontColor: 'white',
                                    fontFamily: 'Verdana',
                                    fontSize: '12'
                                },
                                gridLines: {
                                    color: '#555555',
                                    drawBorder: false
                                }
                            }]
                        },
                        animation: {
                            easing: 'easeOutCubic'
                        },
                        legend: {
                            display: false,
                        },
                        tooltips: {
                            enabled: true,
                            position: 'nearest',
                            intersect: false,
                            displayColors: false,
                            callbacks: {
                                title: function(tooltipItems, data) {
                                    console.log(tooltipItems[0])
                                    return moment(tooltipItems[0].xLabel).format("MM/DD/YY") + " " + parseFloat(tooltipItems[0].value).toFixed(2) + "%";
                                },
                                label: function(tooltipItem, data) {
                                    var label = []
                                    label[0] = assignmentNames[tooltipItem.index];
                                    // label[1] = "Assignment Score";
                                    // label[2] = "Category";
                                    return label;
                                },
                            }
                        },
                        responsive: true,
                        maintainAspectRatio: false,
                    }
                });

            }
            for (let i = 0; i<data.length; i++)
            {
                renderChart(i)
            }
            function showPage(id) {
                console.log(document.getElementById('table0').style);

                if (id===-1)
                {
                    for (let i = 0; i < data.length; i++) {

                        document.getElementById("chart-container" + i).style.display = "block";
                        document.getElementById("table" + i).style.display = "table";
                    }
                } else {
                    for (let i = 0; i < data.length; i++) {
                        document.getElementById("chart-container" + i).style.display = "none";
                        document.getElementById("table" + i).style.display = "none";
                    }

                    document.getElementById("chart-container" + id).style.display = "block";
                    document.getElementById("table" + id).style.display = "table";
                }

            }
        </script>

    </div>
</body>
</html>
