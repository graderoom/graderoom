<!doctype html>
<html lang="en-US">
<head>
    <title>Graderoom</title>
    <link rel="icon" href="public/resources/common/icon.png">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat:500&display=swap">
    <% let theme; %>
    <% if (JSON.parse(appearance).theme === "dark") { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/dark_mode.css">
    <% } else if (JSON.parse(appearance).theme === "light") { %>
        <% theme = false; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/light_mode.css">
    <% } else if ((((JSON.parse(appearance).darkModeStart < JSON.parse(appearance).darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8 + (dst ? 1 : 0)) % 24) >= JSON.parse(appearance).darkModeStart) && ((Date.now() / 1000 / 3600 - 8 + (dst ? 1 : 0)) % 24) < JSON.parse(appearance).darkModeFinish)) || ((JSON.parse(appearance).darkModeStart > JSON.parse(appearance).darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8 + (dst ? 1 : 0)) % 24) >= JSON.parse(appearance).darkModeStart) || ((Date.now() / 1000 / 3600 - 8 + (dst ? 1 : 0)) % 24) < JSON.parse(appearance).darkModeFinish)))) { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/dark_mode.css">
    <% } else { %>
        <% theme = false; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/light_mode.css">
    <% } %>
    <link rel="stylesheet" type="text/css" href="public/css/main.css">
    <link id="fade" rel="stylesheet" type="text/css" href="public/css/fade.css" disabled>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- JavaScript Imports -->
    <script src="https://cdn.jsdelivr.net/npm/moment@2.24.0/moment.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3"></script>
    <script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@0.7.7"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/2.4.1/lodash.min.js"></script>
</head>
<body>

<% if (JSON.parse(alerts).policyLastSeen === "never" || JSON.parse(alerts).termsLastSeen === "never") { %>

    <% if (JSON.parse(alerts).termsLastSeen === "never") { %>
        <% include partials/user/terms_and_conditions.ejs %>
            <script>
                $("#termsDisplay").show();
            </script>
    <% } %>
    <% if (JSON.parse(alerts).policyLastSeen === "never") { %>
        <% include partials/user/privacy_policy.ejs %>
            <script>
                $("#privacyDisplay").show();
            </script>
    <% } %>

<% } else { %>

    <!-- Navbar -->
    <% include partials/user/navbar.ejs %>
        <% <!-- DO NOT REMOVE this is there for my IDE's autoformatting to not mess up --> %>

        <% let classPage = -1; %>
        <i id="pageNumber" style="display:none"><%= classPage %></i>

        <!-- Class Links -->
        <% if (JSON.parse(gradeData).length > 0) { %>
            <ul id="classLinks" class="nav nav-fill" style="color: #BBBBBB">
                <li class="nav-item" id="link-1">
                    <a class="nav-link" onclick="showPage(-1)">Overview</a>
                </li>
                <% let offset = 0; %>
                <% for (let i = 0; i < JSON.parse(gradeData).length; i++) { %>
                    <% if (JSON.parse(appearance).showNonAcademic || JSON.parse(relevantClassData)[JSON.parse(gradeData)[i].class_name]["classType"] !== "non-academic") { %>
                        <li class="nav-item" id="link<%= i + offset %>">
                            <a class="nav-link" style="color: <%= JSON.parse(appearance).classColors[i] %>"
                               onclick="showPage(<%= i + offset %>)"><%= (JSON.parse(gradeData)[i].class_name) %></a>
                        </li>
                    <% } else {
                        offset--;
                    } %>
                <% } %>
            </ul>
        <% } %>

        <!-- Main Screen -->
        <div class="container">
            <div class="backToHome" style="display: none" onclick="showPage(-1)">
                <i class="fa fa-arrow-left"></i>
                <span></span>
            </div>
            <!-- Overview Section -->
            <% if (JSON.parse(alerts).lastUpdated.length !== 0) { %>
                <span id="section-1">
                    <div style="display: flex">
                        <div id="GPA-container">
                            <h5 style="font-size: 2rem" class="text-center" id="GPA-label">Semester GPA</h5>
                            <h5 style="font-size: 5rem" id="GPA-display">--</h5>
                            <span class="popup">
                                <i id="incorrectGPA"
                                   class="fa fa-2x fa-exclamation-triangle"
                                   style="display: none; margin-left: 0.2rem; vertical-align: middle">
                                    <span class="popup-bottom">
                                        Does not match calculated GPA
                                    </span>
                                </i>
                            </span>
                        </div>
                        <div id="chart-container-1" class="chart-container text-center">
                            <button id="reset-zoom-1"
                                    style="position: absolute; top: 0; right: 0; height: fit-content; display:none"
                                    class="btn btn-sm" onclick="resetZoom(-1); $(this).hide()">Reset
                            </button>
                            <canvas id="chart-1" class="chart" style="height: 60vh; width: 60vw;"></canvas>
                        </div>
                    </div>
                    <br>
                    <div class="table" id="table-1">
                        <% offset = 0; %>
                        <% for (let i = 0; i < JSON.parse(gradeData).length; i++) { %>
                            <% if (JSON.parse(appearance).showNonAcademic || JSON.parse(relevantClassData)[JSON.parse(gradeData)[i].class_name]["classType"] !== "non-academic") { %>
                                <table class="rounded-table text-center">
                                    <thead>
                                        <th id="overview<%= i + offset %>" class="overview"
                                            style="cursor: pointer; text-align: center; color: <%= JSON.parse(appearance).classColors[i] %>"
                                            onclick="showPage(<%= i + offset %>)">
                                            <%= JSON.parse(gradeData)[i].class_name %>
                                            <span class="popup">
                                                <i id="incorrectOverviewGrade<%= i + offset %>"
                                                   class="fa fa-exclamation-triangle"
                                                   style="display: none; margin-left: 0.2rem">
                                                    <span class="popup-top-left">
                                                        Does not match calculated grade
                                                    </span>
                                                </i></span></th>
                                    </thead>
                                    <tbody>
                                        <td class="overview"
                                            style="padding-top: 0.5rem; padding-bottom: 0; cursor: pointer; color: <%= JSON.parse(appearance).classColors[i] %>"
                                            onclick="showPage(<%= i + offset %>)">
                                            <div id="overviewChart<%= i + offset %>"
                                                 style="display:block; font-weight:bolder">
                                                <div style="color: <%= JSON.parse(appearance).classColors[i] %> !important"
                                                     class="fa fa-spin fa-spinner overviewTableLoading"></div>
                                            </div>
                                        </td>
                                    </tbody>
                                </table>
                            <% } else {
                                offset--;
                            } %>
                        <% } %>
                    </div>
                </span>
            <% } %>
            <!-- Class Sections -->
            <% offset = 0; %>
            <% for (let i = 0; i < JSON.parse(gradeData).length; i++) { %>
                <% if (JSON.parse(appearance).showNonAcademic || JSON.parse(relevantClassData)[JSON.parse(gradeData)[i].class_name]["classType"] !== "non-academic") { %>
                    <span id="section<%= i + offset %>" class="section" style="display: none;">
                        <% if (JSON.parse(relevantClassData)[JSON.parse(gradeData)[i].class_name]["classType"] === "non-academic") { %>
                            <div style="display:block">
                                <div class="alert alert-info font-weight-bold"
                                     id="weightmsg<%= i + offset %>">This class is non-academic. You can stop
                                    non-academic classes from being displayed in <u style="cursor: pointer"
                                                                                    onclick="showCard('#settingsCardDisplay');">settings</u>
                                </div>
                            </div>
                        <% } %>
                        <div class="chartAndWeights">
                            <div id="chart-container<%= i + offset %>" class="chart-container">
                                <button id="reset-zoom<%= i + offset %>"
                                        style="position: absolute; top: 0; right: 0; height: fit-content; display:none"
                                        class="btn btn-sm"
                                        onclick="resetZoom(<%= i + offset %>); $(this).hide()">Reset
                                </button>
                                <canvas id="chart<%= i + offset %>" class="chart"></canvas>
                                <button id="reset-zoom<%= i + offset %>"
                                        style="position: absolute; top: 0; right: 0; height: fit-content; display:block"
                                        class="btn btn-sm"
                                        onclick="resetZoom(<%= i + offset %>); $(this).hide()">Reset
                                </button>
                            </div>
                            <div class="weights-container">
                                <form id="weights<%= i + offset %>" class="form-ajax form-weights form-signin"
                                      action="/updateweights">
                                    <table class="table text-center weights rounded-table"
                                           style="white-space: nowrap"
                                           id="weightsTable<%= i + offset %>">
                                        <thead>
                                            <tr>
                                                <th colspan="4" style="padding: 0.3rem 0;">
                                                    <label style="display: flex; font-size: 1rem; justify-content: center; margin: 0; align-items: flex-start">Point
                                                        Based&nbsp;
                                                        <label class="switch">
                                                            <input
                                                                    id="check<%= i + offset %>"
                                                                    style="margin: 0; display: flex"
                                                                    type="checkbox"
                                                                    name="hasWeights"
                                                            <% if (JSON.parse(weightData)[JSON.parse(gradeData)[i].class_name]["hasWeights"] === "false") { %>
                                                                    checked
                                                                    <% } %>
                                                                    onchange="disableInput('check<%= i + offset %>','weightsTable<%= i + offset %>'); resetInputs('#weights<%= i + offset %>'); $('#weights<%= i + offset %>').submit();"
                                                            >
                                                            <span style="color: <%= JSON.parse(appearance).classColors[i + offset] %>"
                                                                  class="classSlider slider"></span>
                                                        </label>
                                                    </label>
                                                </th>
                                            </tr>
                                            <tr>
                                                <th>Category</th>
                                                <th id="weight-header<%= i + offset %>">
                                                    Weights
                                                    <span class="popup">
                                                        <i
                                                                id="reset<%= i + offset %>"
                                                                style="color: #888888; margin: 0; cursor: pointer; display:inline-block"
                                                                class="fa fa-undo"
                                                                onclick="resetWeights(<%= i + offset %>); $('#weights<%= i + offset %>').submit();">
                                                            <span class="popup-top">Revert
                                                                to Crowdsourced Default</span>
                                                        </i>
                                                    </span>
                                                    <span class="popup">
                                                        <i style="display: inline-block"
                                                           id="ignoringWeights<%= i + offset %>"
                                                           class="fa fa-exclamation-triangle">
                                                            <span class="popup-top">
                                                                Enter all weights to enable weighted overall grade
                                                                calculation
                                                                or choose the point-based option.
                                                            </span>
                                                        </i>
                                                    </span>
                                                </th>
                                                <th>Score</th>
                                                <th>Grade</th>
                                            </tr>
                                        </thead>
                                        <tbody>

                                            <% for (let j = 0; j < Object.keys(JSON.parse(weightData)[JSON.parse(gradeData)[i].class_name]["weights"]).length; j++) { %>
                                                <tr>
                                                    <td id="weightTableCategory<%= i + offset %><%= j %>"></td>
                                                    <% let weights = JSON.parse(weightData)[JSON.parse(gradeData)[i].class_name]["weights"] %>
                                                    <% let category = Object.keys(weights)[j] %>
                                                    <% let value = weights[category] %>
                                                    <td id="weightTableWeight<%= i + offset %><%= j %>"
                                                        class="form-group">
                                                        <input style="<% if (!value && value != 0) { %> border-color: lightcoral !important; <% } %>"
                                                               value="<%= value %>"
                                                               type="number"
                                                               min="0"
                                                               step="0.01"
                                                               class="number-input disableable form-control <% if(value || value == 0){ %> text-view <% } %>"
                                                               name="<%= category %>"
                                                        >
                                                    </td>
                                                    <td id="weightTablePoints<%= i + offset %><%= j %>"></td>
                                                    <td id="weightTableGrade<%= i + offset %><%= j %>"></td>
                                                </tr>
                                            <% } %>
                                            <script>
                                                function disableInput(checkBoxID, id) {
                                                    $("#" + id).find(".disableable").each(function () {
                                                        if ($("#" + checkBoxID).is(":checked")) {
                                                            $(this).val("");
                                                            $(this).addClass("disabled");
                                                            $(this).attr("disabled", "disabled");
                                                        } else {
                                                            $(this).removeClass("disabled");
                                                            $(this).removeAttr("disabled");
                                                        }
                                                    });
                                                }

                                                disableInput('check<%= i + offset %>', 'weightsTable<%= i + offset %>');
                                            </script>
                                        <tfoot>
                                            <tr>
                                                <th colspan="4">
                                                    <span class="popup">
                                                        <i id="incorrectOverallGrade<%= i + offset %>"
                                                           class="fa fa-exclamation-circle"
                                                           style="margin-left: 0.2rem; vertical-align: middle">
                                                            <span class="popup-bottom-left always-show">
                                                                <% let grade = JSON.parse(gradeData)[i].overall_percent + "%"; %>
                                                                Grade in PowerSchool:
                                                                <nobr><%= grade + " (" + JSON.parse(gradeData)[i].overall_letter + ")" %></nobr>
                                                            </span>
                                                        </i>
                                                    </span>
                                                    <div style="display:none; color: <%= JSON.parse(appearance).classColors[i + offset] %>"
                                                         id="weightTableOverallGrade<%= i + offset %>"
                                                         class="weightOverall">
                                                    </div>
                                                </th>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </form>
                            </div>
                        </div>
                        <hr>
                        <div class="options-container">
                            <div class="add-assignment-container">
                                <form id="addAssignmentForm<%= i + offset %>">
                                    <div class="add-assignment-header">
                                        <div class="addAssignment"
                                             onclick="{$(this).parents('.add-assignment-container').toggleClass('active').parents('div').toggleClass('keep-right');}">
                                            <i class="fa fa-plus"></i>
                                            <span>Add Assignment</span>
                                        </div>
                                        <button type="submit" class="btn btn-med">Add
                                        </button>
                                    </div>
                                    <table id="assignmentWizard<%= i + offset %>"
                                           class="assignmentWizard">
                                        <tr>
                                            <td class="addAssignmentDate form-weights form-signin form-group input-group">
                                                <label id="dateLabel<%= i + offset %>" style="display:none">Date</label>
                                                <input class="form-control dynamic-input"
                                                       type="text"
                                                       onfocus="this.type='date'; $('#dateLabel<%= i + offset %>').show().addClass('label-active');"
                                                       onblur="this.type='text'; checkLabel(this); $('#dateLabel<%= i + offset %>:not(.label-active)').hide(); "
                                                       placeholder="Date" required>
                                            </td>
                                            <td class="form-weights form-signin">
                                                <div class="excludeToggle"
                                                     style="display: flex; justify-content: space-between; align-items: center">
                                                    <div class="input-group addAssignmentName form-group">
                                                        <label>Assignment Name</label>
                                                        <input class="form-control dynamic-input"
                                                               type="text" oninput="checkLabel(this)" required>
                                                    </div>
                                                    <div style="display: flex; justify-content: center; flex-flow: column; align-items: center"
                                                         class="addExclude">
                                                        <input id="addExclude<%= i + offset %>"
                                                               class="form-control" type="checkbox"
                                                               style="cursor: pointer">
                                                        <label for="addExclude<%= i + offset %>"
                                                               style="cursor: pointer !important; margin: 0; display: block; font-weight: bolder; font-size: 0.5rem">Exclude</label>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="addAssignmentCategory form-group">
                                                <label>Category</label>
                                                <select class="minimal addCategory"
                                                        style="margin: 0"></select>
                                            </td>
                                            <td class="form-weights form-signin form-group addAssignmentScore">
                                                <label>Score</label>
                                                <div style="display: flex; justify-content: center; align-items: center">
                                                    <input class="form-control dynamic-input"
                                                           type="number" step="0.001"
                                                           style="padding: 0; width: 0 !important; "
                                                           placeholder="--">
                                                    /<input style="padding: 0; width: 0 !important; "
                                                            class="form-control dynamic-input"
                                                            type="number" step="0.001"
                                                            placeholder="--">
                                                </div>
                                            </td>
                                        </tr>
                                    </table>
                                </form>
                            </div>
                            <div class="tableOptionsContainer">
                                <div class="tableOptions">
                                    <div>Sort By</div>
                                    <select id="sortBy<%= i + offset %>" class="classic" onchange="setSortMethod(this)">
                                        <option value="date">Date</option>
                                        <option value="category">Category</option>
                                    </select>
                                    <span class="popup">
                                        <i style="cursor: pointer; margin: 1rem 0" class="fa fa-sort-amount-asc"
                                           onclick="toggleSortDirection(<%= i + offset %>)">
                                            <span class="popup-top">
                                                Oldest to Newest
                                            </span>
                                        </i>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="table-container">
                            <table class="table rounded-table class-table text-center" id="table<%= i + offset %>">
                                <thead>
                                    <tr>
                                        <th class="compact">Date</th>
                                        <th>Assignment Name</th>
                                        <th class="compact">Category</th>
                                        <th>Score</th>
                                        <th class="compact">Assignment Percent</th>
                                        <th>Overall Grade</th>
                                        <th class="popup resetTab">
                                            <i id="resetAll<%= i + offset %>"
                                               class="fa fa-undo"
                                               style="color: #888888; margin: 0; cursor: pointer; visibility:hidden"
                                               onclick="{resetAll(this);}"
                                            >
                                                <span class="popup-left">
                                                    Revert All
                                                </span>
                                            </i>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                        <table class="table rounded-table class-table text-center categoryTable<%= i + offset %>">
                            <% for (let j = 0; j < Object.keys(JSON.parse(weightData)[JSON.parse(gradeData)[i].class_name].weights).length; j++) { %>
                                <% let category = Object.keys(JSON.parse(weightData)[JSON.parse(gradeData)[i].class_name].weights)[j] %>
                                <thead class="categoryStart">
                                    <% if (j > 0) { %>
                                        <tr class="separator">
                                            <td colspan="6"></td>
                                        </tr>
                                    <% } %>
                                    <tr>
                                        <th colspan="6"><%= category %></th>
                                        <th class="popup resetTab">
                                            <i class="resetCategory<%= i + offset %> fa fa-undo"
                                               style="color: #888888; margin: 0; cursor: pointer; visibility:hidden"
                                               onclick="{resetCategory(this);}"
                                            >
                                                <span class="popup-left">
                                                    Revert Category
                                                </span>
                                            </i>
                                        </th>
                                    </tr>
                                    <tr>
                                        <th>Date</th>
                                        <th>Assignment Name</th>
                                        <th>Category</th>
                                        <th>Score</th>
                                        <th>Assignment Percent</th>
                                        <th>Category Grade</th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            <% } %>
                        </table>
                    </span>
                <% } else {
                    offset--;
                } %>
            <% } %>
        </div>
        <!-- Custom JavaScript -->
        <script>

            let refreshing;
            let shortcutsEnabled = true;

            function setupColorStuff() {
                // Class links
                $.makeArray($(".nav-link")).slice(1).forEach((x, i) => $(x).css("color", colors[i]));

                // Overview Chart
                $.makeArray($(".overview")).forEach((x, i) => $(x).css("color", colors[Math.floor(i / 2) % colors.length]));

                // Sliders
                $.makeArray($(".classSlider")).forEach((x, i) => $(x).css("color", colors[i]));

                // Overall Grades in Weight Tables
                $.makeArray($(".weightOverall")).forEach((x, i) => $(x).css("color", colors[i]));

                // Render all charts
                renderAllCharts();
            }

            function colorAlphaFunction(delta) {
                let abs = Math.abs(delta);
                let max = 0.4;
                let maxInput = 10;
                let cutoff = Math.min(abs, maxInput);
                return max * Math.pow(cutoff / maxInput, 1 / 2.5);
            }

            function refresh(changedClassIndex) {
                // Trying to be efficient and only change affected data
                clearTimeout(refreshing);
                parseData(changedClassIndex);
                setupWeightsTables(changedClassIndex);
                setupOverviewTable(changedClassIndex);
                setupClassTables(changedClassIndex);
                setupGPADisplay();
                setupIncorrectGradeMessages(changedClassIndex);
                setPointBasedWeights(changedClassIndex);
                renderAllCharts(changedClassIndex);
            }

            function refreshWithoutReload(doItNow = false, changedClassIndex) {
                if (doItNow) {
                    if (refreshing) {
                        clearTimeout(refreshing);
                    }
                    refresh(changedClassIndex);
                } else {
                    if (refreshing) {
                        clearTimeout(refreshing);
                    }
                    refreshing = setTimeout(() => {
                        refresh(changedClassIndex);
                    }, 400);
                }
            }

            let appearance = <%- appearance %>;
            let alerts = <%- alerts %>;
            let personalInfo = <%- personalInfo %>;
            let username = "<%= username %>";
            let schoolUsername = "<%= schoolUsername %>";
            let isAdmin = <%= isAdmin %>;
            let gradeSync = <%= gradeSync %>;
            let data = <%- gradeData %>;
            let weights = <%- weightData %>;
            let relClassData = <%- relevantClassData %>;
            let chartData = [];
            let parsedData = [];
            let categorySortedData = [];
            let unobtainedWeights = {};
            let tempWeights = {};
            let currentPage = (isNaN(parseInt(sessionStorage.getItem("currentPage"))) ? -1 : parseInt(sessionStorage.getItem("currentPage")));
            let cardsDisplayed = [];
            let minCardZIndex = 25;
            let charts = [];
            let currentTab = 1;
            let maxTab = $(".tabcontent").length;
            let darkMode;
            let colors = appearance.classColors;
            let darkModeStart = appearance.darkModeStart;
            let darkModeFinish = appearance.darkModeFinish;
            let mobile = window.innerWidth <= 991;

            if (!appearance.showNonAcademic) {
                colors = colors.filter(color => relClassData[data[colors.indexOf(color)].class_name].classType !== "non-academic");
                data = data.filter(grade => relClassData[grade.class_name].classType !== "non-academic");
                weights = Object.fromEntries(Object.entries(weights).filter(([className]) => relClassData[className].classType !== "non-academic"));
            }

            let tempData = Array(data.length).fill([]).map((x, index) => Array.from({length: data[index].grades.length}, _ => new Object));
            let changeTransition;
            let theme = appearance.theme;
            let checkingTheme;
            if (theme === "auto") {
                darkMode = (appearance.theme === "dark" || (appearance.theme === "auto" && (((appearance.darkModeStart < appearance.darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= appearance.darkModeStart - (isDST() ? (appearance.darkModeStart === 0 ? -23 : 1) : 0)) && ((Date.now() / 1000 / 3600 - 8) % 24) < appearance.darkModeFinish - (isDST() ? (appearance.darkModeFinish === 1 ? -23 : 1) : 0))) || ((appearance.darkModeStart > appearance.darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= appearance.darkModeStart - (isDST() ? (appearance.darkModeStart === 0 ? -23 : 1) : 0)) || ((Date.now() / 1000 / 3600 - 8) % 24) < appearance.darkModeFinish - (isDST() ? (appearance.darkModeFinish === 1 ? -23 : 1) : 0))))));
                checkTime();
            } else {
                darkMode = theme === "dark";
            }

            // This should only happen once
            let {dateSort, categorySort} = <%- sortingData %>;
            refreshWithoutReload(true);
            setupWeightsTableListeners();
            setupInputListeners();
            setupAddAssignments();
            setupFeedbackForm();

            if (alerts.lastUpdated.length !== 0) {
                try {
                    renderAllCharts();
                } catch (e) {
                }
            }
            try {
                showPage(currentPage);
                sessionStorage.setItem("currentPage", currentPage);
            } catch (e) {
                currentPage = -1;
                try {
                    showPage(-1);
                    sessionStorage.setItem("currentPage", currentPage);
                } catch (e) {
                }
            }
            if (gradeSync) {
                $("#syncGradesDiv").hide();
                $("#gradeSyncDiv").show();
                checkUpdateBackground();
            } else {
                $("#gradeSyncDiv").hide();
                $("#syncGradesDiv").show();
                $(".updateGradesMessage").find(".messageTxt").text("GradeSync is not enabled");
                if (alerts.lastUpdated.length) {
                    showLatest(false);
                } else {
                    $.ajax({
                               url: "/latestVersionSeen", type: "POST", async: true
                           });
                }
            }
            document.getElementById("darkModeStart").setAttribute("placeholder", (darkModeStart === 0 ? "12" : darkModeStart > 12 ? (darkModeStart - 12).toString() : darkModeStart.toString()));
            document.getElementById("darkModeFinish").setAttribute("placeholder", (darkModeFinish === 24 ? "12" : darkModeFinish > 12 ? (darkModeFinish - 12).toString() : darkModeFinish.toString()));

            function isDST() {
                return Math.max(new Date(new Date(Date.now()).getFullYear(), 0, 1).getTimezoneOffset(), new Date(new Date(Date.now()).getFullYear(), 6, 1).getTimezoneOffset()) !== new Date(Date.now()).getTimezoneOffset();
            }

            function setAutoTheme() {
                if (theme !== "auto") {
                    if (checkingTheme) {
                        clearInterval(checkingTheme);
                    }
                    return;
                }
                darkModeStart = parseInt(darkModeStart);
                darkModeFinish = parseInt(darkModeFinish);
                if (theme === "dark" || (theme === "auto" && (((darkModeStart < darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8 + (isDST() ? 1 : 0)) % 24) >= darkModeStart) && ((Date.now() / 1000 / 3600 - 8 + (isDST() ? 1 : 0)) % 24) < darkModeFinish)) || ((darkModeStart > darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8 + (isDST() ? 1 : 0)) % 24) >= darkModeStart) || ((Date.now() / 1000 / 3600 - 8 + (isDST() ? 1 : 0)) % 24) < darkModeFinish))))) {
                    let oldDarkMode = document.getElementById("pageStyle").getAttribute("href") === "public/css/dark_mode.css";
                    darkMode = true;
                    if (darkMode !== oldDarkMode) {
                        clearTimeout(changeTransition);
                        document.getElementById("fade").disabled = false;
                        document.getElementById("pageStyle").setAttribute("href", "public/css/dark_mode.css");
                        renderAllCharts();
                        $(".navbar-brand img").attr("src", "/public/resources/dark_mode/logo.png");
                        $(".navbar").removeClass("navbar-light").addClass("navbar-dark");
                        setTimeout(() => {
                            document.getElementById("fade").disabled = true;
                        }, 2000);
                    }
                } else {
                    let oldDarkMode = document.getElementById("pageStyle").getAttribute("href") === "public/css/dark_mode.css";
                    darkMode = false;
                    if (darkMode !== oldDarkMode) {
                        clearTimeout(changeTransition);
                        document.getElementById("fade").disabled = false;
                        document.getElementById("pageStyle").setAttribute("href", "public/css/light_mode.css");
                        renderAllCharts();
                        $(".navbar-brand img").attr("src", "/public/resources/light_mode/logo.png");
                        $(".navbar").removeClass("navbar-dark").addClass("navbar-light");
                        setTimeout(() => {
                            document.getElementById("fade").disabled = true;
                        }, 2000);
                    }
                }
            }

            async function checkTime() {
                if (checkingTheme) {
                    clearInterval(checkingTheme);
                }
                setAutoTheme();
                checkingTheme = window.setInterval(function () {
                    setAutoTheme();
                }, 100);
            }

            setupTutorialPopups();

            function setupTutorialPopups() {
                if (!gradeSync) {
                    $("#syncPopup").addClass("always-show");
                    $(Object.entries(alerts.tutorialStatus).filter(([, k]) => !k).map(([t]) => "#" + t.substring(0, t.length - 4)).join("Popup, ") + "Popup").removeClass("always-show");
                } else {
                    $("#syncPopup").removeClass("always-show");
                    $(Object.entries(alerts.tutorialStatus).filter(([, k]) => !k).map(([t]) => "#" + t.substring(0, t.length - 4)).join("Popup, ") + "Popup").addClass("always-show");
                }

            }

            function updateTutorial(action) {
                if (window.innerWidth <= 991) {
                    return;
                }
                $.ajax({
                           url: "/UpdateTutorialStatus", type: "POST", async: true, data: {action: action}
                       }).done((response) => {
                    alerts.tutorialStatus = JSON.parse(response);
                    $("#" + action + "Popup").animate({opacity: 0}, 400, function () {
                        $(this).removeClass("always-show").css("opacity", "");
                    });
                    setupTutorialPopups();
                    updateTutorialProgress();
                });
            }

            function updateData(newData) {
                if (_.isEqual(data.map(c => c.class_name), newData.grades.map(c => c.class_name))) {
                    data = newData.grades;
                    alerts.lastUpdated.push(newData.lastUpdated);
                    refreshWithoutReload();
                    return {updated: true};
                }
                return {updated: false};
            }

            async function checkUpdateBackground() {
                let checking = window.setInterval(function () {
                    $.get("/checkUpdateBackground", function (message, status) {
                        if (status === "success") {
                            if (message.message === "Sync Complete!") {
                                let newData = {grades: JSON.parse(message.grades), lastUpdated: message.time};
                                if (!updateData(newData).updated) {
                                    clearInterval(checking);
                                    if (cardsDisplayed.length === 0 || cardsDisplayed[cardsDisplayed.length - 1] === "updateGradesDisplay") {
                                        $(".updateGradesMessage").find(".messageTxt").text("Refreshing...");
                                        setTimeout(() => window.reload(), 400);
                                    } else {
                                        $(".updateGradesMessage").find(".messageTxt").css("cursor", "pointer").text("Click here to refresh").click(function (e) {
                                            e.preventDefault();
                                            e.stopPropagation();
                                            window.reload();
                                        });
                                    }
                                }
                            } else if (message.message === "Already Synced!") {
                                clearInterval(checking);
                                showLatest(false);
                                setupLastUpdated();
                            } else if (message.message === "Did not sync") {
                                $(".updateGradesMessage").find(".messageTxt").text("Syncing...");
                            } else if (message.message === "Cannot access grades.") {
                                $("#syncNoData").show();
                                clearInterval(checking);
                                $(".updateGradesMessage").removeClass("alert-info").removeClass("alert-success").addClass("alert-danger");
                                showLatest(false);
                                setupLastUpdated();
                            } else if (message.message === "Sync Failed.") {
                                $("#syncFailure").show();
                                clearInterval(checking);
                                $(".updateGradesMessage").removeClass("alert-info").removeClass("alert-success").addClass("alert-danger");
                                setupLastUpdated();
                                showLatest(false);
                            } else if (message.message === "Not syncing") {
                                clearInterval(checking);
                                setupLastUpdated();
                            }
                        }
                    });
                }, 1000);
            }

            function disableScrolling() {
                $("body, html").addClass("no-scroll");
            }

            function enableScrolling() {
                $("body, html").removeClass("no-scroll");
            }

            function setupGPADisplay() {
                $("#GPA-display").text(getOverallGPA);
            }

            function setupIncorrectGradeMessages(classIndex) {
                $("#incorrectGPA").hide();
                $("#GPA-display").removeClass("ignored");
                for (let i = 0; i < data.length; i++) {
                    if (!classIndex || classIndex === i) {
                        let realOverallGrade = data[i].overall_percent;
                        let realOverallLetter = data[i].overall_letter;
                        let calculatedOverallGrade = getOverallGrade(i);
                        let correctDecimalPlaces = getOverallGrade(i).toFixed(countDecimals(realOverallGrade));
                        let calculatedOverallLetter = getLetterGrade(calculatedOverallGrade);
                        if (correctDecimalPlaces != realOverallGrade || calculatedOverallLetter !== realOverallLetter) {
                            $("#incorrectOverviewGrade" + i).css("display", "inline-block");
                            $("#incorrectOverallGrade" + i).css("display", "inline-block");
                        } else {
                            $("#incorrectOverviewGrade" + i).hide();
                            $("#incorrectOverallGrade" + i).hide();
                        }

                        // GPA will only be different if the actual letter is different
                        let strippedCalculatedLetter = calculatedOverallLetter.substring(0, 1);
                        let strippedRealLetter = realOverallLetter.substring(0, 1);
                        if (strippedCalculatedLetter !== strippedRealLetter) {
                            $("#incorrectGPA").css("display", "inline-block");
                        }
                    }
                }
            }

            function countDecimals(value) {
                if (Math.floor(value) === value) {
                    return 0;
                }
                return value.toString().split(".")[1].length || 0;
            }

            function getOverallGPA() {
                let GPA = 0.0;
                let numClasses = data.length;
                for (let i = 0; i < data.length; i++) {
                    let className = data[i].class_name;
                    let classType = relClassData[className]["classType"];
                    if (classType === "ap" || classType === "honors") {
                        GPA += 1;
                    }
                    if (classType !== "non-academic") {
                        GPA += getGPA(data[i].overall_percent);
                    } else {
                        numClasses--;
                    }
                }
                GPA /= numClasses;
                return GPA.toFixed(2);
            }

            function getGPA(grade) {
                let letterGrade = getLetterGrade(grade).substring(0, 1);
                if (letterGrade === "A") {
                    return 4;
                } else if (letterGrade === "B") {
                    return 3;
                } else if (letterGrade === "C") {
                    return 2;
                } else if (letterGrade === "D") {
                    return 1;
                }
                return 0;
            }

            function getTotalWeight(classIndex) {
                let className = data[classIndex].class_name;
                let classWeights = Object.values(weights[className]["weights"]);
                let totalWeight = 0;
                let classCategories = Object.keys(weights[className]["weights"]);
                for (let i = 0; i < classWeights.length; i++) {
                    if (getCategoryGottenAndPossible(classIndex, classCategories[i]).possible !== 0) {
                        totalWeight += Number(classWeights[i]);
                    }
                }
                return totalWeight;
            }

            function setPointBasedWeights(classIndex) {
                for (let i = 0; i < data.length; i++) {
                    if (!classIndex || classIndex === i) {
                        let totalPossible = 0;
                        let result = {};
                        for (let assignment of data[i]["grades"]) {
                            if (assignment["points_gotten"] !== false && assignment["points_possible"] !== false && assignment["exclude"] !== true) {
                                if (!result[assignment.category]) {
                                    result[assignment.category] = 0;
                                }
                                result[assignment.category] += assignment["points_possible"];
                                totalPossible += assignment["points_possible"];
                            }
                        }
                        for (let j = 0; j < Object.keys(result).length; j++) {
                            let weight = Object.keys(result)[j];
                            result[weight] = +(result[weight] / totalPossible * 100).toFixed(4) || 0;
                            $("#weightTableWeight" + i + j + " input").attr("placeholder", result[weight]);
                        }
                    }
                }
            }

            function getOverallGrade(classIndex) {
                let className = data[classIndex].class_name;
                if (className in weights) {
                    let overallGrade = 0;
                    if (weights[className]["hasWeights"] === "false" || unobtainedWeights[className]) {
                        let points_earned = 0;
                        let points_total = 0;
                        for (let assignment of data[classIndex]["grades"]) {
                            if (assignment["points_gotten"] !== false && assignment["points_possible"] !== false && assignment["exclude"] !== true) {
                                points_earned += assignment["points_gotten"];
                                points_total += assignment["points_possible"];
                            }
                        }
                        overallGrade = points_earned / points_total * 100;
                    } else {
                        let classCategories = Object.keys(weights[className]["weights"]);
                        let classWeights = Object.values(weights[className]["weights"]);
                        for (let i = 0; i < classCategories.length; i++) {
                            overallGrade += getCategoryGrade(classIndex, classCategories[i]) * classWeights[i] / 100;
                        }
                        let ratio = 100 / getTotalWeight(classIndex);
                        overallGrade *= ratio;
                    }
                    return overallGrade;
                }
                return null;
            }

            function getLetterGrade(grade) {
                if (grade >= 97.5) {
                    return "A+";
                } else if (grade >= 92.5) {
                    return "A";
                } else if (grade >= 89.5) {
                    return "A-";
                } else if (grade >= 87.5) {
                    return "B+";
                } else if (grade >= 82.5) {
                    return "B";
                } else if (grade >= 79.5) {
                    return "B-";
                } else if (grade >= 77.5) {
                    return "C+";
                } else if (grade >= 72.5) {
                    return "C";
                } else if (grade >= 69.5) {
                    return "C-";
                } else if (grade >= 67.5) {
                    return "D+";
                } else if (grade >= 62.5) {
                    return "D";
                } else if (grade >= 59.5) {
                    return "D-";
                }
                return "F";
            }

            let submittingWeights;

            function setupWeightsTableListeners() {
                for (let i = 0; i < data.length; i++) {
                    let className = data[i].class_name;
                    let tableCategories = Object.keys(weights[className]["weights"]);
                    for (let j = 0; j < tableCategories.length; j++) {
                        $("#weightTableWeight" + i + j + " input").blur(() => {
                            clearTimeout(submittingWeights);
                            submittingWeights = setTimeout(() => {
                                resetInputs("#weights" + i);
                                $("#weightTableWeight" + i + j).parents("form").submit();
                            }, 400);
                        }).on("keyup", (e) => {
                            e = e || window.event;
                            let keyCode = e.code;
                            if (keyCode === "Enter") {
                                $("#weightTableWeight" + i + j + " input").blur();
                            }
                        });
                    }
                }
            }

            function setupWeightsTables(classIndex) {
                for (let i = 0; i < data.length; i++) {
                    if (!classIndex || classIndex === i) {
                        let className = data[i].class_name;
                        let tableCategories = Object.keys(weights[className]["weights"]);
                        let enableReset = weights[className]["custom"];
                        //if custom and both haveWeights, enable reset only if db had diff value to give to user's weights
                        //stop reset from showing if custom is due to user having more categories than classes db
                        if (enableReset && relClassData[className]["hasWeights"] !== "false") {
                            enableReset = false;
                            let keys = Object.keys(weights[className]["weights"]);
                            for (let i = 0; i < keys.length; i++) {
                                if (weights[className]["hasWeights"] === "false" && keys[i] in relClassData[className]["weights"]) {
                                    enableReset = true;
                                } else if ((keys[i] in relClassData[className]["weights"]) && weights[className]["weights"][keys[i]] != relClassData[className]["weights"][keys[i]]) {
                                    enableReset = true;
                                }
                            }
                        }

                        //Hide or Show Reset Button
                        if (enableReset) {
                            $("#reset" + i).show();
                            $("#weight-header" + i).css("font-style", "italic");
                        } else {
                            $("#reset" + i).hide();
                            $("#weight-header" + i).css("font-style", "normal");
                        }

                        //Hide or Show Ignoring weights
                        if (unobtainedWeights[className]) {
                            $("#ignoringWeights" + i).show();
                        } else {
                            $("#ignoringWeights" + i).hide();
                        }

                        for (let j = 0; j < tableCategories.length; j++) {
                            //Set italics of weights
                            if (enableReset) {
                                $("#weightTableWeight" + i + j).children().css("font-style", "italic");
                            } else {
                                $("#weightTableWeight" + i + j).children().css("font-style", "normal");
                            }

                            //Strikethrough weights if any are missing
                            let input = $("#weightTableWeight" + i + j + " input");
                            if (unobtainedWeights[className] && (!isNaN(parseFloat(input[0].valueAsNumber)))) {
                                input.addClass("ignored");
                            } else {
                                input.removeClass("ignored");
                            }

                            document.getElementById("weightTableCategory" + i + j).textContent = tableCategories[j];
                            let categoryGottenAndPossible = getCategoryGottenAndPossible(i, tableCategories[j]);
                            document.getElementById("weightTablePoints" + i + j).textContent = +categoryGottenAndPossible.gotten.toFixed(4) + ((categoryGottenAndPossible.possible !== 0) ? ("/" + +(categoryGottenAndPossible.possible.toFixed(4))) : "");
                            let categoryGrade = +(+getCategoryGrade(i, tableCategories[j])).toFixed(4);
                            if (categoryGottenAndPossible.possible !== 0) {
                                document.getElementById("weightTableGrade" + i + j).textContent = categoryGrade + "% (" + getLetterGrade(categoryGrade) + ")";
                            } else {
                                document.getElementById("weightTableGrade" + i + j).textContent = "--";
                            }
                        }
                        let overallGrade = getOverallGrade(i);
                        let assignmentData = parsedData[i].rawData;
                        let lastIndex = assignmentData.length - 1;
                        let delta = +(assignmentData[lastIndex] - assignmentData[lastIndex - 1]).toFixed(5);
                        let color;
                        if (delta > 0) {
                            delta = "<i class=\"fa fa-caret-up\"></i>" + delta + "%";
                            color = "green";
                        } else if (delta < 0) {
                            delta = "<i class=\"fa fa-caret-down\"></i>" + delta + "%";
                            color = "red";
                        }
                        delta = (delta ? (" <div style=\"display: inline-block; margin-left: 1rem; color: " + color + "\">" + delta + "</div>") : "");
                        if (overallGrade) {
                            document.getElementById("weightTableOverallGrade" + i).innerHTML = (+(overallGrade.toFixed(4))).toString() + "% (" + getLetterGrade(overallGrade) + ")" + delta;
                        } else {
                            document.getElementById("weightTableOverallGrade" + i).innerHTML = "--" + delta;
                        }
                        document.getElementById("weightTableOverallGrade" + i).style.display = "inline-block";

                    }
                }
            }

            function adjust(elements, offset, min, max) {

                // Initialize parameters
                offset = offset || 0;
                min = min || 0;
                max = max || Infinity;
                elements.each(function () {
                    let element = $(this);

                    // Add element to measure pixel length of text
                    let id = btoa(Math.floor(Math.random() * Math.pow(2, 64)));
                    let tag = $("<span id=\"" + id + "\">" + element.val() + "</span>").css({
                                                                                                "display": "none",
                                                                                                "font-family": element.css("font-family"),
                                                                                                "font-size": element.css("font-size")
                                                                                            }).appendTo("body");

                    // Adjust element width on keydown
                    function update() {

                        // Give browser time to add current letter
                        setTimeout(function () {

                            // Prevent whitespace from being collapsed
                            tag.html(element.val().replace(/ /g, "&nbsp;"));

                            // Clamp length and prevent text from scrolling
                            let size = Math.max(min, Math.min(max, tag.width() + offset));
                            if (size < max) {
                                element.scrollLeft(0);
                            }

                            // Apply width to element
                            element.width(size);

                        }, 0);
                    }

                    update();
                    element.keydown(update);
                });
            }

            function remToPixels(rem) {
                return rem * parseFloat(getComputedStyle(document.documentElement).fontSize);
            }

            function setSortMethod(element) {
                let classIndex = parseFloat($(element)[0].id.substring(6));
                let method = $(element)[0].selectedOptions[0].value;
                $(element).blur();
                $($(element)[0].nextElementSibling.children[0]).removeClass(dateSort[classIndex] ? "fa-sort-amount-desc" : "fa-sort-amount-asc").addClass(dateSort[classIndex] ? "fa-sort-amount-asc" : "fa-sort-amount-desc").removeClass("disabled").find("span").text(dateSort[classIndex] ? "Oldest to Newest" : "Newest to Oldest");
                categorySort[classIndex] = method === "category";
                postSortData();
                refreshWithoutReload(true, classIndex);
            }

            function addAssignment(classIndex) {
                let addDate = $(".addAssignmentDate input")[classIndex].value.split("-");
                addDate = addDate[1] + "/" + addDate[2] + "/" + addDate[0];
                let addName = $(".addAssignmentName input")[classIndex].value;
                let addCategory = $(".addAssignmentCategory select")[classIndex].selectedOptions[0].value;
                let inputs = $(".addAssignmentScore input");
                let addGotten = parseFloat(inputs[classIndex * 2].value);
                if (isNaN(addGotten)) {
                    addGotten = false;
                }
                let addPossible = parseFloat(inputs[classIndex * 2 + 1].value);
                if (isNaN(addPossible)) {
                    addPossible = false;
                }
                if (addPossible === false && addGotten !== false) {
                    addPossible = 0;
                }
                let addExclude = $(`#addExclude${classIndex}`).prop("checked");
                let addPercent = +(addGotten / addPossible * 100).toFixed(2) || false;
                if (addPercent === Infinity) {
                    addPercent = false;
                }
                let assignmentObject = {
                    assignment_name: addName,
                    date: addDate,
                    category: addCategory,
                    grade_percent: addPercent,
                    points_gotten: addGotten,
                    points_possible: addPossible,
                    exclude: addExclude,
                    added: true
                };

                let insertAt = data[classIndex].grades.findIndex(g => new Date(g.date) > new Date(assignmentObject.date));
                if (insertAt >= 0) {
                    data[classIndex].grades.splice(insertAt, 0, assignmentObject);
                    tempData[classIndex].splice(insertAt, 0, {});
                } else {
                    data[classIndex].grades.push(assignmentObject);
                    tempData[classIndex].push({});
                }
                refreshWithoutReload(classIndex);
            }

            function updatePointsGotten(element) {
                let classes = $(element)[0].className.split(" ");
                let classIndex;
                let assignmentIndex;
                let test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "gotten");
                if (test.length) {
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(".gotten" + classIndex)).indexOf(element);
                    if (!dateSort[classIndex]) {
                        assignmentIndex = data[classIndex]["grades"].length - assignmentIndex - 1;
                    }
                } else {
                    test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "categoryGotten");
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = categorySortedData[classIndex].originalIndices[$.makeArray($(".categoryGotten" + classIndex)).indexOf(element)];
                }

                let assignment = data[classIndex]["grades"][assignmentIndex];

                if (!parsedData[classIndex].assignmentAdds[assignmentIndex] && !tempData[classIndex][assignmentIndex].points_gotten && tempData[classIndex][assignmentIndex].points_gotten !== false) {
                    tempData[classIndex][assignmentIndex].points_gotten = assignment.points_gotten;
                }

                let doRefresh = false;
                if (assignment.points_gotten !== parseFloat($(element)[0].value)) {
                    doRefresh = true;
                }
                assignment.points_gotten = parseFloat($(element)[0].value);
                if (isNaN(assignment.points_gotten)) {
                    assignment.points_gotten = false;
                } else if (assignment.points_possible === false) {
                    assignment.points_possible = 0;
                }
                if ((assignment.points_gotten || assignment.points_gotten === 0) && assignment.points_possible) {
                    assignment.grade_percent = +(parseFloat(assignment.points_gotten / assignment.points_possible * 100)).toFixed(2);
                } else {
                    assignment.grade_percent = false;
                }
                if (isNaN(assignment.grade_percent)) {
                    assignment.grade_percent = false;
                }

                if (!parsedData[classIndex].assignmentAdds[assignmentIndex] && tempData[classIndex][assignmentIndex].points_gotten === assignment.points_gotten) {
                    delete tempData[classIndex][assignmentIndex].points_gotten;
                }
                if (doRefresh) {
                    refreshWithoutReload(true, classIndex);
                }
            }

            function updatePointsPossible(element) {
                let classes = $(element)[0].className.split(" ");
                let classIndex;
                let assignmentIndex;
                let test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "possible");
                if (test.length) {
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(".possible" + classIndex)).indexOf(element);
                    if (!dateSort[classIndex]) {
                        assignmentIndex = data[classIndex]["grades"].length - assignmentIndex - 1;
                    }
                } else {
                    test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "categoryPossible");
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = categorySortedData[classIndex].originalIndices[$.makeArray($(".categoryPossible" + classIndex)).indexOf(element)];
                }

                let assignment = data[classIndex]["grades"][assignmentIndex];

                if (!parsedData[classIndex].assignmentAdds[assignmentIndex] && !tempData[classIndex][assignmentIndex].points_possible && tempData[classIndex][assignmentIndex].points_possible !== false) {
                    tempData[classIndex][assignmentIndex].points_possible = assignment.points_possible;
                }

                let doRefresh = false;
                if (assignment.points_possible !== parseFloat($(element)[0].value)) {
                    doRefresh = true;
                }
                assignment.points_possible = parseFloat($(element)[0].value);
                if (isNaN(assignment.points_possible)) {
                    assignment.points_possible = false;
                }
                if (assignment.points_possible && assignment.points_gotten) {
                    assignment.grade_percent = +parseFloat(assignment.points_gotten / assignment.points_possible * 100).toFixed(2);
                } else {
                    assignment.grade_percent = false;
                }

                if (!parsedData[classIndex].assignmentAdds[assignmentIndex] && tempData[classIndex][assignmentIndex].points_possible === assignment.points_possible) {
                    delete tempData[classIndex][assignmentIndex].points_possible;
                }
                if (doRefresh) {
                    refreshWithoutReload(true, classIndex);
                }
            }

            function updateCategory(element) {
                let classes = $(element)[0].className.split(" ");
                let classIndex;
                let assignmentIndex;
                let test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "category");
                if (test.length) {
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(".category" + classIndex)).indexOf(element[0]);
                    if (!dateSort[classIndex]) {
                        assignmentIndex = data[classIndex]["grades"].length - assignmentIndex - 1;
                    }
                } else {
                    test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "categoryCategory");
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = categorySortedData[classIndex].originalIndices[$.makeArray($(".categoryCategory" + classIndex)).indexOf(element[0])];
                }

                let assignment = data[classIndex]["grades"][assignmentIndex];

                if (!parsedData[classIndex].assignmentAdds[assignmentIndex] && !tempData[classIndex][assignmentIndex].category && tempData[classIndex][assignmentIndex].category !== false) {
                    tempData[classIndex][assignmentIndex].category = assignment.category;
                }

                assignment.category = $(element).find("option:selected").text();

                if (!parsedData[classIndex].assignmentAdds[assignmentIndex] && tempData[classIndex][assignmentIndex].category === assignment.category) {
                    delete tempData[classIndex][assignmentIndex].category;
                }
            }

            function resetAll(element) {
                let classIndex = parseFloat($(element)[0].id.substring(8));
                let resetButtons = $(".resetRow" + classIndex);
                for (let i = 0; i < resetButtons.length; i++) {
                    resetRow(resetButtons[i], false);
                }
                refreshWithoutReload(false, classIndex);
            }

            function resetCategory(element) {
                let classes = $(element)[0].className.split(" ");
                let classIndex = parseFloat(classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "resetCategory")[0].match(/\d+$/)[0]);
                let categories = Object.keys(weights[Object.keys(weights)[classIndex]]["weights"]);
                let categoryIndex = $.makeArray($(".resetCategory" + classIndex)).indexOf(element);
                $($(".categoryTable" + classIndex)[categoryIndex]).removeClass("unround-top-right");
                let category = categories[categoryIndex];
                let startIndex = categorySortedData[classIndex].assignmentCategories.indexOf(category);
                let numOfCategory = categorySortedData[classIndex].assignmentCategories.filter(x => x === category).length;
                let resetButtons = $(".categoryResetRow" + classIndex);
                for (let i = startIndex; i < startIndex + numOfCategory; i++) {
                    resetRow(resetButtons[i], false);
                }
                refreshWithoutReload(false, classIndex);
            }

            function resetRow(element, notMassReset = true) {
                let classes = $(element)[0].className.split(" ");
                let classIndex;
                let assignmentIndex;
                let test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "resetRow");
                if (test.length) {
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(`.resetRow${classIndex}`)).indexOf(element);
                    if (!dateSort[classIndex]) {
                        assignmentIndex = data[classIndex]["grades"].length - assignmentIndex - 1;
                    }

                    // This means that the row was never changed
                    if ((!tempData[classIndex] || !tempData[classIndex][assignmentIndex]) && !parsedData[classIndex].assignmentAdds[assignmentIndex]) {
                        $($(`.resetRow${classIndex}`)[assignmentIndex]).css("visibility", "hidden");
                        return;
                    }
                } else {
                    test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "categoryResetRow");
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = categorySortedData[classIndex].originalIndices[$.makeArray($(`.categoryResetRow${classIndex}`)).indexOf(element)];

                    // This means that the row was never changed
                    if ((!tempData[classIndex] || !tempData[classIndex][assignmentIndex]) && !parsedData[classIndex].assignmentAdds[assignmentIndex]) {
                        $($(".categoryResetRow" + classIndex)[assignmentIndex]).css("visibility", "hidden");
                        return;
                    }
                }

                let assignment = data[classIndex]["grades"][assignmentIndex];
                if (assignment.added && notMassReset) {
                    data[classIndex]["grades"].splice(assignmentIndex, 1);
                } else {

                    // Reset all edited values
                    for (let key of Object.keys(tempData[classIndex][assignmentIndex])) {
                        assignment[key] = tempData[classIndex][assignmentIndex][key];
                    }

                    // Recalculate grade percent if necessary
                    if (Object.keys(tempData[classIndex][assignmentIndex]).includes("points_gotten") || Object.keys(tempData[classIndex][assignmentIndex]).includes("points_possible")) {
                        if ((assignment.points_gotten || assignment.points_gotten === 0) && assignment.points_possible) {
                            assignment.grade_percent = +parseFloat(assignment.points_gotten / assignment.points_possible * 100).toFixed(2);
                        } else {
                            assignment.grade_percent = false;
                        }
                    }
                    tempData[classIndex][assignmentIndex] = {};
                }

                if (notMassReset) {
                    refreshWithoutReload(false, classIndex);
                }
            }

            function toggleExclude(element) {
                let classes = $(element)[0].className.split(" ");
                let classIndex;
                let assignmentIndex;
                let test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "exclude");
                if (test.length) {
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(".exclude" + classIndex)).indexOf(element);
                    if (!dateSort[classIndex]) {
                        assignmentIndex = data[classIndex]["grades"].length - assignmentIndex - 1;
                    }
                } else {
                    test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "categoryExclude");
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = categorySortedData[classIndex].originalIndices[$.makeArray($(".categoryExclude" + classIndex)).indexOf(element)];
                }

                let assignment = data[classIndex]["grades"][assignmentIndex];

                if (!parsedData[classIndex].assignmentAdds[assignmentIndex] && !tempData[classIndex][assignmentIndex].exclude && tempData[classIndex][assignmentIndex].exclude !== false) {
                    tempData[classIndex][assignmentIndex].exclude = assignment.exclude;
                }

                assignment.exclude = !assignment.exclude;
                if (tempData[classIndex][assignmentIndex].exclude === assignment.exclude) {
                    delete tempData[classIndex][assignmentIndex].exclude;
                }
                refreshWithoutReload(true, classIndex);
            }

            function setupInputListeners() {
                for (let i = 0; i < parsedData.length; i++) {
                    let classScores = $(".assignmentScore" + i);
                    for (let j = 0; j < parsedData[i].assignmentNames.length; j++) {
                        let inputs = $(classScores[j]).find(".dynamic-input");
                        $(inputs[0]).on("keyup", (e) => {
                            e = e || window.event;
                            let keyCode = e.code;
                            if (keyCode === "Enter") {
                                $(inputs[0]).blur();
                            }
                        });
                        $(inputs[1]).on("keyup", (e) => {
                            e = e || window.event;
                            let keyCode = e.code;
                            if (keyCode === "Enter") {
                                $(inputs[1]).blur();
                            }
                        });
                    }
                    classScores = $(".categoryAssignmentScore" + i);
                    for (let j = 0; j < categorySortedData[i].assignmentNames.length; j++) {
                        let inputs = $(classScores[j]).find(".dynamic-input");
                        $(inputs[0]).on("keyup", (e) => {
                            e = e || window.event;
                            let keyCode = e.code;
                            if (keyCode === "Enter") {
                                $(inputs[0]).blur();
                            }
                        });
                        $(inputs[1]).on("keyup", (e) => {
                            e = e || window.event;
                            let keyCode = e.code;
                            if (keyCode === "Enter") {
                                $(inputs[1]).blur();
                            }
                        });
                    }
                }
            }

            function toggleSortDirection(classIndex) {
                let icon = $($("#section" + classIndex).find(".tableOptions").find("i")[0]);
                if (icon.hasClass("fa-sort-amount-asc")) {
                    dateSort[classIndex] = false;
                    icon.removeClass("fa-sort-amount-asc").addClass("fa-sort-amount-desc");
                    $(icon.find("span")[0]).text("Newest to Oldest");
                } else {
                    dateSort[classIndex] = true;
                    icon.removeClass("fa-sort-amount-desc").addClass("fa-sort-amount-asc");
                    $(icon.find("span")[0]).text("Oldest to Newest");
                }
                postSortData();
                setupClassTables(classIndex);
            }

            function postSortData() {
                $.ajax({
                           type: "POST", url: "/updateSortData", data: {
                        sortingData: JSON.stringify({
                                                        dateSort: dateSort, categorySort: categorySort
                                                    })
                    }
                       });
            }

            function setupAddAssignments() {
                let categorySelectReferences = $(".addCategory");
                for (let i = 0; i < parsedData.length; i++) {
                    let dropdown = $(categorySelectReferences[i]);
                    let categories = Object.keys(weights[Object.keys(weights)[i]]["weights"]);

                    // Adjust widths
                    adjust($(".addAssignmentName input"), 0, remToPixels(8), remToPixels(12));
                    adjust($(".addAssignmentScore input"), 0, remToPixels(2), remToPixels(4));

                    // Set up categories
                    if (!$(dropdown).find("option").length) {
                        for (let j = 0; j < categories.length; j++) {
                            dropdown.append($("<option>").text(categories[j]));
                        }
                    }
                    $("#addAssignmentForm" + i).submit(function (e) {
                        e.preventDefault();
                        addAssignment(i);
                        $("#addAssignmentForm" + i + " input").val("").trigger("input").trigger("blur");
                    });
                }
            }

            function setupClassTables(classIndex) {
                for (let i = 0; i < parsedData.length; i++) {
                    if (!classIndex || classIndex === i) {
                        let categories = Object.keys(weights[Object.keys(weights)[i]]["weights"]);
                        let assignmentData;
                        let assignmentDates;
                        let assignmentNames;
                        let assignmentCategories;
                        let assignmentScoresParsed;
                        let assignmentPercents;
                        let assignmentExcludes;
                        let assignmentAdds;
                        let modTempData;
                        let rowDivs;
                        let row;
                        let assignmentDateDivs;
                        let assignmentNameDivs;
                        let assignmentCategoryDivs;
                        let excludeDivs;
                        let assignmentScoreDivs;
                        let resetRowDivs;
                        let assignmentPercentDivs;
                        let assignmentOverallDivs;
                        let resetCategoryDivs;

                        if (categorySort[i]) {
                            // Data
                            assignmentData = categorySortedData[i].rawData;
                            assignmentDates = categorySortedData[i].assignmentDates;
                            assignmentNames = categorySortedData[i].assignmentNames;
                            assignmentCategories = categorySortedData[i].assignmentCategories;
                            assignmentScoresParsed = categorySortedData[i].assignmentScoresParsed;
                            assignmentPercents = categorySortedData[i].assignmentPercents;
                            assignmentExcludes = categorySortedData[i].assignmentExcludes;
                            assignmentAdds = categorySortedData[i].assignmentAdds;
                            modTempData = [];
                            for (let j = 0; j < tempData[i].length; j++) {
                                modTempData.push(tempData[i][categorySortedData[i].originalIndices[j]]);
                            }

                            rowDivs = $(`.categoryClassTableRow${i}`);
                            row = `<tr class="categoryClassTableRow${i}">
                    <td class="categoryAssignmentDate${i}"></td>
                    <td>
                        <div class="excludeToggle"
                             style="display: flex; justify-content: space-between; align-items: center;">
                            <div class="categoryAssignmentName${i}"></div>
                            <div style="display: flex; justify-content: center; flex-flow: column; align-items: center">
                                <i class="fa fa-ban categoryExclude${i}"
                                   style="cursor: pointer"
                                   onclick="toggleExclude(this);">
                                    <label style="cursor: pointer !important; margin: 0; display: block; font-weight: bolder; font-size: 0.5rem">Exclude</label>
                                </i>
                            </div>
                        </div>
                    </td>
                    <td class="categoryAssignmentCategory${i}">
                        <select class="minimal categoryCategory${i}"
                                style="margin: 0"></select>
                    </td>
                    <td class="form-weights form-signin form-group categoryAssignmentScore${i}">
                        <div style="display: flex; justify-content: center; align-items: center">
                            <input class="form-control text-view dynamic-input categoryGotten${i}"
                                   type="number" step="0.001"
                                   style="padding: 0; width: 0 !important; "
                                   placeholder="--"
                                   onblur="{updatePointsGotten(this);}">
                                /<input style="padding: 0; width: 0 !important; "
                                        class="form-control text-view dynamic-input categoryPossible${i}"
                                        type="number" step="0.001"
                                        placeholder="--"
                                        onblur="{updatePointsPossible(this);}">
                        </div>
                    </td>
                    <td class="categoryAssignmentPercent${i}"></td>
                    <td class="categoryAssignment${i}"></td>
                    <td class="popup resetTab">
                        <i class="fa fa-undo categoryResetRow${i}"
                           style="color: #888888; margin: 0; cursor: pointer; visibility:hidden"
                           onclick="{resetRow(this);}"
                        >
                            <span class="popup-left">
                                Revert to Original
                            </span>
                        </i>
                    </td>
                </tr>`;

                            for (let j = rowDivs.length; j < assignmentData.length; j++) {
                                rowDivs.push(row);
                            }

                            // Move rows
                            for (let j = 0; j < assignmentData.length; j++) {
                                $($(`.categoryTable${i} .categoryStart + tbody`)[categories.indexOf(assignmentCategories[j])]).append(rowDivs[j]);

                                // Bind listeners
                                adjust($($(`.categoryAssignmentScore${i}`)[j]).find(".dynamic-input"), 0, remToPixels(2), remToPixels(4));
                            }

                            // Remove extra rows
                            for (let j = assignmentData.length; j < rowDivs.length; j++) {
                                rowDivs[j].remove();
                            }

                            rowDivs = $(`.categoryClassTableRow${i}`);

                            // Round corners
                            for (let j = 0; j < rowDivs.length; j++) {
                                if (j === assignmentCategories.lastIndexOf(assignmentCategories[j])) {
                                    $(rowDivs[j]).addClass("beforeSeparator");
                                } else {
                                    $(rowDivs[j]).removeClass("beforeSeparator");
                                }
                            }

                            // Div References
                            assignmentDateDivs = $(`.categoryAssignmentDate${i}`);
                            assignmentNameDivs = $(`.categoryAssignmentName${i}`);
                            assignmentCategoryDivs = $(`.categoryAssignmentCategory${i}`);
                            excludeDivs = $(`.categoryExclude${i}`);
                            assignmentScoreDivs = $(`.categoryAssignmentScore${i}`);
                            resetRowDivs = $(`.categoryResetRow${i}`);
                            assignmentPercentDivs = $(`.categoryAssignmentPercent${i}`);
                            assignmentOverallDivs = $(`.categoryAssignment${i}`);

                            // Set up visuals
                            resetCategoryDivs = $(`.resetCategory${i}`);
                            resetCategoryDivs.css("visibility", "hidden").parents(".resetTab").hide();
                            $(`#table${i}`).hide();
                            $(`.categoryTable${i}`).show();
                        } else {
                            // Data
                            assignmentData = parsedData[i].rawData;
                            assignmentDates = parsedData[i].assignmentDates;
                            assignmentNames = parsedData[i].assignmentNames;
                            assignmentCategories = parsedData[i].assignmentCategories;
                            assignmentScoresParsed = parsedData[i].assignmentScoresParsed;
                            assignmentPercents = parsedData[i].assignmentPercents;
                            assignmentExcludes = parsedData[i].assignmentExcludes;
                            assignmentAdds = parsedData[i].assignmentAdds;
                            modTempData = tempData[i];

                            rowDivs = $(`.classTableRow${i}`);
                            row = `<tr class="classTableRow${i}">
                    <td class="compact assignmentDate${i}"></td>
                    <td>
                        <div class="excludeToggle">
                            <div class="assignmentName${i}"></div>
                            <div>
                                <i class="fa fa-ban exclude${i}"
                                   style="display: flex; flex-flow: column; cursor: pointer; justify-content: center; align-items: center;"
                                   onclick="toggleExclude(this);">
                                    <label style="cursor: pointer !important; margin: 0; display: block; font-weight: bolder; font-size: 0.5rem">Exclude</label>
                                </i>
                            </div>
                        </div>
                    </td>
                    <td class="compact assignmentCategory${i}">
                        <select class="minimal category${i}"
                                style="margin: 0"></select>
                    </td>
                    <td class="form-weights form-signin form-group assignmentScore${i}">
                        <div style="display: flex; justify-content: center; align-items: center">
                            <input class="form-control text-view dynamic-input gotten${i}"
                                   type="number" step="0.001"
                                   style="padding: 0; width: 0 !important; "
                                   placeholder="--"
                                   onblur="{updatePointsGotten(this);}">
                                /<input style="padding: 0; width: 0 !important; "
                                        class="form-control text-view dynamic-input possible${i}"
                                        type="number" step="0.001"
                                        placeholder="--"
                                        onblur="{updatePointsPossible(this);}">
                        </div>
                    </td>
                    <td class="compact assignmentPercent${i}"></td>
                    <td class="overall assignment${i}"></td>
                    <td class="popup resetTab">
                        <i class="fa fa-undo resetRow${i}"
                           style="color: #888888; margin: 0; cursor: pointer; visibility:hidden"
                           onclick="{resetRow(this);}"
                        >
                            <span class="popup-left">
                                Revert to Original
                            </span>
                        </i>
                    </td>
                </tr>`;

                            // Add missing rows
                            for (let j = rowDivs.length; j < assignmentData.length; j++) {
                                $(`#table${i}`).append(row);

                                // Bind listeners
                                adjust($($(`.assignmentScore${i}`)[j]).find(".dynamic-input"), 0, remToPixels(2), remToPixels(4));
                            }

                            // Remove extra rows
                            for (let j = assignmentData.length; j < rowDivs.length; j++) {
                                $(`.classTableRow${i}:last-child`).remove();
                            }

                            rowDivs = $(`.classTableRow${i}`);

                            // Div References
                            assignmentDateDivs = $(`.assignmentDate${i}`);
                            assignmentNameDivs = $(`.assignmentName${i}`);
                            assignmentCategoryDivs = $(`.assignmentCategory${i}`);
                            excludeDivs = $(`.exclude${i}`);
                            assignmentScoreDivs = $(`.assignmentScore${i}`);
                            resetRowDivs = $(`.resetRow${i}`);
                            assignmentPercentDivs = $(`.assignmentPercent${i}`);
                            assignmentOverallDivs = $(`.assignment${i}`);

                            // Set up visuals
                            $(`#resetAll${i}`).css("visibility", "hidden").parents(".resetTab").hide();
                            $(`.categoryTable${i}`).hide();
                            $(`#table${i}`).removeClass("unround-top-right").show();
                        }
                        // Rows
                        for (let j = 0; j < assignmentData.length; j++) {
                            let assignmentIndex;
                            if (categorySort[i] && !dateSort[i]) {
                                assignmentIndex = assignmentCategories.filter(c => c === assignmentCategories[j]).length - j + 2 * assignmentCategories.indexOf(assignmentCategories[j]) - 1;
                            } else if (dateSort[i]) {
                                assignmentIndex = j;
                            } else {
                                assignmentIndex = assignmentData.length - 1 - j;
                            }

                            // Set up dates
                            $(assignmentDateDivs[assignmentIndex]).text(assignmentDates[j]);

                            // Set up names
                            $(assignmentNameDivs[assignmentIndex]).text(assignmentNames[j]);

                            // Set up categories
                            let dropdown = $(assignmentCategoryDivs[assignmentIndex]).children("select");

                            // Bind listeners only once
                            if (!$(dropdown).find("option").length) {
                                for (let k = 0; k < categories.length; k++) {
                                    dropdown.append($("<option>").text(categories[k]));
                                }
                                dropdown.on("change", () => {
                                    updateCategory(dropdown);
                                    refreshWithoutReload(true, i);
                                    dropdown.blur();
                                });
                            }

                            // Select assignment category
                            $(dropdown.find("option")[categories.indexOf(assignmentCategories[j])]).prop("selected", true);

                            // Set up excludes
                            if (assignmentExcludes[j]) {
                                $(excludeDivs[assignmentIndex]).find("label").text("Unexclude").addClass("always-show");
                            } else {
                                $(excludeDivs[assignmentIndex]).find("label").text("Exclude").removeClass("always-show");
                            }

                            // Set up scores
                            let scoreDiv = $(assignmentScoreDivs[assignmentIndex]);
                            let score = assignmentScoresParsed[j];
                            if (score.substring(score.length - 2, score.length) === "--") {
                                score = score.substring(0, score.length - 2);
                            }
                            if (score.substring(0, 2) === "--") {
                                score = score.substring(2);
                            }
                            if (score && score.indexOf("/") === -1) {
                                score += "/0";
                            }
                            score = score.split("/");
                            let inputs = scoreDiv.find(".dynamic-input");
                            $(inputs[0]).val(score[0]);
                            $(inputs[1]).val(score[1]);

                            // Set up reset buttons
                            let resetButton = $(resetRowDivs[assignmentIndex]);
                            if (assignmentAdds[j]) {
                                resetButton.css("visibility", "visible").removeClass("fa-undo").addClass("fa-trash").children("span").text("Remove added assignment").parents(".resetTab").show();
                            } else if (Object.keys(modTempData[j]).length) {
                                resetButton.css("visibility", "visible").removeClass("fa-trash").addClass("fa-undo").children("span").text("Revert to Original").parents(".resetTab").show();
                                $(`#resetAll${i}`).css("visibility", "visible").parents(".resetTab").show();
                                $($(`.resetCategory${i}`)[categories.indexOf(assignmentCategories[j])]).css("visibility", "visible").parents(".resetTab").show();
                                $(`#table${i}`).addClass("unround-top-right");
                            } else {
                                resetButton.css("visibility", "hidden").parents(".resetTab").hide();
                            }

                            // Set up percents
                            let percent = assignmentPercents[j];
                            let letterGrade = "";
                            if (isNaN(parseFloat(percent))) {
                                percent = "--";
                            } else {
                                letterGrade = " (" + getLetterGrade(percent) + ")";
                                percent += "%";
                            }
                            $(assignmentPercentDivs[assignmentIndex]).html("<div style=\"display: flex; align-items: center; justify-content: center;\"><div>" + percent + "</div><div style=\"margin-left: 0.4rem\">" + letterGrade + "</div></div>");

                            // Set up coloring and gain/loss
                            let display = +isNaN(parseFloat(assignmentData[j]).toFixed(2)) ? +parseFloat(assignmentData[assignmentData.length - 1]).toFixed(2) : parseFloat(assignmentData[j]).toFixed(2);
                            let delta = (assignmentData[j] - assignmentData[j - 1]).toFixed(3);
                            if (categorySort[i] && assignmentCategories[j] !== assignmentCategories[j - 1]) {
                                delta = 0.000;
                            }
                            let colorClass;
                            let bgColor;

                            if (delta > 0) {
                                colorClass = "improve";
                                bgColor = "rgba(0, 255, 0, " + colorAlphaFunction(delta) + ")";
                                delta = "+" + delta + "% <i class=\"fa fa-long-arrow-up\"></i>";
                            } else if (delta < 0) {
                                colorClass = "deprove";
                                bgColor = "rgba(255, 0, 0, " + colorAlphaFunction(delta) + ")";
                                delta = delta + "% <i class=\"fa fa-long-arrow-down\"></i>";
                            } else {
                                colorClass = "";
                                bgColor = "";
                                delta = "±0.000% <i class=\"fa fa-arrows-v\"></i>";
                            }
                            display = "<div class=\"" + colorClass + "\" style=\"display: flex; justify-content: space-around; align-items: flex-end;\"><div style=\"display: flex; flex-flow: row; justify-content: center; align-items: center\"><div>" + display + "%" + "</div><div style=\"margin-left: 0.4rem\">(" + getLetterGrade(display) + ")</div></div><div class=\"delta\" style=\"font-family: 'Maison Mono',monospace\">" + delta + "</div></div>";
                            $(assignmentOverallDivs[assignmentIndex]).html(display).css("font-weight", "bold");
                            $(rowDivs[assignmentIndex]).css("background-color", bgColor);

                            // Set up exclusion
                            if (assignmentExcludes[j]) {
                                $(rowDivs[assignmentIndex]).addClass("excluded").find(".dynamic-input").addClass("excluded");
                            } else {
                                $(rowDivs[assignmentIndex]).removeClass("excluded").find(".dynamic-input").removeClass("excluded");
                            }
                        }
                    }
                }
            }

            function setupOverviewTable() {
                for (let i = 0; i < parsedData.length; i++) {
                    let overallGrade = data[i].overall_percent;
                    let assignmentData = parsedData[i].rawData;
                    let lastIndex = assignmentData.length - 1;
                    let delta = +(assignmentData[lastIndex] - assignmentData[lastIndex - 1]).toFixed(5);
                    let color;

                    if (delta > 0) {
                        delta = "<i class=\"fa fa-caret-up\"></i>" + delta + "%";
                        color = "green";
                    } else if (delta < 0) {
                        delta = "<i class=\"fa fa-caret-down\"></i>" + delta + "%";
                        color = "red";
                    }
                    delta = (delta ? (" <div class=\"delta\" style=\"color: " + color + "\">" + delta + "</div>") : "");
                    if (getOverallGrade(i)) {
                        document.getElementById("overviewChart" + i).innerHTML = "<div class=\"overallGrade\">" + (+(overallGrade.toFixed(4))).toString() + "%" + "</div><div class=\"overallLetter\">" + data[i].overall_letter + "</div>" + delta;
                    } else {
                        document.getElementById("overviewChart" + i).innerHTML = "N/A";
                    }
                }
            }

            function getCategoryGottenAndPossible(classIndex, categoryName) {
                let grades = data[classIndex].grades;
                let totalGotten = 0;
                let totalPossible = 0;
                for (let i = 0; i < grades.length; i++) {
                    if (!grades[i].exclude && grades[i].category === categoryName) {
                        if (grades[i].points_gotten !== false && grades[i].points_possible !== false) {
                            totalGotten += grades[i].points_gotten;
                            totalPossible += grades[i].points_possible;
                        }
                    }
                }
                return {"gotten": totalGotten, "possible": totalPossible};
            }

            function getCategoryGrade(classIndex, categoryName) {
                let categoryGottenAndPossible = getCategoryGottenAndPossible(classIndex, categoryName);
                let totalGotten = categoryGottenAndPossible.gotten;
                let totalPossible = categoryGottenAndPossible.possible;
                if (totalPossible === 0) {
                    return null;
                }
                return totalGotten / totalPossible * 100;
            }

            function parseData(classIndex) {
                /*
                 WEIGHTS first
                 */
                for (let i = 0; i < data.length; i++) {
                    if (!classIndex || classIndex === i) {
                        let classData = data[i];
                        let className = classData.class_name;
                        let localMissingCategories = Object.keys(weights[className]["weights"]).filter(category => !weights[className]["weights"][category] && weights[className]["weights"][category] !== 0);
                        delete unobtainedWeights[className];
                        if (localMissingCategories.length > 0 && weights[className]["hasWeights"] !== "false") {
                            unobtainedWeights[className] = localMissingCategories;
                        }
                    }
                }
                /**
                 * now grades!
                 */
                //Add array to each object in parsedData: one for weights (not needed?), one for missing weights
                //Get data for one class
                for (let i = 0; i < data.length; i++) {
                    let categories = Object.keys(weights[Object.keys(weights)[i]]["weights"]);
                    if (!classIndex || classIndex === i) {
                        //Add sorting vars
                        if (!dateSort[i] && dateSort[i] !== false) {
                            dateSort[i] = true;
                        }
                        if (!categorySort[i] && categorySort[i] !== false) {
                            categorySort[i] = false;
                        }

                        let classData = data[i].grades;
                        let className = data[i].class_name;
                        let overallGradeSteps = [];
                        let excludedGradeSteps = [];
                        let categoryGradeSteps = [];
                        let categoryGrades = {}; // If category is default
                        let totalPossiblesAndGottens = {}; //by category
                        let totalWeightValue = 0; // divide by the total weight amount - so even if the final is not entered the grade is still of of 100
                        // VERY JANK CHANGE LATER
                        let doesntHaveWeights = (className in unobtainedWeights) || (weights[className]["hasWeights"] === "false");
                        for (let grade of classData) {
                            let category = grade.category;
                            if (doesntHaveWeights) {
                                category = "default";
                                if (!categoryGrades[grade.category]) {
                                    categoryGrades[grade.category] = {
                                        totalPossible: 0, totalGotten: 0
                                    };
                                }
                            }
                            try {
                                if (typeof totalPossiblesAndGottens[category] === "undefined" && !grade.exclude && grade.points_possible !== false && grade.points_gotten !== false) {
                                    let weightVal = 100;
                                    if (!doesntHaveWeights) {
                                        weightVal = Number(weights[className]["weights"][category]);
                                    }
                                    totalPossiblesAndGottens[category] = {
                                        totalPossible: 0, totalGotten: 0, weight: weightVal
                                    };
                                    totalWeightValue += weightVal;
                                }
                                if (!grade.exclude) {
                                    if (grade.points_possible !== false && grade.points_gotten !== false) {
                                        totalPossiblesAndGottens[category].totalPossible += grade.points_possible;
                                        totalPossiblesAndGottens[category].totalGotten += grade.points_gotten;
                                        if (doesntHaveWeights) {
                                            categoryGrades[grade.category].totalPossible += grade.points_possible;
                                            categoryGrades[grade.category].totalGotten += grade.points_gotten;
                                        }
                                        let overallPercent = 0;
                                        for (let [key, value] of Object.entries(totalPossiblesAndGottens)) {
                                            if (value.totalGotten === false || value.totalPossible === false) {
                                                totalWeightValue -= value.weight;
                                                value.weight = 0;
                                                continue;
                                            }
                                            overallPercent += ((value.weight * (value.totalPossible !== 0 ? (value.totalGotten / value.totalPossible) : 1)));
                                        }
                                        let total = overallPercent / totalWeightValue * 100;
                                        overallGradeSteps.push(total);
                                    } else {
                                        overallGradeSteps.push(overallGradeSteps.filter(x => x).slice(-1)[0] || 100);
                                    }
                                } else {
                                    overallGradeSteps.push(false);
                                    excludedGradeSteps.push(overallGradeSteps.filter(x => x).slice(-1)[0] || 100);
                                }
                                if (doesntHaveWeights) {
                                    if (categoryGrades[grade.category]) {
                                        categoryGradeSteps.push((categoryGrades[grade.category].totalPossible !== 0 ? categoryGrades[grade.category].totalGotten / categoryGrades[grade.category].totalPossible : 1) * 100);
                                    } else {
                                        categoryGradeSteps.push(100);
                                    }
                                } else {
                                    if (totalPossiblesAndGottens[category]) {
                                        categoryGradeSteps.push((totalPossiblesAndGottens[category].totalPossible !== 0 ? totalPossiblesAndGottens[category].totalGotten / totalPossiblesAndGottens[category].totalPossible : 1) * 100);
                                    } else {
                                        categoryGradeSteps.push(100);
                                    }
                                }
                            } catch (err) {
                                // console.log(err);
                                // console.log("bad weight input");
                            }
                        }
                        let assignmentNames = classData.filter(x => !x.exclude).map(x => x.assignment_name);
                        let assignmentDates = classData.filter(x => !x.exclude).map(x => x.date);
                        let assignmentTimestamps = classData.filter(x => !x.exclude).map(x => new Date(x.date));
                        let assignmentPercents = classData.filter(x => !x.exclude).map(x => x.grade_percent);
                        let assignmentScoresParsed = classData.filter(x => !x.exclude).map(x => (x.points_gotten === false ? "--" : x.points_gotten) + "/" + (x.points_possible === false ? "--" : x.points_possible));
                        let assignmentCategories = classData.filter(x => !x.exclude).map(x => x.category);
                        let mixedData = overallGradeSteps.filter(x => x).map((grade, i) => {
                            return {x: assignmentTimestamps[i], y: grade};
                        });
                        chartData[i] = {
                            assignmentNames: assignmentNames,
                            assignmentDates: assignmentDates,
                            assignmentTimestamps: assignmentTimestamps,
                            assignmentPercents: assignmentPercents,
                            assignmentScoresParsed: assignmentScoresParsed,
                            assignmentCategories: assignmentCategories,
                            mixedData: mixedData
                        };
                        assignmentNames = classData.map(x => x.assignment_name);
                        assignmentDates = classData.map(x => x.date);
                        assignmentPercents = classData.map(x => x.grade_percent);
                        assignmentScoresParsed = classData.map(x => (x.points_gotten === false ? "--" : x.points_gotten) + (x.points_possible === false ? "" : "/" + x.points_possible));
                        assignmentCategories = classData.map(x => x.category);
                        let assignmentExcludes = classData.map(x => x.exclude);
                        let assignmentAdds = classData.map(x => !!x.added);
                        let rawData = overallGradeSteps.map((grade, index) => grade === false ? (index > 0 ? excludedGradeSteps.shift() : 100) : grade);
                        parsedData[i] = {
                            assignmentNames: assignmentNames,
                            assignmentDates: assignmentDates,
                            assignmentPercents: assignmentPercents,
                            assignmentScoresParsed: assignmentScoresParsed,
                            assignmentCategories: assignmentCategories,
                            assignmentExcludes: assignmentExcludes,
                            assignmentAdds: assignmentAdds,
                            rawData: rawData
                        };

                        // This took forever...I am so proud of it - Joel 06/03/20 10:25PM
                        let sortHelper = Array.apply(null, Array(assignmentCategories.length)).map((x, index) => index).sort((a, b) => categories.indexOf(assignmentCategories[a]) - categories.indexOf(assignmentCategories[b]));
                        categorySortedData[i] = {
                            assignmentNames: assignmentNames.map((x, index, arr) => arr[sortHelper[index]]),
                            assignmentDates: assignmentDates.map((x, index, arr) => arr[sortHelper[index]]),
                            assignmentPercents: assignmentPercents.map((x, index, arr) => arr[sortHelper[index]]),
                            assignmentScoresParsed: assignmentScoresParsed.map((x, index, arr) => arr[sortHelper[index]]),
                            assignmentCategories: assignmentCategories.map((x, index, arr) => arr[sortHelper[index]]),
                            assignmentExcludes: assignmentExcludes.map((x, index, arr) => arr[sortHelper[index]]),
                            assignmentAdds: assignmentAdds.map((x, index, arr) => arr[sortHelper[index]]),
                            rawData: categoryGradeSteps.map((x, index, arr) => arr[sortHelper[index]]),
                            originalIndices: sortHelper
                        };
                    }
                }
            }

            function renderAllCharts(classIndex) {
                if (data && data.length && !mobile) {
                    renderOverviewChart();
                    for (let i = 0; i < data.length; i++) {
                        if (!classIndex || classIndex === i) {
                            renderChart(i);
                        }
                    }
                }
            }

            function resetZoom(id) {
                // After experimenting, any chart without 28 keys does not reset, so rerender it
                if (Object.keys(charts[id + 1]).length !== 28) {
                    if (id >= 0) {
                        renderChart(id);
                    } else {
                        renderOverviewChart();
                    }
                } else {
                    charts[id + 1].resetZoom();
                }
            }

            let hoveredDatasetIndex = -1;

            let running;

            function renderOverviewChart() {
                $("#chart-1").remove();
                $("#chart-container-1").html("<button id=\"reset-zoom-1\" style=\"position: absolute; top: 0; right: 0; height: fit-content; display:none\" class=\"btn btn-sm\" onclick=\"resetZoom(-1); $(this).hide()\">Reset</button><canvas id=\"chart-1\" class=\"chart\"></canvas>");
                let ctx = document.getElementById("chart-1");
                let dataset = [];
                let _colors = colors;
                if (!data) {
                    return;
                }
                for (let i = 0; i < data.length; i++) {
                    dataset.push({
                                     label: data[i].class_name,
                                     backgroundColor: "transparent",
                                     pointBackgroundColor: _colors[i],
                                     pointBorderColor: "transparent",
                                     borderColor: _colors[i],
                                     data: chartData[i].mixedData,
                                     cubicInterpolationMode: "monotone",
                                     spanGaps: false,
                                     pointRadius: 3,
                                     borderWidth: 3,
                                     pointHoverRadius: 7,
                                     pointHoverBackgroundColor: _colors[i],
                                     pointHoverBorderColor: _colors[i],
                                     pointHoverBorderWidth: 2
                                 });
                }
                let numRunning = 0;
                charts[0] = new Chart(ctx, {
                    type: "line", data: {
                        datasets: dataset
                    }, options: {
                        hover: {
                            mode: "nearest", intersect: false
                        }, onHover: function onHover(evt, activeElements) {
                            if (!activeElements || !activeElements.length) {
                                return;
                            }
                            let datasetIndex = activeElements[0]._datasetIndex;
                            let activeDataset = this.data.datasets[datasetIndex];
                            for (let i = 0; i < this.data.datasets.length; i++) {
                                let inactiveDataset = this.data.datasets[i];
                                inactiveDataset.borderWidth = 3;
                                inactiveDataset.pointRadius = 3;
                            }
                            activeDataset.borderWidth = 6;
                            activeDataset.pointRadius = 6;
                            this.update(100);
                            let chart = this;
                            if (numRunning === 0) {
                                clearTimeout(running);
                                numRunning++;
                                running = setTimeout(() => {
                                    numRunning--;
                                    for (let i = 0; i < chart.data.datasets.length; i++) {
                                        let dataset = chart.data.datasets[i];
                                        dataset.borderWidth = 3;
                                        dataset.pointRadius = 3;
                                    }
                                    chart.update(1000);
                                }, 6000);
                            }
                        }, scales: {
                            xAxes: [{
                                type: "time", time: {
                                    unit: "month"
                                }, ticks: {
                                    fontColor: (darkMode ? "white" : "black"), fontFamily: "Verdana", fontSize: "13"
                                }, gridLines: {
                                    color: (darkMode ? "#555555" : "#CCCCCC")
                                }
                            }], yAxes: [{
                                ticks: {
                                    max: 110,
                                    min: 70,
                                    fontColor: (darkMode ? "white" : "black"),
                                    fontFamily: "Verdana",
                                    fontSize: "12"
                                }, gridLines: {
                                    color: (darkMode ? "#555555" : "#CCCCCC"), drawBorder: false
                                }
                            }]
                        }, animation: {
                            easing: "easeOutCubic"
                        }, legend: {
                            display: true, position: "top", labels: {
                                fontColor: (darkMode ? "white" : "black"),
                                fontFamily: "Verdana",
                                boxWidth: 20,
                                fontSize: 13
                            }
                        }, tooltips: {
                            enabled: true, position: "nearest", intersect: false, displayColors: true, callbacks: {
                                title: function (tooltipItems) {
                                    return moment(tooltipItems[0].xLabel).format("MM/DD/YY") + " " + +parseFloat(tooltipItems[0].value).toFixed(2) + "%";
                                }, label: function (tooltipItem) {
                                    return ["[" + chartData[tooltipItem.datasetIndex].assignmentCategories[tooltipItem.index] + "] " + chartData[tooltipItem.datasetIndex].assignmentNames[tooltipItem.index] + ((chartData[tooltipItem.datasetIndex].assignmentPercents[tooltipItem.index] !== false && chartData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].substring(0, 2) !== "--") ? (" - " + chartData[tooltipItem.datasetIndex].assignmentPercents[tooltipItem.index] + "% ") : (" ")) + ((chartData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].substring(chartData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].length - 2)) !== "/0" ? ("(" + chartData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index] + ")") : ("(" + chartData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].substring(0, chartData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].length - 2) + ")"))];
                                }
                            }
                        }, responsive: true, maintainAspectRatio: false, plugins: {
                            zoom: {
                                zoom: {
                                    enabled: true, mode: "y", speed: 0.05, onZoom: ({chart}) => {
                                        $("#reset-zoom-1").show();

                                        // Disable hovering and tooltips to make animation smoother
                                        chart.options.hover.mode = null;
                                        chart.options.tooltips.enabled = false;
                                    }, onZoomComplete: ({chart}) => {
                                        chart.options.hover.mode = "nearest";
                                        chart.options.tooltips.enabled = true;
                                    }, rangeMin: {
                                        y: 0
                                    }, rangeMax: {
                                        y: 150
                                    }
                                }, pan: {
                                    enabled: true, mode: "y", speed: 0.05, onPan: ({chart}) => {
                                        $("#reset-zoom-1").show();

                                        // Disable hovering and tooltips to make animation smoother
                                        chart.options.hover.mode = null;
                                        chart.options.tooltips.enabled = false;
                                    }, onPanComplete: ({chart}) => {
                                        chart.options.hover.mode = "nearest";
                                        chart.options.tooltips.enabled = true;
                                    }, rangeMin: {
                                        y: 0
                                    }, rangeMax: {
                                        y: 150
                                    }
                                }
                            }
                        }
                    }
                });
            }

            function renderChart(id) {
                $("#chart" + id).remove();
                if (chartData[id].mixedData.length) {
                    $("#chart-container" + id).html("<button id=\"reset-zoom" + id + "\" style=\"position: absolute; top: 0; right: 0; height: fit-content; display:none\" class=\"btn btn-sm\" onclick=\"resetZoom(" + id + "); $(this).hide()\">Reset</button><canvas id=\"chart" + id + "\" class=\"chart\"></canvas>");
                    let ctx = document.getElementById("chart" + id);
                    let _colors = colors;
                    charts[id + 1] = new Chart(ctx, {
                        type: "line", data: {
                            datasets: [{
                                label: "chartData[id]",
                                backgroundColor: (darkMode ? "rgba(256,256,256,0.05)" : "rgba(0,0,0,0.05)"),
                                pointBackgroundColor: _colors[id],
                                pointBorderColor: _colors[id],
                                borderColor: _colors[id],
                                fill: "start",
                                data: chartData[id].mixedData,
                                cubicInterpolationMode: "monotone",
                                spanGaps: false,
                                pointRadius: 3,
                                borderWidth: 3,
                                pointHoverRadius: 7,
                                pointHoverBackgroundColor: _colors[id],
                                pointHoverBorderColor: _colors[id],
                                pointHoverBorderWidth: 2
                            }]
                        }, options: {
                            hover: {
                                mode: "nearest", intersect: false
                            }, scales: {
                                xAxes: [{
                                    type: "time", time: {
                                        unit: "month"
                                    }, ticks: {
                                        fontColor: (darkMode ? "white" : "black"), fontFamily: "Verdana", fontSize: "13"
                                    }, gridLines: {
                                        color: (darkMode ? "#555555" : "#CCCCCC")
                                    }
                                }], yAxes: [{
                                    ticks: {
                                        fontColor: (darkMode ? "white" : "black"), fontFamily: "Verdana", fontSize: "12"
                                    }, gridLines: {
                                        color: (darkMode ? "#555555" : "#CCCCCC"), drawBorder: false
                                    }
                                }]
                            }, animation: {
                                easing: "easeOutCubic"
                            }, legend: {
                                display: false
                            }, tooltips: {
                                enabled: true, position: "nearest", intersect: false, displayColors: false, callbacks: {
                                    title: function (tooltipItems, data) {
                                        return moment(tooltipItems[0].xLabel).format("MM/DD/YY") + " " + +parseFloat(tooltipItems[0].value).toFixed(4) + "%";
                                    }, label: function (tooltipItem, data) {
                                        return ["[" + chartData[id].assignmentCategories[tooltipItem.index] + "] " + chartData[id].assignmentNames[tooltipItem.index] + ((chartData[id].assignmentPercents[tooltipItem.index] !== false && chartData[id].assignmentScoresParsed[tooltipItem.index].substring(0, 2) !== "--") ? (" - " + chartData[id].assignmentPercents[tooltipItem.index] + "% ") : (" ")) + ((chartData[id].assignmentScoresParsed[tooltipItem.index].substring(chartData[id].assignmentScoresParsed[tooltipItem.index].length - 2)) !== "/0" ? ("(" + chartData[id].assignmentScoresParsed[tooltipItem.index] + ")") : ("(" + chartData[id].assignmentScoresParsed[tooltipItem.index].substring(0, chartData[id].assignmentScoresParsed[tooltipItem.index].length - 2) + ")"))];
                                    }
                                }
                            }, responsive: true, maintainAspectRatio: false, plugins: {
                                zoom: {
                                    zoom: {
                                        enabled: true, mode: "y", speed: 0.05, onZoom: ({chart}) => {
                                            $("#reset-zoom" + id).show();

                                            // Disable hovering and tooltips to make animation smoother
                                            chart.options.hover.mode = null;
                                            chart.options.tooltips.enabled = false;
                                        }, onZoomComplete: ({chart}) => {
                                            chart.options.hover.mode = "nearest";
                                            chart.options.tooltips.enabled = true;
                                        }, rangeMin: {
                                            y: 0
                                        }, rangeMax: {
                                            y: 150
                                        }
                                    }, pan: {
                                        enabled: true, mode: "y", speed: 0.05, onPan: ({chart}) => {
                                            $("#reset-zoom" + id).show();

                                            // Disable hovering and tooltips to make animation smoother
                                            chart.options.hover.mode = null;
                                            chart.options.tooltips.enabled = false;
                                        }, onPanComplete: ({chart}) => {
                                            chart.options.hover.mode = "nearest";
                                            chart.options.tooltips.enabled = true;
                                        }, rangeMin: {
                                            y: 0
                                        }, rangeMax: {
                                            y: 150
                                        }
                                    }
                                }
                            }
                        }
                    });
                } else {
                    $("#chart-container" + id).html("<div class=\"chart\" style=\"height: 100%; font-size: 3rem; font-weight: bold;text-align: center; filter: opacity(0.5); line-height: 100%\">No Data</div>");
                }
            }

            function showPage(id) {
                document.getElementById("pageNumber").textContent = id;
                for (let i = -1; i < data.length; i++) {
                    document.getElementById("link" + i).classList.remove("active");
                }
                document.getElementById("link" + id).classList.add("active");
                for (let i = -1; i < data.length; i++) {
                    document.getElementById("section" + i).style.display = "none";
                }
                document.getElementById("section" + id).style.display = "block";

                if (id !== -1 && mobile) {
                    $(".backToHome").show();
                } else {
                    $(".backToHome").hide();
                }

                sessionStorage.setItem("currentPage", id);
                currentPage = id;
            }

            document.onkeyup = function (e) {
                if ($("input").is(":focus") || !shortcutsEnabled) {
                    // Do nothing
                } else if (e.key === "ArrowUp") {
                    // up arrow
                } else if (e.key === "ArrowDown") {
                    // down arrow
                } else if (e.key === "ArrowLeft") {
                    // left arrow
                    if (cardsDisplayed.slice(-1)[0] === "settingsCardDisplay") {
                        if (currentTab === 1) {
                            openTab(maxTab);
                        } else {
                            openTab(currentTab - 1);
                        }
                    } else if (cardsDisplayed.length === 0) {
                        if (currentPage === -1) {
                            showPage(data.length - 1);
                        } else {
                            showPage(currentPage - 1);
                        }
                    }
                } else if (e.key === "ArrowRight") {
                    // right arrow
                    if (cardsDisplayed.slice(-1)[0] === "settingsCardDisplay") {
                        if (currentTab === maxTab) {
                            openTab(1);
                        } else {
                            openTab(currentTab + 1);
                        }
                    } else if (cardsDisplayed.length === 0) {
                        if (currentPage === data.length - 1) {
                            showPage(-1);
                        } else {
                            showPage(currentPage + 1);
                        }
                    }
                } else if (e.key === "s") {
                    if (cardsDisplayed.includes("settingsCardDisplay")) {
                        if (cardsDisplayed.indexOf("settingsCardDisplay") !== cardsDisplayed.length - 1) {
                            showCard("#settingsCardDisplay");
                        } else {
                            closeForm("settingsCardDisplay");
                        }
                    } else {
                        showCard("#settingsCardDisplay");
                        openTab(1);
                    }
                } else if (e.key === "w") {
                    if (cardsDisplayed.includes("latestDisplay")) {
                        if (cardsDisplayed.indexOf("latestDisplay") !== cardsDisplayed.length - 1) {
                            showLatest(true);
                        } else {
                            closeForm("latestDisplay");
                        }
                    } else {
                        showLatest(true);
                    }
                } else if (e.key === "q") {
                    if (cardsDisplayed.includes("changelogDisplay")) {
                        if (cardsDisplayed.indexOf("changelogDisplay") !== cardsDisplayed.length - 1) {
                            showChangelog();
                        } else {
                            closeForm("changelogDisplay");
                        }
                    } else {
                        showChangelog();
                    }
                } else if (e.key === "k") {
                    if (cardsDisplayed.includes("shortcutsDisplay")) {
                        if (cardsDisplayed.indexOf("shortcutsDisplay") !== cardsDisplayed.length - 1) {
                            showCard("#shortcutsDisplay");
                        } else {
                            closeForm("shortcutsDisplay");
                        }
                    } else {
                        showCard("#shortcutsDisplay");
                    }
                } else if (e.key === "a") {
                    if (currentPage === -1) {
                        return;
                    }
                    let addAssignment = $($(".addAssignment")[currentPage]);
                    addAssignment.trigger("click");
                } else if (e.key === "h") {
                    if (cardsDisplayed.includes("settingsCardDisplay")) {
                        if (cardsDisplayed.indexOf("settingsCardDisplay") !== cardsDisplayed.length - 1) {
                            showCard("#settingsCardDisplay");
                        }
                        openTab(3);
                    } else {
                        showCard("#settingsCardDisplay");
                        openTab(3);
                    }
                } else {
                    //console.log(e.code);
                }
            };

            function isEqual(a, b) {
                let aProps = Object.getOwnPropertyNames(a);
                let bProps = Object.getOwnPropertyNames(b);

                // If number of properties is different,
                // objects are not equivalent
                if (aProps.length != bProps.length) {
                    return false;
                }

                for (let i = 0; i < aProps.length; i++) {
                    let propName = aProps[i];

                    // If values of same property are not equal,
                    // objects are not equivalent
                    if (a[propName] !== b[propName]) {
                        return false;
                    }
                }

                // If we made it this far, objects
                // are considered equivalent
                return true;
            }


            //TODO I'm pretty sure the following two functions do the same thing but I'm not sure so I'll keep them for now -- Joel
            function resetWeights(index) {
                let className = data[index].class_name;
                $("#check" + index).prop("checked", relClassData[className]["hasWeights"] === "false");
                disableInput("check" + index, "weightsTable" + index);
                let keys = Object.keys(weights[className]["weights"]);
                for (let i = 0; i < keys.length; i++) {
                    if (keys[i] in relClassData[className]["weights"]) {
                        $("#weightTableWeight" + index + i + " input").val(relClassData[className]["weights"][keys[i]]);
                    } else if (tempWeights[className]) {
                        $("#weightTableWeight" + index + i + " input").val(tempWeights[className][keys[i]]);
                    }
                }

                let hasWeights = eval(relClassData[className]["hasWeights"]);
                if (eval(weights[className]["hasWeights"]) !== eval(hasWeights)) {
                    if (!hasWeights) {
                        tempWeights[className] = Object.assign({}, weights[className]["weights"]);
                    }
                }
            }

            //Resets inputs to old weight value when exiting point based
            function resetInputs(form) {
                let hasWeights = !($(form).find("input[name=\"hasWeights\"]")).is(":checked");
                let className = data[$(form)[0].id.substring(7)].class_name;
                if (eval(weights[className]["hasWeights"]) != eval(hasWeights)) {
                    if (!hasWeights) {
                        tempWeights[className] = Object.assign({}, weights[className]["weights"]);
                    } else if (tempWeights[className]) {
                        for (let i = 0; i < Object.keys(weights[className]["weights"]).length; i++) {
                            let weight = $("#weightTableWeight" + $(form)[0].id.substring(7) + i + " input");
                            weight.val(tempWeights[className][Object.keys(tempWeights[className])[i]]);
                        }
                    }
                }
            }

            $(function initAjaxFormPosts() {
                if ($("form.form-weights").length > 0) {
                    $("form.form-weights").each(function () {
                        let form = $(this);
                        $(form).submit(function (event) {
                            event.preventDefault();
                            event.stopImmediatePropagation();
                            let hasWeights = !($(form).find("input[name=\"hasWeights\"]")).is(":checked");
                            let className = data[$(form)[0].id.substring(7)].class_name;

                            let weightData = $(form).serializeArray();
                            let weightURI = {};
                            jQuery.map(weightData, function (n, i) {
                                if (n.name !== "hasWeights") {
                                    weightURI[n.name] = isNaN(parseFloat(n.value)) ? null : parseFloat(n.value);
                                }
                            });
                            if (isEqual(weights[className]["weights"], weightURI) && ((weights[className]["hasWeights"] === "true") === hasWeights)) {
                                return;
                            }
                            weightURI = encodeURIComponent(JSON.stringify(weightURI));
                            className = encodeURI(className);
                            hasWeights = encodeURI(hasWeights);
                            let formData = "className=" + className + "&hasWeights=" + hasWeights + "&newWeights=" + weightURI;

                            $.ajax({
                                       type: "POST", url: $(form).attr("action"), data: formData
                                   }).done((data) => {
                                // Make sure that the formMessages div has the alert-success class.
                                className = decodeURI(className);
                                weights[className]["custom"] = data.includes("Custom");
                                for (let i = 0; i < Object.keys(weights[className]["weights"]).length; i++) {
                                    let weight = $("#weightTableWeight" + $(form)[0].id.substring(7) + i + " input");
                                    if (weight[0].value) {
                                        weight.addClass("text-view");
                                        weight.css("border-color", "unset");
                                    } else {
                                        weight.removeClass("text-view");
                                        weight.css("border-color", "lightcoral");
                                    }
                                }
                                if (weightData[0].value === "on") {
                                    weights[className]["hasWeights"] = "false";
                                    setPointBasedWeights();
                                } else {
                                    weights[className]["hasWeights"] = "true";
                                    if (weightData.length === 0) {
                                        return;
                                    }
                                    for (let weight of weightData) {
                                        weights[className]["weights"][weight.name] = parseFloat(weight.value);
                                    }
                                }
                                refreshWithoutReload();
                            });
                        });
                    });
                }
            });

            // Get the navbar
            let navbar = document.getElementById("classLinks");
            let sticky, height;

            if (navbar) {
                // Get the offset position of the navbar
                sticky = navbar.offsetTop - $(".navbar")[0].offsetTop;

                // Get the height of the navbar
                height = navbar.offsetHeight + parseInt(getComputedStyle(navbar).marginBottom);

                function stickyNavbar() {
                    if (window.pageYOffset >= sticky) {
                        $(".container").css("padding-top", height);
                        navbar.classList.add("sticky");
                    } else {
                        navbar.classList.remove("sticky");
                        $(".container").css("padding-top", "unset");
                    }
                }

                let hidingBack;

                function setupBackToHome() {
                    clearTimeout(hidingBack);
                    $(".backToHome").removeClass("showDetails");
                    hidingBack = setTimeout(() => {
                        $(".backToHome").addClass("showDetails");
                    }, 400);
                }

                // Do it once on load
                stickyNavbar();
                setupBackToHome();

                // When the user scrolls the page
                window.onscroll = () => {
                    if (!mobile) {
                        stickyNavbar();
                    } else {
                        setupBackToHome();
                    }
                };
            }

            document.onload = disableMobileGraphFeatures();

            function disableMobileGraphFeatures() {
                //Disable zoom for mobile
                if (mobile) {
                    charts.forEach((chart, index) => {
                        // Reset zoom
                        chart.resetZoom();
                        $("#reset-zoom" + (index - 1)).hide();

                        // Disable zoom and pan
                        chart.options.plugins.zoom.zoom.enabled = false;
                        chart.options.plugins.zoom.pan.enabled = false;

                        // Disable tooltips and hover
                        chart.options.hover.mode = null;
                        chart.options.tooltips.enabled = false;
                    });
                } else {
                    charts.forEach(chart => {
                        // Enabled zoom and pan
                        chart.options.plugins.zoom.zoom.enabled = true;
                        chart.options.plugins.zoom.pan.enabled = true;

                        // Enabled tooltips and hover
                        chart.options.hover.mode = "nearest";
                        chart.options.tooltips.enabled = true;
                    });
                }

            }

            let resizeTimer;
            window.onresize = () => {
                mobile = window.innerWidth <= 991;
                clearTimeout(resizeTimer);
                resizeTimer = setTimeout(() => {
                    disableMobileGraphFeatures();

                    if (navbar && !mobile) {
                        navbar.classList.remove("sticky");
                        disableScrolling();

                        // Get the offset position of the navbar
                        sticky = navbar.offsetTop - $(".navbar")[0].offsetTop;

                        enableScrolling();

                        // Get the height of the navbar
                        height = navbar.offsetHeight + parseInt(getComputedStyle(navbar).marginBottom);

                        // Render all charts if not already rendered
                        if ($(".chartjs-size-monitor").length !== data.length + 1) {
                            renderAllCharts();
                        }
                    }

                    if (currentPage !== -1 && mobile) {
                        $(".backToHome").show();
                    } else {
                        $(".backToHome").hide();
                    }

                    // Reset changelog
                    if (cardsDisplayed.includes("changelogDisplay")) {
                        showChangelog();
                    }
                }, 1000);
            };

            // Collapse add assignment when click outside
            $(document).mousedown(function (e) {
                if (!$(e.target).parents(".add-assignment-container").length && currentPage >= 0 && $($(".add-assignment-container")[currentPage]).hasClass("active")) {
                    $($(".addAssignment")[currentPage]).trigger("click");
                }
            });

        </script>
<% } %>
<script>
    // This is very important for mobile
    $("*:not(input:not([type=checkbox],[type=radio]),select)").focus(function () {
        $(this).blur();
    });

    function scrollToBottom(div) {
        div.animate({scrollTop: div[0].scrollHeight - div[0].clientHeight}, (div[0].scrollHeight - div[0].clientHeight - div.scrollTop()) / 5);
    }

    let swappingPrivacyButtons;

    $("#privacyScroller").scroll(function () {
        if (swappingPrivacyButtons) {
            clearTimeout(swappingPrivacyButtons);
        }
        swappingPrivacyButtons = setTimeout(() => {
            if (Math.abs(this.scrollTop - this.scrollHeight + this.clientHeight) <= 100) {
                $("#privacy-down").hide();
                $("#accept-privacy").fadeIn();
            } else {
                $("#accept-privacy").hide();
                $("#privacy-down").fadeIn();
            }
        }, 100);
    });

    let swappingTermsButtons;

    $("#termsScroller").scroll(function () {
        if (swappingTermsButtons) {
            clearTimeout(swappingTermsButtons);
        }
        swappingTermsButtons = setTimeout(() => {
            if (Math.abs(this.scrollTop - this.scrollHeight + this.clientHeight) <= 100) {
                $("#terms-down").hide();
                $("#accept-terms").fadeIn();
            } else {
                $("#accept-terms").hide();
                $("#terms-down").fadeIn();
            }
        }, 100);
    });
</script>
</body>
</html>
