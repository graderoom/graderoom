<!doctype html>
<html lang="en-US">
<head>
    <title>Graderoom</title>
    <link rel="icon" href="public/resources/common/icon.png">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat:500&display=swap">
<% let theme; %>
<% if (user.appearance.theme === "dark") { %>
    <% theme = true; %>
    <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/dark_mode.css">
<% } else if (user.appearance.theme === "light") { %>
    <% theme = false; %>
    <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/light_mode.css">
<% } else if ((((user.appearance.darkModeStart < user.appearance.darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= user.appearance.darkModeStart - (dst ? (user.appearance.darkModeStart === 0 ? -23 : 1) : 0)) && ((Date.now() / 1000 / 3600 - 8) % 24) < user.appearance.darkModeFinish - (dst ? (user.appearance.darkModeFinish === 1 ? -23 : 1) : 0))) || ((user.appearance.darkModeStart > user.appearance.darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= user.appearance.darkModeStart - (dst ? (user.appearance.darkModeStart === 0 ? -23 : 1) : 0)) || ((Date.now() / 1000 / 3600 - 8) % 24) < user.appearance.darkModeFinish - (dst ? (user.appearance.darkModeFinish === 1 ? -23 : 1) : 0))))) { %>
    <% theme = true; %>
    <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/dark_mode.css">
<% } else { %>
    <% theme = false; %>
    <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/light_mode.css">
<% } %>
<link rel="stylesheet" type="text/css" href="public/css/main.css">
<link id="fade" rel="stylesheet" type="text/css" href="public/css/fade.css" disabled>
<meta name="viewport" content="width=device-width, initial-scale=1">

<!-- JavaScript Imports -->
<script src="https://cdn.jsdelivr.net/npm/moment@2.24.0/moment.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3"></script>
<script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@0.7.7"></script>
</head>
<body>

<% if (user.alerts.policyLastSeen === "never" || user.alerts.termsLastSeen === "never") { %>

    <% if (user.alerts.termsLastSeen === "never") { %>
        <% include partials/user/terms_and_conditions.ejs %>
            <script>
                $("#termsDisplay").show();
            </script>
    <% } %>
    <% if (user.alerts.policyLastSeen === "never") { %>
        <% include partials/user/privacy_policy.ejs %>
            <script>
                $("#privacyDisplay").show();
            </script>
    <% } %>

<% } else { %>

    <!-- Navbar -->
    <% include partials/user/navbar.ejs %>

        <% let page = -1; %>
        <i id="pageNumber" style="display:none"><%= page %></i>

        <!-- Class Links -->
        <% if (JSON.parse(gradeData).length > 0) { %>
            <ul id="classLinks" class="nav nav-fill" style="color: #BBBBBB">
                <li class="nav-item" id="link-1">
                    <a class="nav-link" onclick="showPage(-1)">Overview</a>
                </li>
                <% let offset = 0; %>
                <% for (let i = 0; i < JSON.parse(gradeData).length; i++) { %>
                    <% if (user.appearance.showNonAcademic || JSON.parse(relevantClassData)[JSON.parse(gradeData)[i].class_name]["classType"] !== "non-academic") { %>
                        <li class="nav-item" id="link<%= i + offset %>">
                            <a class="nav-link" style="color: <%= user.appearance.classColors[i] %>"
                               onclick="showPage(<%= i + offset %>)"><%= (JSON.parse(gradeData)[i].class_name) %></a>
                        </li>
                    <% } else {
                        offset--;
                    } %>
                <% } %>
            </ul>
        <% } %>


        <!-- Main Screen -->
        <div class="container">
            <!-- Overview Section -->
            <% if (user.alerts.lastUpdated.length !== 0) { %>
                <span id="section-1">
                    <div style="display: flex">
                        <div style="display: flex; flex-flow: column; justify-content: center; align-items: center; padding-right: 1rem;">
                            <h5 style="font-size: 2rem" class="text-center">Semester GPA</h5>
                            <h5 style="font-size: 5rem" id="GPA-display">--</h5>
                            <span class="popup">
                                <i id="incorrectGPA"
                                   class="fa fa-2x fa-exclamation-circle"
                                   style="display: none; margin-left: 0.2rem; vertical-align: middle">
                                    <span class="popup-top">
                                        Your GPA is incorrect. Please fix all issues marked with <i
                                                class="fa fa-exclamation-circle"></i> to resolve.
                                    </span>
                                </i>
                            </span>
                        </div>
                        <div id="chart-container-1" class="chart-container text-center"
                             style="position: relative; height:60vh; width: 100%; margin: 0 auto;">
                            <button id="reset-zoom-1"
                                    style="position: absolute; top: 0; right: 0; height: fit-content; display:none"
                                    class="btn btn-sm" onclick="resetZoom(-1); $(this).hide()">Reset
                            </button>
                            <canvas id="chart-1" class="chart" style="height: 60vh; width: 60vw;"></canvas>
                        </div>
                    </div>
                    <br>
                    <table class="table rounded-table text-center" id="table-1">
                        <thead>
                            <tr>
                                <% offset = 0; %>
                                <% for (let i = 0; i < JSON.parse(gradeData).length; i++) { %>
                                    <% if (user.appearance.showNonAcademic || JSON.parse(relevantClassData)[JSON.parse(gradeData)[i].class_name]["classType"] !== "non-academic") { %>
                                        <th id="overview<%= i + offset %>" class="overview"
                                            style="cursor: pointer; text-align: center; color: <%= user.appearance.classColors[i] %>"
                                            onclick="showPage(<%= i + offset %>)">
                                            <%= JSON.parse(gradeData)[i].class_name %>
                                            <span class="popup">
                                                <i id="incorrectOverviewGrade<%= i + offset %>"
                                                   class="fa fa-exclamation-circle"
                                                   style="display: none; margin-left: 0.2rem">
                                                    <span class="popup-top-left always-show">
                                                        <% let grade = JSON.parse(gradeData)[i].overall_percent + "%"; %>
                                                        Grade in PowerSchool:
                                                        <nobr><%= grade + " (" + JSON.parse(gradeData)[i].overall_letter + ")" %></nobr>
                                                    </span>
                                                </i></span></th>
                                    <% } else {
                                        offset--;
                                    } %>
                                <% } %>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <% offset = 0; %>
                                <% for (let i = 0; i < JSON.parse(gradeData).length; i++) { %>
                                    <% if (user.appearance.showNonAcademic || JSON.parse(relevantClassData)[JSON.parse(gradeData)[i].class_name]["classType"] !== "non-academic") { %>
                                        <td class="overview"
                                            style="padding-top: 0.5rem; padding-bottom: 0; cursor: pointer; color: <%= user.appearance.classColors[i] %>"
                                            onclick="showPage(<%= i + offset %>)">
                                            <div id="overviewChart<%= i + offset %>"
                                                 style="display:block; font-weight:bolder">--<br>--<br>--
                                            </div>
                                        </td>
                                    <% } else {
                                        offset--;
                                    } %>
                                <% } %>
                            </tr>
                        </tbody>
                    </table>
                </span>
            <% } %>
            <!-- Class Sections -->
            <% offset = 0; %>
            <% for (let i = 0; i < JSON.parse(gradeData).length; i++) { %>
                <% if (user.appearance.showNonAcademic || JSON.parse(relevantClassData)[JSON.parse(gradeData)[i].class_name]["classType"] !== "non-academic") { %>
                    <span id="section<%= i + offset %>" style="display: none;">
                        <% if (JSON.parse(relevantClassData)[JSON.parse(gradeData)[i].class_name]["classType"] === "non-academic") { %>
                            <div style="display:block">
                                <div class="alert alert-info font-weight-bold"
                                     id="weightmsg<%= i + offset %>">This class is non-academic. You can stop
                                    non-academic classes from being displayed in <u style="cursor: pointer"
                                                                                    onclick="showCard('#settingsCardDisplay');">settings</u>
                                </div>
                            </div>
                        <% } %>
                        <div style="display:flex; justify-content: space-evenly; align-items: center">
                            <div id="chart-container<%= i + offset %>" class="chart-container"
                                 style="position: relative; height:40vh; width:100%; margin: 0 auto;">
                                <button id="reset-zoom<%= i + offset %>"
                                        style="position: absolute; top: 0; right: 0; height: fit-content; display:none"
                                        class="btn btn-sm"
                                        onclick="resetZoom(<%= i + offset %>); $(this).hide()">Reset
                                </button>
                                <canvas id="chart<%= i + offset %>" class="chart"></canvas>
                                <button id="reset-zoom<%= i + offset %>"
                                        style="position: absolute; top: 0; right: 0; height: fit-content; display:block"
                                        class="btn btn-sm"
                                        onclick="resetZoom(<%= i + offset %>); $(this).hide()">Reset
                                </button>
                            </div>
                            <form id="weights<%= i + offset %>" class="form-ajax form-weights form-signin"
                                  action="/updateweights" style="padding-left: 1rem;">
                                <table class="table text-center weights rounded-table"
                                       style="white-space: nowrap; margin-top: 1rem; margin-bottom: 1rem;"
                                       id="weightsTable<%= i + offset %>">
                                    <thead>
                                        <tr>
                                            <th colspan="4" style="padding: 0.3rem 0;">
                                                <label style="display: flex; font-size: 1rem; justify-content: center; margin: 0; align-items: center">Point
                                                    Based&nbsp;
                                                    <label class="switch">
                                                        <input
                                                                id="check<%= i + offset %>"
                                                                style="margin: 0; display: flex"
                                                                type="checkbox"
                                                                name="hasWeights"
                                                        <% if (JSON.parse(weightData)[JSON.parse(gradeData)[i].class_name]["hasWeights"] === "false") { %>
                                                                checked
                                                                <% } %>
                                                                onchange="disableInput('check<%= i + offset %>','weightsTable<%= i + offset %>'); resetInputs('#weights<%= i + offset %>'); $('#weights<%= i + offset %>').submit();"
                                                        >
                                                        <span style="color: <%= user.appearance.classColors[i + offset] %>"
                                                              class="classSlider slider"></span>
                                                    </label>
                                                </label>
                                            </th>
                                        </tr>
                                        <tr>
                                            <th>Category</th>
                                            <th id="weight-header<%= i + offset %>">
                                                Weights
                                                <span class="popup">
                                                    <i
                                                            id="reset<%= i + offset %>"
                                                            style="color: #888888; margin: 0; cursor: pointer; display:inline-block"
                                                            class="fa fa-undo"
                                                            onclick="resetWeights(<%= i + offset %>); $('#weights<%= i + offset %>').submit();">
                                                        <span class="popup-top">Revert
                                                            to Crowdsourced Default</span>
                                                    </i>
                                                </span>
                                                <span class="popup">
                                                    <i style="display: inline-block"
                                                       id="ignoringWeights<%= i + offset %>"
                                                       class="fa fa-exclamation-circle">
                                                        <span class="popup-top">
                                                            Enter all weights to enable weighted overall grade
                                                            calculation
                                                            or choose the point-based option.
                                                        </span>
                                                    </i>
                                                </span>
                                            </th>
                                            <th>Score</th>
                                            <th>Grade</th>
                                        </tr>
                                    </thead>
                                    <tbody>

                                        <% for (let j = 0; j < Object.keys(JSON.parse(weightData)[JSON.parse(gradeData)[i].class_name]["weights"]).length; j++) { %>
                                            <tr>
                                                <td id="weightTableCategory<%= i + offset %><%= j %>"></td>
                                                <% let weights = JSON.parse(weightData)[JSON.parse(gradeData)[i].class_name]["weights"] %>
                                                <% let category = Object.keys(weights)[j] %>
                                                <% let value = weights[category] %>
                                                <td id="weightTableWeight<%= i + offset %><%= j %>" class="form-group">
                                                    <input style="<% if (!value && value != 0) { %> border-color: lightcoral !important; <% } %>"
                                                           value="<%= value %>"
                                                           type="number"
                                                           min="0"
                                                           step="0.01"
                                                           class="number-input disableable form-control <% if(value || value == 0){ %> text-view <% } %>"
                                                           name="<%= category %>"
                                                    >
                                                </td>
                                                <td id="weightTablePoints<%= i + offset %><%= j %>"></td>
                                                <td id="weightTableGrade<%= i + offset %><%= j %>"></td>
                                            </tr>
                                        <% } %>
                                        <script>
                                            function disableInput(checkBoxID, id) {
                                                $("#" + id).find(".disableable").each(function () {
                                                    if ($("#" + checkBoxID).is(":checked")) {
                                                        $(this).val("");
                                                        $(this).addClass("disabled");
                                                        $(this).attr("disabled", "disabled");
                                                    } else {
                                                        $(this).removeClass("disabled");
                                                        $(this).removeAttr("disabled");
                                                    }
                                                });
                                            }

                                            disableInput('check<%= i + offset %>', 'weightsTable<%= i + offset %>');
                                        </script>
                                    <tfoot>
                                        <tr>
                                            <th colspan="4">
                                                <span class="popup">
                                                    <i id="incorrectOverallGrade<%= i + offset %>"
                                                       class="fa fa-exclamation-circle"
                                                       style="margin-left: 0.2rem; vertical-align: middle">
                                                        <span class="popup-bottom-left always-show">
                                                            <% let grade = JSON.parse(gradeData)[i].overall_percent + "%"; %>
                                                            Grade in PowerSchool:
                                                            <nobr><%= grade + " (" + JSON.parse(gradeData)[i].overall_letter + ")" %></nobr>
                                                        </span>
                                                    </i>
                                                </span>
                                                <div style="display:none; color: <%= user.appearance.classColors[i + offset] %>"
                                                     id="weightTableOverallGrade<%= i + offset %>"
                                                     class="weightOverall">
                                                </div>
                                            </th>
                                        </tr>
                                    </tfoot>
                                </table>
                            </form>
                        </div>
                            <hr>
                            <div style="display:flex; justify-content: space-between; align-items: stretch">
                                <div class="addAssignment">
                                    <span class="popup">
                                        <i class="fa fa-plus">
                                            <span class="popup-right">
                                                This button doesn't do anything yet
                                            </span>
                                        </i>
                                    </span>
                                </div>
                                <div class="tableOptions">
                                    <div>Sort By</div>
                                    <select id="sortBy<%= i + offset %>" class="classic" onchange="setSortMethod(this)">
                                        <option value="date">Date</option>
                                        <option value="category">Category</option>
                                    </select>
                                    <span class="popup">
                                        <i style="cursor: pointer; margin: 1rem 0" class="fa fa-sort-amount-asc"
                                           onclick="toggleSortDirection(<%= i + offset %>)">
                                            <span class="popup-top">
                                                Oldest to Newest
                                            </span>
                                        </i>
                                    </span>
                                </div>
                            </div>
                            <table class="table rounded-table class-table text-center" id="table<%= i + offset %>">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Assignment Name</th>
                                        <th>Category</th>
                                        <th>Score</th>
                                        <th>Assignment Percent</th>
                                        <th>Overall Grade</th>
                                        <th class="popup resetTab">
                                            <i id="resetAll<%= i + offset %>"
                                               class="fa fa-undo"
                                               style="color: #888888; margin: 0; cursor: pointer; visibility:hidden"
                                               onclick="{resetAll(this);}"
                                            >
                                                <span class="popup-top">
                                                    Revert All
                                                </span>
                                            </i>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% for (let j = 0; j < JSON.parse(gradeData)[i].grades.length; j++) { %>
                                        <tr class="classTableRow<%= i + offset %>">
                                            <td class="assignmentDate<%= i + offset %>"></td>
                                            <td>
                                                <div class="excludeToggle"
                                                     style="display: flex; justify-content: space-between; align-items: center">
                                                    <div class="assignmentName<%= i + offset %>"></div>
                                                    <div style="display: flex; justify-content: center; flex-flow: column; align-items: center">
                                                        <i class="fa fa-ban exclude<%= i + offset %>"
                                                           style="cursor: pointer"
                                                           onclick="toggleExclude(this);">
                                                            <label style="cursor: pointer !important; margin: 0; display: block; font-weight: bolder; font-size: 0.5rem">Exclude</label>
                                                        </i>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="assignmentCategory<%= i + offset %>">
                                                <select class="minimal category<%= i + offset %>"
                                                        style="margin: 0"></select>
                                            </td>
                                            <td class="form-weights form-signin form-group assignmentScore<%= i + offset %>">
                                                <div style="display: flex; justify-content: center; align-items: center">
                                                    <input class="form-control text-view dynamic-input gotten<%= i + offset %>"
                                                           type="number" step="0.001"
                                                           style="padding: 0; width: 0 !important; "
                                                           placeholder="--"
                                                           onblur="{updatePointsGotten(this);}">
                                                    /<input style="padding: 0; width: 0 !important; "
                                                            class="form-control text-view dynamic-input possible<%= i + offset %>"
                                                            placeholder="--"
                                                            onblur="{updatePointsPossible(this);}">
                                                </div>
                                            </td>
                                            <td class="assignmentPercent<%= i + offset %>"></td>
                                            <td class="assignment<%= i + offset %>"></td>
                                            <td class="popup resetTab">
                                                <i class="fa fa-undo resetRow<%= i + offset %>"
                                                   style="color: #888888; margin: 0; cursor: pointer; visibility:hidden"
                                                   onclick="{resetRow(this);}"
                                                >
                                                    <span class="popup-top">
                                                        Revert to Original
                                                    </span>
                                                </i>
                                            </td>
                                        </tr>
                                    <% } %>
                                </tbody>
                            </table>
                            <table>
                                <!-- This is a sample row to be copied and create category tables -->
                                <tr class="sample categoryClassTableRow<%= i + offset %>">
                                    <td class="categoryAssignmentDate<%= i + offset %>"></td>
                                    <td>
                                        <div class="excludeToggle"
                                             style="display: flex; justify-content: space-between; align-items: center">
                                            <div class="categoryAssignmentName<%= i + offset %>"></div>
                                            <div style="display: flex; justify-content: center; flex-flow: column; align-items: center">
                                                <i class="fa fa-ban categoryExclude<%= i + offset %>"
                                                   style="cursor: pointer"
                                                   onclick="toggleExclude(this);">
                                                    <label style="cursor: pointer !important; margin: 0; display: block; font-weight: bolder; font-size: 0.5rem">Exclude</label>
                                                </i>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="categoryAssignmentCategory<%= i + offset %>">
                                        <select class="minimal categoryCategory<%= i + offset %>"
                                                style="margin: 0"></select>
                                    </td>
                                    <td class="form-weights form-signin form-group categoryAssignmentScore<%= i + offset %>">
                                        <div style="display: flex; justify-content: center; align-items: center">
                                            <input class="form-control text-view dynamic-input categoryGotten<%= i + offset %>"
                                                   type="number" step="0.001"
                                                   style="padding: 0; width: 0 !important; "
                                                   placeholder="--"
                                                   onblur="{updatePointsGotten(this);}">
                                            /<input style="padding: 0; width: 0 !important; "
                                                    class="form-control text-view dynamic-input categoryPossible<%= i + offset %>"
                                                    placeholder="--"
                                                    onblur="{updatePointsPossible(this);}">
                                        </div>
                                    </td>
                                    <td class="categoryAssignmentPercent<%= i + offset %>"></td>
                                    <td class="categoryAssignment<%= i + offset %>"></td>
                                    <td class="popup resetTab">
                                        <i class="fa fa-undo categoryResetRow<%= i + offset %>"
                                           style="color: #888888; margin: 0; cursor: pointer; visibility:hidden"
                                           onclick="{resetRow(this);}"
                                        >
                                            <span class="popup-top">
                                                Revert to Original
                                            </span>
                                        </i>
                                    </td>
                                </tr>
                            </table>
                            <% for (let j = 0; j < Object.keys(JSON.parse(weightData)[JSON.parse(gradeData)[i].class_name].weights).length; j++) { %>
                                <% let category = Object.keys(JSON.parse(weightData)[JSON.parse(gradeData)[i].class_name].weights)[j] %>
                                <table class="table rounded-table class-table text-center categoryTable<%= i + offset %>">
                                    <thead>
                                        <tr>
                                            <th colspan="6"><%= category %></th>
                                            <th class="popup resetTab">
                                                <i class="resetCategory<%= i + offset %> fa fa-undo"
                                                   style="color: #888888; margin: 0; cursor: pointer; visibility:hidden"
                                                   onclick="{resetCategory(this);}"
                                                >
                                                    <span class="popup-top">
                                                        Revert Category
                                                    </span>
                                                </i>
                                            </th>
                                        </tr>
                                        <tr>
                                            <th>Date</th>
                                            <th>Assignment Name</th>
                                            <th>Category
                                                <span class="popup">
                                                    <i class="fa fa-question-circle">
                                                        <span class="popup-right">Editing categories is not yet
                                                            supported in
                                                            this sorting mode.</span>
                                                    </i>
                                                </span></th>
                                            <th>Score</th>
                                            <th>Assignment Percent</th>
                                            <th>Category Grade</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% let categoryGrades = JSON.parse(gradeData)[i].grades.filter(g => g.category === category); %>
                                        <% for (let k = 0; k < categoryGrades.length; k++) { %>
                                            <tr class="categoryClassTableRow<%= i + offset %>">
                                                <td class="categoryAssignmentDate<%= i + offset %>"></td>
                                                <td>
                                                    <div class="excludeToggle"
                                                         style="display: flex; justify-content: space-between; align-items: center">
                                                        <div class="categoryAssignmentName<%= i + offset %>"></div>
                                                        <div style="display: flex; justify-content: center; flex-flow: column; align-items: center">
                                                            <i class="fa fa-ban categoryExclude<%= i + offset %>"
                                                               style="cursor: pointer"
                                                               onclick="toggleExclude(this);">
                                                                <label style="cursor: pointer !important; margin: 0; display: block; font-weight: bolder; font-size: 0.5rem">Exclude</label>
                                                            </i>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td class="categoryAssignmentCategory<%= i + offset %>">
                                                    <select class="minimal categoryCategory<%= i + offset %>"
                                                            style="margin: 0"></select>
                                                </td>
                                                <td class="form-weights form-signin form-group categoryAssignmentScore<%= i + offset %>">
                                                    <div style="display: flex; justify-content: center; align-items: center">
                                                        <input class="form-control text-view dynamic-input categoryGotten<%= i + offset %>"
                                                               type="number" step="0.001"
                                                               style="padding: 0; width: 0 !important; "
                                                               placeholder="--"
                                                               onblur="{updatePointsGotten(this);}">
                                                        /<input style="padding: 0; width: 0 !important; "
                                                                class="form-control text-view dynamic-input categoryPossible<%= i + offset %>"
                                                                placeholder="--"
                                                                onblur="{updatePointsPossible(this);}">
                                                    </div>
                                                </td>
                                                <td class="categoryAssignmentPercent<%= i + offset %>"></td>
                                                <td class="categoryAssignment<%= i + offset %>"></td>
                                                <td class="popup resetTab">
                                                    <i class="fa fa-undo categoryResetRow<%= i + offset %>"
                                                       style="color: #888888; margin: 0; cursor: pointer; visibility:hidden"
                                                       onclick="{resetRow(this);}"
                                                    >
                                                        <span class="popup-top">
                                                            Revert to Original
                                                        </span>
                                                    </i>
                                                </td>
                                            </tr>
                                        <% } %>
                                    </tbody>
                                </table>
                            <% } %>
                    </span>
                <% } else {
                    offset--;
                } %>
            <% } %>
        </div>
<% } %>
<!-- Custom JavaScript -->
<script>

    let refreshing;
    let shortcutsEnabled = true;

    function setupColorStuff() {
        // Class links
        $.makeArray($(".nav-link")).slice(1).forEach((x, i) => $(x).css('color', colors[i]));

        // Overview Chart
        $.makeArray($(".overview")).forEach((x, i) => $(x).css('color', colors[i % colors.length]));

        // Sliders
        $.makeArray($(".classSlider")).forEach((x, i) => $(x).css('color', colors[i]));

        // Overall Grades in Weight Tables
        $.makeArray($(".weightOverall")).forEach((x, i) => $(x).css('color', colors[i]));

        // Render all charts
        renderAllCharts();
    }

    function refresh(changedClassIndex) {
        // Trying to be efficient and only change affected data
        clearTimeout(refreshing);
        parseData(changedClassIndex);
        setupWeightsTables(changedClassIndex);
        setupOverviewTable(changedClassIndex);
        setupClassTables(changedClassIndex);
        setupGPADisplay();
        setupIncorrectGradeMessages(changedClassIndex);
        setPointBasedWeights(changedClassIndex);
        renderAllCharts(changedClassIndex);
    }

    function refreshWithoutReload(doItNow = false, changedClassIndex) {
        if (doItNow) {
            if (refreshing) {
                clearTimeout(refreshing);
            }
            refresh(changedClassIndex);
        } else {
            if (refreshing) {
                clearTimeout(refreshing);
            }
            refreshing = setTimeout(() => {
                refresh(changedClassIndex);
            }, 400);
        }
    }

    let user = <%- userRef %>;
    let data = <%- gradeData %>;
    let weights = <%- weightData %>;
    let relClassData = <%- relevantClassData %>;
    let chartData = [];
    let parsedData = [];
    let categorySortedData = [];
    let tempData = {};
    let unobtainedWeights = {};
    let tempWeights = {};
    let currentPage = (isNaN(parseInt(sessionStorage.getItem("currentPage"))) ? -1 : parseInt(sessionStorage.getItem("currentPage")));
    let cardsDisplayed = [];
    let charts = [];
    let currentTab = 1;
    let maxTab = $(".tabcontent").length;
    let darkMode;
    let colors = user.appearance.classColors;
    let darkModeStart = user.appearance.darkModeStart || 18;
    let darkModeFinish = user.appearance.darkModeFinish || 7;

    if (!user.appearance.showNonAcademic) {
        colors = colors.filter(color => relClassData[data[colors.indexOf(color)].class_name].classType !== "non-academic");
        data = data.filter(grade => relClassData[grade.class_name].classType !== "non-academic");
        weights = Object.fromEntries(Object.entries(weights).filter(([className]) => relClassData[className].classType !== "non-academic"));
    }

    // This should only happen once
    let dateSort = [];
    let categorySort = [];
    refreshWithoutReload(true);
    setupWeightsTableListeners();
    setupInputListeners();
    // setupPopups();

    let changeTransition;
    let theme = user.appearance.theme;
    let checkingTheme;
    if (theme === "auto") {
        darkMode = (user.appearance.theme === "dark" || (user.appearance.theme === "auto" && (((user.appearance.darkModeStart < user.appearance.darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= user.appearance.darkModeStart - (isDST() ? (user.appearance.darkModeStart === 0 ? -23 : 1) : 0)) && ((Date.now() / 1000 / 3600 - 8) % 24) < user.appearance.darkModeFinish - (isDST() ? (user.appearance.darkModeFinish === 1 ? -23 : 1) : 0))) || ((user.appearance.darkModeStart > user.appearance.darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= user.appearance.darkModeStart - (isDST() ? (user.appearance.darkModeStart === 0 ? -23 : 1) : 0)) || ((Date.now() / 1000 / 3600 - 8) % 24) < user.appearance.darkModeFinish - (isDST() ? (user.appearance.darkModeFinish === 1 ? -23 : 1) : 0))))));
        checkTime();
    } else {
        darkMode = theme === "dark";
    }
    if (user.alerts.lastUpdated.length !== 0) {
        try {
            renderAllCharts();
        } catch (e) {
        }
    }
    try {
        showPage(currentPage);
        sessionStorage.setItem("currentPage", currentPage);
    } catch (e) {
        currentPage = -1;
        try {
            showPage(-1);
            sessionStorage.setItem("currentPage", currentPage);
        } catch (e) {
        }
    }
    if (user.schoolPassword) {
        $("#syncGradesDiv").hide();
        $("#gradeSyncDiv").show();
        checkUpdateBackground();
    } else {
        $("#gradeSyncDiv").hide();
        $("#syncGradesDiv").show();
        $(".updateGradesMessage").find(".messageTxt").text("GradeSync is not enabled");
        showLatest(false);
    }
    document.getElementById("darkModeStart").setAttribute("placeholder", (darkModeStart === 0 ? "12" : darkModeStart > 12 ? (darkModeStart - 12).toString() : darkModeStart.toString()));
    document.getElementById("darkModeFinish").setAttribute("placeholder", (darkModeFinish === 24 ? "12" : darkModeFinish > 12 ? (darkModeFinish - 12).toString() : darkModeFinish.toString()));

    function isDST() {
        return Math.max(new Date(new Date(Date.now()).getFullYear(), 0, 1).getTimezoneOffset(), new Date(new Date(Date.now()).getFullYear(), 6, 1).getTimezoneOffset()) !== new Date(Date.now()).getTimezoneOffset();
    }

    function setAutoTheme() {
        if (theme !== "auto") {
            if (checkingTheme) {
                clearInterval(checkingTheme);
            }
            return;
        }
        darkModeStart = parseInt(darkModeStart);
        darkModeFinish = parseInt(darkModeFinish);
        //console.log("Start, finish, theme", darkModeStart, darkModeFinish, theme);
        //console.log(((Date.now() / 1000 / 3600 - 8) % 24) >= darkModeStart);
        if (theme === "dark" || (theme === "auto" && (((darkModeStart < darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= darkModeStart - (isDST() ? (darkModeStart === 0 ? -23 : 1) : 0)) && ((Date.now() / 1000 / 3600 - 8) % 24) < darkModeFinish - (isDST() ? (darkModeFinish === 1 ? -23 : 1) : 0))) || ((darkModeStart > darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= darkModeStart - (isDST() ? (darkModeStart === 0 ? -23 : 1) : 0)) || ((Date.now() / 1000 / 3600 - 8) % 24) < darkModeFinish - (isDST() ? (darkModeFinish === 1 ? -23 : 1) : 0)))))) {
            let oldDarkMode = document.getElementById("pageStyle").getAttribute("href") === "public/css/dark_mode.css";
            darkMode = true;
            if (darkMode !== oldDarkMode) {
                clearTimeout(changeTransition);
                document.getElementById("fade").disabled = false;
                document.getElementById("pageStyle").setAttribute("href", "public/css/dark_mode.css");
                renderAllCharts();
                $(".navbar-brand img").attr("src", "/public/resources/dark_mode/logo.png");
                $(".navbar").removeClass("navbar-light").addClass("navbar-dark");
                setTimeout(() => {
                    document.getElementById("fade").disabled = true;
                }, 2000);
            }
        } else {
            let oldDarkMode = document.getElementById("pageStyle").getAttribute("href") === "public/css/dark_mode.css";
            darkMode = false;
            if (darkMode !== oldDarkMode) {
                clearTimeout(changeTransition);
                document.getElementById("fade").disabled = false;
                document.getElementById("pageStyle").setAttribute("href", "public/css/light_mode.css");
                renderAllCharts();
                $(".navbar-brand img").attr("src", "/public/resources/light_mode/logo.png");
                $(".navbar").removeClass("navbar-dark").addClass("navbar-light");
                setTimeout(() => {
                    document.getElementById("fade").disabled = true;
                }, 2000);
            }
        }
    }

    async function checkTime() {
        if (checkingTheme) {
            clearInterval(checkingTheme);
        }
        setAutoTheme();
        checkingTheme = window.setInterval(function () {
            setAutoTheme();
        }, 100);
    }

    async function checkUpdateBackground() {
        let checking = window.setInterval(function () {
            $.get("/checkUpdateBackground", function (data, status) {
                if (status === "success") {
                    if (data === "Sync Complete!") {
                        clearInterval(checking);
                        if (cardsDisplayed.length === 0 || cardsDisplayed[cardsDisplayed.length - 1] === "updateGradesDisplay") {
                            $(".updateGradesMessage").find(".messageTxt").text("Refreshing...");
                            setTimeout(() => window.reload(), 400);
                        } else {
                            $(".updateGradesMessage").find(".messageTxt").css("cursor", "pointer").attr("onclick", "window.reload()").find(".messageTxt").text("Click here to refresh");
                        }
                    } else if (data === "Already Synced!") {
                        clearInterval(checking);
                        showLatest(false);
                        $(".updateGradesMessage").find(".messageTxt").text("Synced successfully.");
                        setupLastUpdated();
                    } else if (data === "Did not sync") {
                        $(".updateGradesMessage").find(".messageTxt").text("Syncing...");
                    } else if (data === "Cannot access grades.") {
                        $("#syncNoData").show();
                        clearInterval(checking);
                        showLatest(false);
                        $(".updateGradesMessage").find(".messageTxt").text(data);
                    } else if (data === "Sync Failed.") {
                        $("#syncFailure").show();
                        clearInterval(checking);
                        $(".updateGradesMessage").find(".messageTxt").text(data);
                        showLatest(false);
                    } else if (data === "Not syncing") {
                        $(".updateGradesMessage").find(".messageTxt").text("Never Synced");
                        clearInterval(checking);
                    }
                }
            });
        }, 1000);
    }

    function disableScrolling() {
        $("body").addClass("no-scroll");
    }

    function enableScrolling() {
        $("body").removeClass("no-scroll");
    }

    function setupGPADisplay() {
        $("#GPA-display").text(getOverallGPA);
    }

    function setupIncorrectGradeMessages(classIndex) {
        $("#incorrectGPA").hide();
        $("#GPA-display").removeClass("ignored");
        for (let i = 0; i < data.length; i++) {
            if (!classIndex || classIndex === i) {
                let realOverallGrade = data[i].overall_percent;
                let realOverallLetter = data[i].overall_letter;
                let calculatedOverallGrade = getOverallGrade(i);
                let correctDecimalPlaces = getOverallGrade(i).toFixed(countDecimals(realOverallGrade));
                let calculatedOverallLetter = getLetterGrade(calculatedOverallGrade);
                if (correctDecimalPlaces != realOverallGrade || calculatedOverallLetter !== realOverallLetter) {
                    $("#incorrectOverviewGrade" + i).css("display", "inline");
                    $("#incorrectOverallGrade" + i).css("display", "inline");
                    $("#overviewChart" + i).addClass("ignored");
                } else {
                    $("#incorrectOverviewGrade" + i).hide();
                    $("#incorrectOverallGrade" + i).hide();
                    $("#overviewChart" + i).removeClass("ignored");
                }

                // GPA will only be different if the actual letter is different
                let strippedCalculatedLetter = calculatedOverallLetter.substring(0, 1);
                let strippedRealLetter = realOverallLetter.substring(0, 1);
                if (strippedCalculatedLetter !== strippedRealLetter) {
                    $("#incorrectGPA").css("display", "inline");
                    $("#GPA-display").addClass("ignored");
                }
            }
        }
    }

    function countDecimals(value) {
        if (Math.floor(value) === value) {
            return 0;
        }
        return value.toString().split(".")[1].length || 0;
    }

    function getOverallGPA() {
        let GPA = 0.0;
        let numClasses = data.length;
        for (let i = 0; i < data.length; i++) {
            let className = data[i].class_name;
            let classType = relClassData[className]["classType"];
            if (classType === "ap" || classType === "honors") {
                GPA += 1;
            }
            if (classType !== "non-academic") {
                GPA += getGPA(getOverallGrade(i));
            } else {
                numClasses--;
            }
        }
        GPA /= numClasses;
        return GPA.toFixed(2);
    }

    function getGPA(grade) {
        let letterGrade = getLetterGrade(grade).substring(0, 1);
        if (letterGrade === "A") {
            return 4;
        } else if (letterGrade === "B") {
            return 3;
        } else if (letterGrade === "C") {
            return 2;
        } else if (letterGrade === "D") {
            return 1;
        }
        return 0;
    }

    function getTotalWeight(classIndex) {
        let className = data[classIndex].class_name;
        let classWeights = Object.values(weights[className]["weights"]);
        let totalWeight = 0;
        let classCategories = Object.keys(weights[className]["weights"]);
        for (let i = 0; i < classWeights.length; i++) {
            if (getCategoryGottenAndPossible(classIndex, classCategories[i]).possible !== 0) {
                totalWeight += Number(classWeights[i]);
            }
        }
        return totalWeight;
    }

    function setPointBasedWeights(classIndex) {
        for (let i = 0; i < data.length; i++) {
            if (!classIndex || classIndex === i) {
                let totalPossible = 0;
                let result = {};
                for (let assignment of data[i]["grades"]) {
                    if (assignment["points_gotten"] !== false && assignment["points_possible"] !== false && assignment["exclude"] !== true) {
                        if (!result[assignment.category]) {
                            result[assignment.category] = 0;
                        }
                        result[assignment.category] += assignment["points_possible"];
                        totalPossible += assignment["points_possible"];
                    }
                }
                for (let j = 0; j < Object.keys(result).length; j++) {
                    let weight = Object.keys(result)[j];
                    result[weight] = +(result[weight] / totalPossible * 100).toFixed(4) || 0;
                    $("#weightTableWeight" + i + j + " input").attr("placeholder", result[weight]);
                }
            }
        }
    }

    function getOverallGrade(classIndex) {
        let className = data[classIndex].class_name;
        if (className in weights) {
            let overallGrade = 0;
            if (weights[className]["hasWeights"] === "false" || unobtainedWeights[className]) {
                let points_earned = 0;
                let points_total = 0;
                for (let assignment of data[classIndex]["grades"]) {
                    if (assignment["points_gotten"] !== false && assignment["points_possible"] !== false && assignment["exclude"] !== true) {
                        points_earned += assignment["points_gotten"];
                        points_total += assignment["points_possible"];
                    }
                }
                overallGrade = points_earned / points_total * 100;
            } else {
                let classCategories = Object.keys(weights[className]["weights"]);
                let classWeights = Object.values(weights[className]["weights"]);
                for (let i = 0; i < classCategories.length; i++) {
                    overallGrade += getCategoryGrade(classIndex, classCategories[i]) * classWeights[i] / 100;
                }
                let ratio = 100 / getTotalWeight(classIndex);
                overallGrade *= ratio;
            }
            return overallGrade;
        }
        return null;
    }

    function getLetterGrade(grade) {
        if (grade >= 97.5) {
            return "A+";
        } else if (grade >= 92.5) {
            return "A";
        } else if (grade >= 89.5) {
            return "A-";
        } else if (grade >= 87.5) {
            return "B+";
        } else if (grade >= 82.5) {
            return "B";
        } else if (grade >= 79.5) {
            return "B-";
        } else if (grade >= 77.5) {
            return "C+";
        } else if (grade >= 72.5) {
            return "C";
        } else if (grade >= 69.5) {
            return "C-";
        } else if (grade >= 67.5) {
            return "D+";
        } else if (grade >= 62.5) {
            return "D";
        } else if (grade >= 59.5) {
            return "D-";
        }
        return "F";
    }

    let submittingWeights;

    function setupWeightsTableListeners() {
        for (let i = 0; i < data.length; i++) {
            let className = data[i].class_name;
            let tableCategories = Object.keys(weights[className]["weights"]);
            for (let j = 0; j < tableCategories.length; j++) {
                $("#weightTableWeight" + i + j + " input").blur(() => {
                    clearTimeout(submittingWeights);
                    submittingWeights = setTimeout(() => {
                        resetInputs("#weights" + i);
                        $("#weightTableWeight" + i + j).parents("form").submit();
                    }, 400);
                }).on("keyup", (e) => {
                    e = e || window.event;
                    let keyCode = e.code;
                    if (keyCode === "Enter") {
                        $("#weightTableWeight" + i + j + " input").blur();
                    }
                });
            }
        }
    }

    function setupWeightsTables(classIndex) {
        for (let i = 0; i < data.length; i++) {
            if (!classIndex || classIndex === i) {
                let className = data[i].class_name;
                let tableCategories = Object.keys(weights[className]["weights"]);
                let enableReset = weights[className]["custom"];
                //if custom and both haveWeights, enable reset only if db had diff value to give to user's weights
                //stop reset from showing if custom is due to user having more categories than classes db
                if (enableReset && relClassData[className]["hasWeights"] !== "false") {
                    enableReset = false;
                    let keys = Object.keys(weights[className]["weights"]);
                    for (let i = 0; i < keys.length; i++) {
                        if (weights[className]["hasWeights"] === "false" && keys[i] in relClassData[className]["weights"]) {
                            enableReset = true;
                        } else if ((keys[i] in relClassData[className]["weights"]) && weights[className]["weights"][keys[i]] != relClassData[className]["weights"][keys[i]]) {
                            enableReset = true;
                        }
                    }
                }

                //Hide or Show Reset Button
                if (enableReset) {
                    $("#reset" + i).show();
                    $("#weight-header" + i).css("font-style", "italic");
                } else {
                    $("#reset" + i).hide();
                    $("#weight-header" + i).css("font-style", "normal");
                }

                //Hide or Show Ignoring weights
                if (unobtainedWeights[className]) {
                    $("#ignoringWeights" + i).show();
                } else {
                    $("#ignoringWeights" + i).hide();
                }

                for (let j = 0; j < tableCategories.length; j++) {
                    //Set italics of weights
                    if (enableReset) {
                        $("#weightTableWeight" + i + j).children().css("font-style", "italic");
                    } else {
                        $("#weightTableWeight" + i + j).children().css("font-style", "normal");
                    }

                    //Strikethrough weights if any are missing
                    let input = $("#weightTableWeight" + i + j + " input");
                    if (unobtainedWeights[className] && (!isNaN(parseFloat(input[0].valueAsNumber)))) {
                        input.addClass("ignored");
                    } else {
                        input.removeClass("ignored");
                    }

                    document.getElementById("weightTableCategory" + i + j).textContent = tableCategories[j];
                    let categoryGottenAndPossible = getCategoryGottenAndPossible(i, tableCategories[j]);
                    document.getElementById("weightTablePoints" + i + j).textContent = +categoryGottenAndPossible.gotten.toFixed(4) + ((categoryGottenAndPossible.possible !== 0) ? ("/" + +(categoryGottenAndPossible.possible.toFixed(4))) : "");
                    let categoryGrade = +(+getCategoryGrade(i, tableCategories[j])).toFixed(4);
                    if (categoryGottenAndPossible.possible !== 0) {
                        document.getElementById("weightTableGrade" + i + j).textContent = categoryGrade + "% (" + getLetterGrade(categoryGrade) + ")";
                    } else {
                        document.getElementById("weightTableGrade" + i + j).textContent = "--";
                    }
                }
                let overallGrade = getOverallGrade(i);
                let assignmentData = parsedData[i].rawData;
                let lastIndex = assignmentData.length - 1;
                let delta = +(assignmentData[lastIndex] - assignmentData[lastIndex - 1]).toFixed(5);
                let color;
                if (delta > 0) {
                    delta = "<i class=\"fa fa-caret-up\"></i>" + delta + "%";
                    color = "green";
                } else if (delta < 0) {
                    delta = "<i class=\"fa fa-caret-down\"></i>" + delta + "%";
                    color = "red";
                }
                delta = (delta ? (" <div style=\"display: inline-block; margin-left: 1rem; color: " + color + "\">" + delta + "</div>") : "");
                if (overallGrade) {
                    document.getElementById("weightTableOverallGrade" + i).innerHTML = (+(overallGrade.toFixed(4))).toString() + "% (" + getLetterGrade(overallGrade) + ")" + delta;
                } else {
                    document.getElementById("weightTableOverallGrade" + i).innerHTML = "--" + delta;
                }
                document.getElementById("weightTableOverallGrade" + i).style.display = "inline";

            }
        }
    }

    function adjust(elements, offset, min, max) {

        // Initialize parameters
        offset = offset || 0;
        min = min || 0;
        max = max || Infinity;
        elements.each(function () {
            let element = $(this);

            // Add element to measure pixel length of text
            let id = btoa(Math.floor(Math.random() * Math.pow(2, 64)));
            let tag = $("<span id=\"" + id + "\">" + element.val() + "</span>").css({
                                                                                        "display": "none",
                                                                                        "font-family": element.css("font-family"),
                                                                                        "font-size": element.css("font-size")
                                                                                    }).appendTo("body");

            // Adjust element width on keydown
            function update() {

                // Give browser time to add current letter
                setTimeout(function () {

                    // Prevent whitespace from being collapsed
                    tag.html(element.val().replace(/ /g, "&nbsp;"));

                    // Clamp length and prevent text from scrolling
                    let size = Math.max(min, Math.min(max, tag.width() + offset));
                    if (size < max) {
                        element.scrollLeft(0);
                    }

                    // Apply width to element
                    element.width(size);

                }, 0);
            }

            update();
            element.keydown(update);
        });
    }

    function remToPixels(rem) {
        return rem * parseFloat(getComputedStyle(document.documentElement).fontSize);
    }

    function setSortMethod(element) {
        let classIndex = parseFloat($(element)[0].id.substring(6));
        let method = $(element)[0].selectedOptions[0].value;
        $(element).blur();
        if (method === "category") {
            $($(element)[0].nextElementSibling.children[0]).removeClass('fa-sort-amount-desc').addClass('fa-sort-amount-asc').addClass('disabled').find("span").text("Oldest to Newest");
        } else {
            $($(element)[0].nextElementSibling.children[0]).removeClass(dateSort[classIndex] ? 'fa-sort-amount-desc' : 'fa-sort-amount-asc').addClass(dateSort[classIndex] ? 'fa-sort-amount-asc' : 'fa-sort-amount-desc').removeClass('disabled').find("span").text(dateSort[classIndex] ? 'Oldest to Newest' : 'Newest to Oldest');
        }
        categorySort[classIndex] = method === "category";
        refreshWithoutReload(true, classIndex);
    }

    function updatePointsGotten(element) {
        let classes = $(element)[0].className.split(" ");
        let classIndex;
        let assignmentIndex;
        let test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "gotten");
        if (test.length) {
            classIndex = parseFloat(test[0].match(/\d+$/)[0]);
            assignmentIndex = $.makeArray($(".gotten" + classIndex)).indexOf(element);
            if (!dateSort[classIndex]) {
                assignmentIndex = data[classIndex]["grades"].length - assignmentIndex - 1;
            }
        } else {
            test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "categoryGotten");
            classIndex = parseFloat(test[0].match(/\d+$/)[0]);
            assignmentIndex = categorySortedData[classIndex].originalIndices[$.makeArray($(".categoryGotten" + classIndex)).indexOf(element) - 1];
        }

        let assignment = data[classIndex]["grades"][assignmentIndex];

        // Copy without reference ONLY if it hasn't already been edited
        if (!tempData[classIndex]) {
            tempData[classIndex] = {};
        }
        if (!tempData[classIndex][assignmentIndex]) {
            tempData[classIndex][assignmentIndex] = {};
        }
        if (!tempData[classIndex][assignmentIndex].points_gotten && tempData[classIndex][assignmentIndex].points_gotten !== false) {
            tempData[classIndex][assignmentIndex].points_gotten = assignment.points_gotten;
        }

        let doRefresh = false;
        if (assignment.points_gotten !== parseFloat($(element)[0].value)) {
            doRefresh = true;
        }
        assignment.points_gotten = parseFloat($(element)[0].value);
        if (isNaN(assignment.points_gotten)) {
            assignment.points_gotten = false;
        }
        if ((assignment.points_gotten || assignment.points_gotten === 0) && assignment.points_possible) {
            assignment.grade_percent = +(parseFloat(assignment.points_gotten / assignment.points_possible * 100)).toFixed(2);
        } else {
            assignment.grade_percent = -1;
        }

        if (tempData[classIndex][assignmentIndex].points_gotten === assignment.points_gotten) {
            delete tempData[classIndex][assignmentIndex].points_gotten;
        }
        if (doRefresh) {
            refreshWithoutReload(true, classIndex);
        }
    }

    function updatePointsPossible(element) {
        let classes = $(element)[0].className.split(" ");
        let classIndex;
        let assignmentIndex;
        let test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "possible");
        if (test.length) {
            classIndex = parseFloat(test[0].match(/\d+$/)[0]);
            assignmentIndex = $.makeArray($(".possible" + classIndex)).indexOf(element);
            if (!dateSort[classIndex]) {
                assignmentIndex = data[classIndex]["grades"].length - assignmentIndex - 1;
            }
        } else {
            test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "categoryPossible");
            classIndex = parseFloat(test[0].match(/\d+$/)[0]);
            assignmentIndex = categorySortedData[classIndex].originalIndices[$.makeArray($(".categoryPossible" + classIndex)).indexOf(element) - 1];
        }

        let assignment = data[classIndex]["grades"][assignmentIndex];

        // Copy without reference ONLY if it hasn't already been edited
        if (!tempData[classIndex]) {
            tempData[classIndex] = {};
        }
        if (!tempData[classIndex][assignmentIndex]) {
            tempData[classIndex][assignmentIndex] = {};
        }
        if (!tempData[classIndex][assignmentIndex].points_possible && tempData[classIndex][assignmentIndex].points_possible !== false) {
            tempData[classIndex][assignmentIndex].points_possible = assignment.points_possible;
        }

        let doRefresh = false;
        if (assignment.points_possible !== parseFloat($(element)[0].value)) {
            doRefresh = true;
        }
        assignment.points_possible = parseFloat($(element)[0].value);
        if (isNaN(assignment.points_possible)) {
            assignment.points_possible = false;
        }
        if (assignment.points_possible) {
            assignment.grade_percent = +parseFloat(assignment.points_gotten / assignment.points_possible * 100).toFixed(2);
        } else {
            assignment.grade_percent = -1;
        }

        if (tempData[classIndex][assignmentIndex].points_possible === assignment.points_possible) {
            delete tempData[classIndex][assignmentIndex].points_possible;
        }
        if (doRefresh) {
            refreshWithoutReload(true, classIndex);
        }
    }

    function updateCategory(element) {
        let classes = $(element)[0].className.split(" ");
        let classIndex;
        let assignmentIndex;
        let test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "category");
        if (test.length) {
            classIndex = parseFloat(test[0].match(/\d+$/)[0]);
            assignmentIndex = $.makeArray($(".category" + classIndex)).indexOf(element[0]);
            if (!dateSort[classIndex]) {
                assignmentIndex = data[classIndex]["grades"].length - assignmentIndex - 1;
            }
        } else {
            test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "categoryCategory");
            classIndex = parseFloat(test[0].match(/\d+$/)[0]);
            assignmentIndex = categorySortedData[classIndex].originalIndices[$.makeArray($(".categoryCategory" + classIndex)).indexOf(element[0]) - 1];
        }

        let assignment = data[classIndex]["grades"][assignmentIndex];

        // Copy without reference ONLY if it hasn't already been edited
        if (!tempData[classIndex]) {
            tempData[classIndex] = {};
        }
        if (!tempData[classIndex][assignmentIndex]) {
            tempData[classIndex][assignmentIndex] = {};
        }
        if (!tempData[classIndex][assignmentIndex].category && tempData[classIndex][assignmentIndex].category !== false) {
            tempData[classIndex][assignmentIndex].category = assignment.category;
        }

        assignment.category = $(element).find("option:selected").text();

        if (tempData[classIndex][assignmentIndex].category === assignment.category) {
            delete tempData[classIndex][assignmentIndex].category;
        }
    }

    function resetAll(element) {
        let classIndex = parseFloat($(element)[0].id.substring(8));
        let resetButtons = $(".resetRow" + classIndex);
        for (let i = 0; i < resetButtons.length; i++) {
            resetRow(resetButtons[i], false);
        }
        refreshWithoutReload(false, classIndex);
    }

    function resetCategory(element) {
        let classes = $(element)[0].className.split(" ");
        let classIndex = parseFloat(classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "resetCategory")[0].match(/\d+$/)[0]);
        let categories = Object.keys(weights[Object.keys(weights)[classIndex]]["weights"]);
        let categoryIndex = $.makeArray($(".resetCategory" + classIndex)).indexOf(element);
        $($(".categoryTable" + classIndex)[categoryIndex]).removeClass("unround-top-right");
        let category = categories[categoryIndex];
        let startIndex = categorySortedData[classIndex].assignmentCategories.indexOf(category);
        let numOfCategory = categorySortedData[classIndex].assignmentCategories.filter(x => x === category).length;
        let resetButtons = $(".categoryResetRow" + classIndex);
        for (let i = startIndex + 1; i < startIndex + numOfCategory + 1; i++) {
            resetRow(resetButtons[i], false);
        }
        refreshWithoutReload(false, classIndex);
    }

    function resetRow(element, refresh = true) {
        let classes = $(element)[0].className.split(" ");
        let classIndex;
        let assignmentIndex;
        let test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "resetRow");
        if (test.length) {
            classIndex = parseFloat(test[0].match(/\d+$/)[0]);
            assignmentIndex = $.makeArray($(".resetRow" + classIndex)).indexOf(element);
            if (!dateSort[classIndex]) {
                assignmentIndex = data[classIndex]["grades"].length - assignmentIndex - 1;
            }

            // This means that the row was never changed
            if (!tempData[classIndex] || !tempData[classIndex][assignmentIndex]) {
                $($(".resetRow" + classIndex)[assignmentIndex]).css("visibility", "hidden");
                return;
            }
        } else {
            test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "categoryResetRow");
            classIndex = parseFloat(test[0].match(/\d+$/)[0]);
            assignmentIndex = categorySortedData[classIndex].originalIndices[$.makeArray($(".categoryResetRow" + classIndex)).indexOf(element) - 1];

            // This means that the row was never changed
            if (!tempData[classIndex] || !tempData[classIndex][assignmentIndex]) {
                $($(".categoryResetRow" + classIndex)[assignmentIndex]).css("visibility", "hidden");
                return;
            }
        }

        let assignment = data[classIndex]["grades"][assignmentIndex];

        // Reset all edited values
        for (let key of Object.keys(tempData[classIndex][assignmentIndex])) {
            assignment[key] = tempData[classIndex][assignmentIndex][key];
        }

        // Recalculate grade percent if necessary
        if (Object.keys(tempData[classIndex][assignmentIndex]).includes("points_gotten") || Object.keys(tempData[classIndex][assignmentIndex]).includes("points_possible")) {
            if ((assignment.points_gotten || assignment.points_gotten === 0) && assignment.points_possible) {
                assignment.grade_percent = +parseFloat(assignment.points_gotten / assignment.points_possible * 100).toFixed(2);
            } else {
                assignment.grade_percent = -1;
            }
        }

        delete tempData[classIndex][assignmentIndex];
        if (refresh) {
            refreshWithoutReload(false, classIndex);
        }
    }

    function toggleExclude(element) {
        let classes = $(element)[0].className.split(" ");
        let classIndex;
        let assignmentIndex;
        let test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "exclude");
        if (test.length) {
            classIndex = parseFloat(test[0].match(/\d+$/)[0]);
            assignmentIndex = $.makeArray($(".exclude" + classIndex)).indexOf(element);
            if (!dateSort[classIndex]) {
                assignmentIndex = data[classIndex]["grades"].length - assignmentIndex - 1;
            }
        } else {
            test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "categoryExclude");
            classIndex = parseFloat(test[0].match(/\d+$/)[0]);
            assignmentIndex = categorySortedData[classIndex].originalIndices[$.makeArray($(".categoryExclude" + classIndex)).indexOf(element) - 1];
        }

        let assignment = data[classIndex]["grades"][assignmentIndex];

        // Copy without reference ONLY if it hasn't already been edited
        if (!tempData[classIndex]) {
            tempData[classIndex] = {};
        }
        if (!tempData[classIndex][assignmentIndex]) {
            tempData[classIndex][assignmentIndex] = {};
        }
        if (!tempData[classIndex][assignmentIndex].exclude && tempData[classIndex][assignmentIndex].exclude !== false) {
            tempData[classIndex][assignmentIndex].exclude = assignment.exclude;
        }

        assignment.exclude = !assignment.exclude;
        if (tempData[classIndex][assignmentIndex].exclude === assignment.exclude) {
            delete tempData[classIndex][assignmentIndex].exclude;
        }
        refreshWithoutReload(true, classIndex);
    }

    function setupInputListeners() {
        for (let i = 0; i < parsedData.length; i++) {
            let classScores = $(".assignmentScore" + i);
            for (let j = 0; j < parsedData[i].assignmentNames.length; j++) {
                let inputs = $(classScores[j]).find(".dynamic-input");
                $(inputs[0]).on("keyup", (e) => {
                    e = e || window.event;
                    let keyCode = e.code;
                    if (keyCode === "Enter") {
                        $(inputs[0]).blur();
                    }
                });
                $(inputs[1]).on("keyup", (e) => {
                    e = e || window.event;
                    let keyCode = e.code;
                    if (keyCode === "Enter") {
                        $(inputs[1]).blur();
                    }
                });
                adjust(inputs, 0, remToPixels(2), remToPixels(4));
            }
            classScores = $(".categoryAssignmentScore" + i);
            for (let j = 1; j < categorySortedData[i].assignmentNames.length + 1; j++) {
                let inputs = $(classScores[j]).find(".dynamic-input");
                $(inputs[0]).on("keyup", (e) => {
                    e = e || window.event;
                    let keyCode = e.code;
                    if (keyCode === "Enter") {
                        $(inputs[0]).blur();
                    }
                });
                $(inputs[1]).on("keyup", (e) => {
                    e = e || window.event;
                    let keyCode = e.code;
                    if (keyCode === "Enter") {
                        $(inputs[1]).blur();
                    }
                });
                adjust(inputs, 0, remToPixels(2), remToPixels(4));
            }
        }
    }

    function toggleSortDirection(classIndex) {
        let icon = $($("#section" + classIndex).find(".tableOptions").find("i")[0]);
        if (icon.hasClass("fa-sort-amount-asc")) {
            dateSort[classIndex] = false;
            icon.removeClass("fa-sort-amount-asc").addClass("fa-sort-amount-desc");
            $(icon.find("span")[0]).text("Newest to Oldest");
        } else {
            dateSort[classIndex] = true;
            icon.removeClass("fa-sort-amount-desc").addClass("fa-sort-amount-asc");
            $(icon.find("span")[0]).text("Oldest to Newest");
        }
        setupClassTables(classIndex);
    }

    function setupClassTables(classIndex) {
        for (let i = 0; i < parsedData.length; i++) {
            if (!classIndex || classIndex === i) {
                let categories = Object.keys(weights[Object.keys(weights)[i]]["weights"]);
                if (categorySort[i]) {
                    // Data
                    let assignmentData = categorySortedData[i].rawData;
                    let assignmentDates = categorySortedData[i].assignmentDates;
                    let assignmentNames = categorySortedData[i].assignmentNames;
                    let assignmentCategories = categorySortedData[i].assignmentCategories;
                    let assignmentScoresParsed = categorySortedData[i].assignmentScoresParsed;
                    let assignmentPercents = categorySortedData[i].assignmentPercents;
                    let assignmentExcludes = categorySortedData[i].assignmentExcludes;
                    let modTempData = Object.fromEntries(Object.entries(tempData[i] || {}).map(([key, value]) => [categorySortedData[i].originalIndices.indexOf(parseFloat(key)), value]));

                    // Div References
                    let assignmentDateDivs = $(".categoryAssignmentDate" + i);
                    let assignmentNameDivs = $(".categoryAssignmentName" + i);
                    let assignmentCategoryDivs = $(".categoryAssignmentCategory" + i);
                    let excludeDivs = $(".categoryExclude" + i);
                    let assignmentScoreDivs = $(".categoryAssignmentScore" + i);
                    let resetRowDivs = $(".categoryResetRow" + i);
                    let assignmentPercentDivs = $(".categoryAssignmentPercent" + i);
                    let assignmentOverallDivs = $(".categoryAssignment" + i);
                    let rowDivs = $(".categoryClassTableRow" + i);

                    // Set up visuals
                    let resetCategoryDivs = $(".resetCategory" + i);
                    resetCategoryDivs.css("visibility", "hidden").parents(".resetTab").hide();
                    $("#table" + i).hide();
                    $(".categoryTable" + i).show();

                    // Rows
                    for (let j = 0; j < assignmentData.length; j++) {
                        let assignmentIndex = j + 1; // Plus 1 because of the sample

                        // Set up dates
                        if (!assignmentDateDivs[assignmentIndex]) {

                        }
                        $(assignmentDateDivs[assignmentIndex]).text(assignmentDates[j]);

                        // Set up names
                        $(assignmentNameDivs[assignmentIndex]).text(assignmentNames[j]);

                        // Set up categories
                        let dropdown = $(assignmentCategoryDivs[assignmentIndex]).children("select");

                        // Bind listeners only once
                        if (!$(dropdown).find("option").length) {
                            for (let k = 0; k < categories.length; k++) {
                                dropdown.append($("<option>").text(categories[k]).prop('disabled', true));
                            }
                            // dropdown.on("change", () => {
                            //     updateCategory(dropdown);
                            //     refreshWithoutReload(true, i);
                            //     dropdown.blur();
                            // });
                        }

                        // Select assignment category
                        $(dropdown.find("option")[categories.indexOf(assignmentCategories[j])]).prop("selected", true).prop('disabled', false);

                        // Set up excludes
                        if (assignmentExcludes[j]) {
                            $(excludeDivs[assignmentIndex]).find("label").text("Unexclude").addClass("always-show");
                        } else {
                            $(excludeDivs[assignmentIndex]).find("label").text("Exclude").removeClass("always-show");
                        }

                        // Set up scores
                        let scoreDiv = $(assignmentScoreDivs[assignmentIndex]);
                        let score = assignmentScoresParsed[j];
                        if (score.substring(score.length - 2, score.length) === "--") {
                            score = score.substring(0, score.length - 2);
                        }
                        if (score.substring(0, 2) === "--") {
                            score = score.substring(2);
                        }
                        if (score && score.indexOf("/") === -1) {
                            score += "/0";
                        }
                        score = score.split("/");
                        let inputs = scoreDiv.find(".dynamic-input");
                        $(inputs[0]).val(score[0]);
                        $(inputs[1]).val(score[1]);

                        // Set up reset buttons
                        let resetButton = $(resetRowDivs[assignmentIndex]);
                        if (modTempData[j] && Object.keys(modTempData[j]).length) {
                            $($(".resetCategory" + i)[categories.indexOf(assignmentCategories[j])]).css('visibility', 'visible').parents(".resetTab").show();
                            resetButton.css("visibility", "visible").parents(".resetTab").show();
                            $($(".categoryTable" + i)[categories.indexOf(assignmentCategories[j])]).addClass("unround-top-right");
                        } else {
                            resetButton.css("visibility", "hidden").parents(".resetTab").hide();
                        }

                        // Set up percents
                        let percent = assignmentPercents[j];
                        let letterGrade = "";
                        if (percent === -1 || isNaN(parseFloat(percent))) {
                            percent = "--";
                        } else {
                            letterGrade = " (" + getLetterGrade(percent) + ")";
                            percent += "%";
                        }
                        $(assignmentPercentDivs[assignmentIndex]).html("<div style=\"display: flex; align-items: center; justify-content: center;\"><div>" + percent + "</div><div style=\"margin-left: 0.4rem; font-size: small\">" + letterGrade + "</div></div>");

                        // Set up coloring and gain/loss
                        let display = +isNaN(parseFloat(assignmentData[j]).toFixed(2)) ? +parseFloat(assignmentData[assignmentData.length - 1]).toFixed(2) : parseFloat(assignmentData[j]).toFixed(2);
                        let delta = assignmentCategories[j] === assignmentCategories[j - 1] ? (assignmentData[j] - assignmentData[j - 1]).toFixed(3) : 0;
                        let color;

                        if (delta > 0) {
                            delta = "+" + delta + "% <i class=\"fa fa-long-arrow-up\"></i>";
                            color = "green";
                        } else if (delta < 0) {
                            delta = delta + "% <i class=\"fa fa-long-arrow-down\"></i>";
                            color = "red";
                        } else {
                            delta = "±0.000% <i class=\"fa fa-arrows-v\"></i>";
                            color = "unset";
                        }
                        display = "<div style=\"display: flex; justify-content: space-around; align-items: flex-end;\"><div style=\"display: flex; flex-flow: row; justify-content: center; align-items: center\"><div>" + display + "%" + "</div><div style=\"margin-left: 0.4rem; font-size: small\">(" + getLetterGrade(display) + ")</div></div><div style=\"font-size: small; font-family: 'Maison Mono',monospace\">" + delta + "</div></div>";
                        $(assignmentOverallDivs[assignmentIndex]).css("color", color).html(display);
                        $(assignmentOverallDivs[assignmentIndex]).css("font-weight", "bold");

                        // Set up exclusion
                        if (assignmentExcludes[j]) {
                            $(rowDivs[assignmentIndex]).addClass("excluded");
                            $(rowDivs[assignmentIndex]).find(".dynamic-input").addClass("excluded");
                        } else {
                            $(rowDivs[assignmentIndex]).removeClass("excluded");
                            $(rowDivs[assignmentIndex]).find(".dynamic-input").removeClass("excluded");
                        }
                    }
                } else {
                    // Data
                    let assignmentData = parsedData[i].rawData;
                    let assignmentDates = parsedData[i].assignmentDates;
                    let assignmentNames = parsedData[i].assignmentNames;
                    let assignmentCategories = parsedData[i].assignmentCategories;
                    let assignmentScoresParsed = parsedData[i].assignmentScoresParsed;
                    let assignmentPercents = parsedData[i].assignmentPercents;
                    let assignmentExcludes = parsedData[i].assignmentExcludes;

                    // Div References
                    let assignmentDateDivs = $(".assignmentDate" + i);
                    let assignmentNameDivs = $(".assignmentName" + i);
                    let assignmentCategoryDivs = $(".assignmentCategory" + i);
                    let excludeDivs = $(".exclude" + i);
                    let assignmentScoreDivs = $(".assignmentScore" + i);
                    let resetRowDivs = $(".resetRow" + i);
                    let assignmentPercentDivs = $(".assignmentPercent" + i);
                    let assignmentOverallDivs = $(".assignment" + i);
                    let rowDivs = $(".classTableRow" + i);

                    // Set up visuals
                    $("#resetAll" + i).css("visibility", "hidden").parents(".resetTab").hide();
                    $(".categoryTable" + i).hide();
                    $("#table" + i).removeClass("unround-top-right").show();

                    // Rows
                    for (let j = 0; j < assignmentData.length; j++) {
                        let assignmentIndex = dateSort[i] ? j : assignmentData.length - 1 - j;

                        // Set up dates
                        $(assignmentDateDivs[assignmentIndex]).text(assignmentDates[j]);

                        // Set up names
                        $(assignmentNameDivs[assignmentIndex]).text(assignmentNames[j]);

                        // Set up categories
                        let dropdown = $(assignmentCategoryDivs[assignmentIndex]).children("select");

                        // Bind listeners only once
                        if (!$(dropdown).find("option").length) {
                            for (let k = 0; k < categories.length; k++) {
                                dropdown.append($("<option>").text(categories[k]));
                            }
                            dropdown.on("change", () => {
                                updateCategory(dropdown);
                                refreshWithoutReload(true, i);
                                dropdown.blur();
                            });
                        }

                        // Select assignment category
                        $(dropdown.find("option")[categories.indexOf(assignmentCategories[j])]).prop("selected", true);

                        // Set up excludes
                        if (assignmentExcludes[j]) {
                            $(excludeDivs[assignmentIndex]).find("label").text("Unexclude").addClass("always-show");
                        } else {
                            $(excludeDivs[assignmentIndex]).find("label").text("Exclude").removeClass("always-show");
                        }

                        // Set up scores
                        let scoreDiv = $(assignmentScoreDivs[assignmentIndex]);
                        let score = assignmentScoresParsed[j];
                        if (score.substring(score.length - 2, score.length) === "--") {
                            score = score.substring(0, score.length - 2);
                        }
                        if (score.substring(0, 2) === "--") {
                            score = score.substring(2);
                        }
                        if (score && score.indexOf("/") === -1) {
                            score += "/0";
                        }
                        score = score.split("/");
                        let inputs = scoreDiv.find(".dynamic-input");
                        $(inputs[0]).val(score[0]);
                        $(inputs[1]).val(score[1]);

                        // Set up reset buttons
                        let resetButton = $(resetRowDivs[assignmentIndex]);
                        if (tempData[i] && tempData[i][j] && Object.keys(tempData[i][j]).length) {
                            resetButton.css("visibility", "visible").parents(".resetTab").show();
                            $("#resetAll" + i).css("visibility", "visible").parents(".resetTab").show();
                            $("#table" + i).addClass("unround-top-right");
                        } else {
                            resetButton.css("visibility", "hidden").parents(".resetTab").hide();
                        }

                        // Set up percents
                        let percent = assignmentPercents[j];
                        let letterGrade = "";
                        if (percent === -1 || isNaN(parseFloat(percent))) {
                            percent = "--";
                        } else {
                            letterGrade = " (" + getLetterGrade(percent) + ")";
                            percent += "%";
                        }
                        $(assignmentPercentDivs[assignmentIndex]).html("<div style=\"display: flex; align-items: center; justify-content: center;\"><div>" + percent + "</div><div style=\"margin-left: 0.4rem; font-size: small\">" + letterGrade + "</div></div>");

                        // Set up coloring and gain/loss
                        let display = +isNaN(parseFloat(assignmentData[j]).toFixed(2)) ? +parseFloat(assignmentData[assignmentData.length - 1]).toFixed(2) : parseFloat(assignmentData[j]).toFixed(2);
                        let delta = (assignmentData[j] - assignmentData[j - 1]).toFixed(3);
                        let color;

                        if (delta > 0) {
                            delta = "+" + delta + "% <i class=\"fa fa-long-arrow-up\"></i>";
                            color = "green";
                        } else if (delta < 0) {
                            delta = delta + "% <i class=\"fa fa-long-arrow-down\"></i>";
                            color = "red";
                        } else {
                            delta = "±0.000% <i class=\"fa fa-arrows-v\"></i>";
                            color = "unset";
                        }
                        display = "<div style=\"display: flex; justify-content: space-around; align-items: flex-end;\"><div style=\"display: flex; flex-flow: row; justify-content: center; align-items: center\"><div>" + display + "%" + "</div><div style=\"margin-left: 0.4rem; font-size: small\">(" + getLetterGrade(display) + ")</div></div><div style=\"font-size: small; font-family: 'Maison Mono',monospace\">" + delta + "</div></div>";
                        $(assignmentOverallDivs[assignmentIndex]).css("color", color).html(display);
                        $(assignmentOverallDivs[assignmentIndex]).css("font-weight", "bold");

                        // Set up exclusion
                        if (assignmentExcludes[j]) {
                            $(rowDivs[assignmentIndex]).addClass("excluded");
                            $(rowDivs[assignmentIndex]).find(".dynamic-input").addClass("excluded");
                        } else {
                            $(rowDivs[assignmentIndex]).removeClass("excluded");
                            $(rowDivs[assignmentIndex]).find(".dynamic-input").removeClass("excluded");
                        }
                    }
                }
            }
        }
    }

    function setupOverviewTable() {
        for (let i = 0; i < parsedData.length; i++) {
            let overallGrade = getOverallGrade(i);
            let assignmentData = parsedData[i].rawData;
            let lastIndex = assignmentData.length - 1;
            let delta = +(assignmentData[lastIndex] - assignmentData[lastIndex - 1]).toFixed(5);
            let color;

            if (delta > 0) {
                delta = "<i class=\"fa fa-caret-up\"></i>" + delta + "%";
                color = "green";
            } else if (delta < 0) {
                delta = "<i class=\"fa fa-caret-down\"></i>" + delta + "%";
                color = "red";
            }
            delta = (delta ? (" <div style=\"display: inline-block; font-size: smaller; color: " + color + "\">" + delta + "</div>") : "");
            if (getOverallGrade(i)) {
                document.getElementById("overviewChart" + i).innerHTML = (+(overallGrade.toFixed(4))).toString() + "%" + "<br>" + getLetterGrade(overallGrade) + "<br>" + delta;
            } else {
                document.getElementById("overviewChart" + i).innerHTML = "N/A";
            }
        }
    }

    function getCategoryGottenAndPossible(classIndex, categoryName) {
        let grades = data[classIndex].grades;
        let totalGotten = 0;
        let totalPossible = 0;
        for (let i = 0; i < grades.length; i++) {
            if (!grades[i].exclude && grades[i].category === categoryName) {
                if (grades[i].points_gotten !== false && grades[i].points_possible !== false) {
                    totalGotten += grades[i].points_gotten;
                    totalPossible += grades[i].points_possible;
                }
            }
        }
        return {"gotten": totalGotten, "possible": totalPossible};
    }

    function getCategoryGrade(classIndex, categoryName) {
        let categoryGottenAndPossible = getCategoryGottenAndPossible(classIndex, categoryName);
        let totalGotten = categoryGottenAndPossible.gotten;
        let totalPossible = categoryGottenAndPossible.possible;
        if (totalPossible === 0) {
            return null;
        }
        return totalGotten / totalPossible * 100;
    }

    function parseData(classIndex) {
        /*
         WEIGHTS first
         */
        for (let i = 0; i < data.length; i++) {
            if (!classIndex || classIndex === i) {
                let classData = data[i];
                let className = classData.class_name;
                let localMissingCategories = Object.keys(weights[className]["weights"]).filter(category => !weights[className]["weights"][category] && weights[className]["weights"][category] !== 0);
                delete unobtainedWeights[className];
                if (localMissingCategories.length > 0 && weights[className]["hasWeights"] !== "false") {
                    unobtainedWeights[className] = localMissingCategories;
                }
            }

        }
        /**
         * now grades!
         */
        //Add array to each object in parsedData: one for weights (not needed?), one for missing weights
        //Get data for one class
        for (let i = 0; i < data.length; i++) {
            let categories = Object.keys(weights[Object.keys(weights)[i]]["weights"]);
            if (!classIndex || classIndex === i) {
                //Add sorting vars
                if (!dateSort[i] && dateSort[i] !== false) {
                    dateSort[i] = true;
                }
                if (!categorySort[i] && categorySort[i] !== false) {
                    categorySort[i] = false;
                }

                let classData = data[i];
                let className = classData.class_name;
                let overallGradeSteps = [];
                let excludedGradeSteps = [];
                let categoryGradeSteps = [];
                let categoryGrades = {}; // If category is default
                let totalPossiblesAndGottens = {}; //by category
                let totalWeightValue = 0; // divide by the total weight amount - so even if the final is not entered the grade is still of of 100
                // VERY JANK CHANGE LATER
                let doesntHaveWeights = (className in unobtainedWeights) || (weights[className]["hasWeights"] === "false");
                // console.log(className + " DHW? : " + doesntHaveWeights);
                for (let grade of classData.grades) {
                    let category = grade.category;
                    if (doesntHaveWeights) {
                        category = "default";
                        if (!categoryGrades[grade.category]) {
                            categoryGrades[grade.category] = {
                                totalPossible: false, totalGotten: false
                            }
                        }
                    }
                    try {
                        if (typeof totalPossiblesAndGottens[category] === "undefined" && !grade.exclude && grade.points_possible !== false && grade.points_gotten !== false) {
                            let weightVal = 100;
                            if (!doesntHaveWeights) {
                                weightVal = Number(weights[className]["weights"][category]);
                            }
                            totalPossiblesAndGottens[category] = {
                                totalPossible: false, totalGotten: false, weight: weightVal
                            };
                            totalWeightValue += weightVal;
                        }
                        if (!grade.exclude) {
                            if (grade.points_possible !== false && grade.points_gotten !== false) {
                                totalPossiblesAndGottens[category].totalPossible += grade.points_possible;
                                totalPossiblesAndGottens[category].totalGotten += grade.points_gotten;
                                if (doesntHaveWeights) {
                                    categoryGrades[grade.category].totalPossible += grade.points_possible;
                                    categoryGrades[grade.category].totalGotten += grade.points_gotten;
                                }
                                let overallPercent = 0;
                                for (let [key, value] of Object.entries(totalPossiblesAndGottens)) {
                                    if (value.totalGotten === false || value.totalPossible === false) {
                                        totalWeightValue -= value.weight;
                                        value.weight = 0;
                                        continue;
                                    }
                                    overallPercent += ((value.weight * (value.totalPossible !== 0 ? (value.totalGotten / value.totalPossible) : value.totalGotten)));
                                }
                                let total = (((overallPercent / totalWeightValue) * 100));
                                overallGradeSteps.push(total);
                            } else {
                                overallGradeSteps.push(overallGradeSteps.filter(x => x).slice(-1)[0] || 100);
                            }
                        } else {
                            overallGradeSteps.push(false);
                            excludedGradeSteps.push(overallGradeSteps.filter(x => x).slice(-1)[0] || 100);
                        }
                        if (doesntHaveWeights) {
                            categoryGradeSteps.push((categoryGrades[grade.category].totalGotten / categoryGrades[grade.category].totalPossible * 100) || 100);
                        } else {
                            categoryGradeSteps.push((totalPossiblesAndGottens[category].totalGotten / totalPossiblesAndGottens[category].totalPossible * 100) || 100);
                        }
                    } catch (err) {
                        // console.log(err);
                        // console.log("bad weight input");
                    }
                }
                let assignmentNames = classData.grades.filter(x => !x.exclude).map(x => x.assignment_name);
                let assignmentDates = classData.grades.filter(x => !x.exclude).map(x => x.date);
                let assignmentTimestamps = classData.grades.filter(x => !x.exclude).map(x => new Date(x.date));
                let assignmentPercents = classData.grades.filter(x => !x.exclude).map(x => x.grade_percent);
                let assignmentScoresParsed = classData.grades.filter(x => !x.exclude).map(x => (x.points_gotten === false ? "--" : x.points_gotten) + "/" + (x.points_possible === false ? "--" : x.points_possible));
                let assignmentCategories = classData.grades.filter(x => !x.exclude).map(x => x.category);
                let mixedData = overallGradeSteps.filter(x => x).map((grade, i) => {
                    return {x: assignmentTimestamps[i], y: grade};
                });
                chartData[i] = {
                    assignmentNames: assignmentNames,
                    assignmentDates: assignmentDates,
                    assignmentTimestamps: assignmentTimestamps,
                    assignmentPercents: assignmentPercents,
                    assignmentScoresParsed: assignmentScoresParsed,
                    assignmentCategories: assignmentCategories,
                    mixedData: mixedData
                };
                assignmentNames = classData.grades.map(x => x.assignment_name);
                assignmentDates = classData.grades.map(x => x.date);
                assignmentPercents = classData.grades.map(x => x.grade_percent);
                assignmentScoresParsed = classData.grades.map(x => (x.points_gotten === false ? "--" : x.points_gotten) + (x.points_possible === false ? "" : "/" + x.points_possible));
                assignmentCategories = classData.grades.map(x => x.category);
                let assignmentExcludes = classData.grades.map(x => x.exclude);
                let rawData = overallGradeSteps.map(grade => !grade ? excludedGradeSteps.shift() : grade);
                parsedData[i] = {
                    assignmentNames: assignmentNames,
                    assignmentDates: assignmentDates,
                    assignmentPercents: assignmentPercents,
                    assignmentScoresParsed: assignmentScoresParsed,
                    assignmentCategories: assignmentCategories,
                    assignmentExcludes: assignmentExcludes,
                    rawData: rawData
                };

                // This took forever...I am so proud of it - Joel 06/03/20 10:25PM
                let sortHelper = Array.apply(null, Array(assignmentCategories.length)).map((x, index) => index).sort((a, b) => categories.indexOf(assignmentCategories[a]) - categories.indexOf(assignmentCategories[b]));
                categorySortedData[i] = {
                    assignmentNames: assignmentNames.map((x, index) => assignmentNames[sortHelper[index]]),
                    assignmentDates: assignmentDates.map((x, index) => assignmentDates[sortHelper[index]]),
                    assignmentPercents: assignmentPercents.map((x, index) => assignmentPercents[sortHelper[index]]),
                    assignmentScoresParsed: assignmentScoresParsed.map((x, index) => assignmentScoresParsed[sortHelper[index]]),
                    assignmentCategories: assignmentCategories.map((x, index) => assignmentCategories[sortHelper[index]]),
                    assignmentExcludes: assignmentExcludes.map((x, index) => assignmentExcludes[sortHelper[index]]),
                    rawData: categoryGradeSteps.map((x, index) => categoryGradeSteps[sortHelper[index]]),
                    originalIndices: sortHelper
                };
            }
        }
    }

    function renderAllCharts(classIndex) {
        if (data && data.length) {
            renderOverviewChart();
            for (let i = 0; i < data.length; i++) {
                if (!classIndex || classIndex === i) {
                    renderChart(i);
                }
            }
        }
    }

    function resetZoom(id) {
        // After experimenting, any chart without 28 keys does not reset, so rerender it
        if (Object.keys(charts[id + 1]).length !== 28) {
            renderChart(id);
        } else {
            charts[id + 1].resetZoom();
        }
    }

    let hoveredDatasetIndex = -1;

    let running;

    function renderOverviewChart() {
        $("#chart-1").remove();
        $("#chart-container-1").html("<button id=\"reset-zoom-1\" style=\"position: absolute; top: 0; right: 0; height: fit-content; display:none\" class=\"btn btn-sm\" onclick=\"resetZoom(-1); $(this).hide()\">Reset</button><canvas id=\"chart-1\" class=\"chart\"></canvas>");
        let ctx = document.getElementById("chart-1");
        let dataset = [];
        let _colors = colors;
        if (!data) return;
        for (let i = 0; i < data.length; i++) {
            dataset.push({
                             label: data[i].class_name,
                             backgroundColor: "transparent",
                             pointBackgroundColor: _colors[i],
                             pointBorderColor: "transparent",
                             borderColor: _colors[i],
                             data: chartData[i].mixedData,
                             cubicInterpolationMode: "monotone",
                             spanGaps: false,
                             pointRadius: 3,
                             borderWidth: 3,
                             pointHoverRadius: 7,
                             pointHoverBackgroundColor: _colors[i],
                             pointHoverBorderColor: _colors[i],
                             pointHoverBorderWidth: 2
                         });
        }
        let numRunning = 0;
        charts[0] = new Chart(ctx, {
            type: "line", data: {
                datasets: dataset
            }, options: {
                hover: {
                    mode: "nearest", intersect: false
                }, onHover: function onHover(evt, activeElements) {
                    if (!activeElements || !activeElements.length) {
                        return;
                    }
                    let datasetIndex = activeElements[0]._datasetIndex;
                    let activeDataset = this.data.datasets[datasetIndex];
                    for (let i = 0; i < this.data.datasets.length; i++) {
                        let inactiveDataset = this.data.datasets[i];
                        inactiveDataset.borderWidth = 3;
                        inactiveDataset.pointRadius = 3;
                    }
                    activeDataset.borderWidth = 6;
                    activeDataset.pointRadius = 6;
                    this.update(100);
                    let chart = this;
                    if (numRunning === 0) {
                        clearTimeout(running);
                        numRunning++;
                        running = setTimeout(() => {
                            numRunning--;
                            for (let i = 0; i < chart.data.datasets.length; i++) {
                                let dataset = chart.data.datasets[i];
                                dataset.borderWidth = 3;
                                dataset.pointRadius = 3;
                            }
                            chart.update(1000);
                        }, 6000);
                    }
                }, scales: {
                    xAxes: [{
                        type: "time", time: {
                            unit: "month"
                        }, ticks: {
                            fontColor: (darkMode ? "white" : "black"), fontFamily: "Verdana", fontSize: "13"
                        }, gridLines: {
                            color: (darkMode ? "#555555" : "#CCCCCC")
                        }
                    }], yAxes: [{
                        ticks: {
                            max: 110,
                            min: 70,
                            fontColor: (darkMode ? "white" : "black"),
                            fontFamily: "Verdana",
                            fontSize: "12"
                        }, gridLines: {
                            color: (darkMode ? "#555555" : "#CCCCCC"), drawBorder: false
                        }
                    }]
                }, animation: {
                    easing: "easeOutCubic"
                }, legend: {
                    display: true, position: "top", labels: {
                        fontColor: (darkMode ? "white" : "black"), fontFamily: "Verdana", boxWidth: 20, fontSize: 13
                    }
                }, tooltips: {
                    enabled: true, position: "nearest", intersect: false, displayColors: true, callbacks: {
                        title: function (tooltipItems) {
                            return moment(tooltipItems[0].xLabel).format("MM/DD/YY") + " " + +parseFloat(tooltipItems[0].value).toFixed(2) + "%";
                        }, label: function (tooltipItem) {
                            return ["[" + chartData[tooltipItem.datasetIndex].assignmentCategories[tooltipItem.index] + "] " + chartData[tooltipItem.datasetIndex].assignmentNames[tooltipItem.index] + ((chartData[tooltipItem.datasetIndex].assignmentPercents[tooltipItem.index] !== -1 && chartData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].substring(0, 2) !== "--") ? (" - " + chartData[tooltipItem.datasetIndex].assignmentPercents[tooltipItem.index] + "% ") : (" ")) + ((chartData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].substring(chartData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].length - 2)) !== "/0" ? ("(" + chartData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index] + ")") : ("(" + chartData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].substring(0, chartData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].length - 2) + ")"))];
                        }
                    }
                }, responsive: true, maintainAspectRatio: false, plugins: {
                    zoom: {
                        zoom: {
                            enabled: true, mode: "y", speed: 0.05, onZoom: ({chart}) => {
                                $("#reset-zoom-1").show();

                                // Disable hovering and tooltips to make animation smoother
                                chart.options.hover.mode = null;
                                chart.options.tooltips.enabled = false;
                            }, onZoomComplete: ({chart}) => {
                                chart.options.hover.mode = "nearest";
                                chart.options.tooltips.enabled = true;
                            }
                        }, pan: {
                            enabled: true, mode: "y", speed: 0.05, onPan: ({chart}) => {
                                $("#reset-zoom-1").show();

                                // Disable hovering and tooltips to make animation smoother
                                chart.options.hover.mode = null;
                                chart.options.tooltips.enabled = false;
                            }, onPanComplete: ({chart}) => {
                                chart.options.hover.mode = "nearest";
                                chart.options.tooltips.enabled = true;
                            }
                        }
                    }
                }
            }
        });
    }

    function renderChart(id) {
        $("#chart" + id).remove();
        if (chartData[id].mixedData.length) {
            $("#chart-container" + id).html("<button id=\"reset-zoom" + id + "\" style=\"position: absolute; top: 0; right: 0; height: fit-content; display:none\" class=\"btn btn-sm\" onclick=\"resetZoom(" + id + "); $(this).hide()\">Reset</button><canvas id=\"chart" + id + "\" class=\"chart\"></canvas>");
            let ctx = document.getElementById("chart" + id);
            let _colors = colors;
            charts[id + 1] = new Chart(ctx, {
                type: "line", data: {
                    datasets: [{
                        label: "chartData[id]",
                        backgroundColor: (darkMode ? "rgba(256,256,256,0.05)" : "rgba(0,0,0,0.05)"),
                        pointBackgroundColor: _colors[id],
                        pointBorderColor: _colors[id],
                        borderColor: _colors[id],
                        fill: "start",
                        data: chartData[id].mixedData,
                        cubicInterpolationMode: "monotone",
                        spanGaps: false,
                        pointRadius: 3,
                        borderWidth: 3,
                        pointHoverRadius: 7,
                        pointHoverBackgroundColor: _colors[id],
                        pointHoverBorderColor: _colors[id],
                        pointHoverBorderWidth: 2
                    }]
                }, options: {
                    hover: {
                        mode: "nearest", intersect: false
                    }, scales: {
                        xAxes: [{
                            type: "time", time: {
                                unit: "month"
                            }, ticks: {
                                fontColor: (darkMode ? "white" : "black"), fontFamily: "Verdana", fontSize: "13"
                            }, gridLines: {
                                color: (darkMode ? "#555555" : "#CCCCCC")
                            }
                        }], yAxes: [{
                            ticks: {
                                fontColor: (darkMode ? "white" : "black"), fontFamily: "Verdana", fontSize: "12"
                            }, gridLines: {
                                color: (darkMode ? "#555555" : "#CCCCCC"), drawBorder: false
                            }
                        }]
                    }, animation: {
                        easing: "easeOutCubic"
                    }, legend: {
                        display: false
                    }, tooltips: {
                        enabled: true, position: "nearest", intersect: false, displayColors: false, callbacks: {
                            title: function (tooltipItems, data) {
                                return moment(tooltipItems[0].xLabel).format("MM/DD/YY") + " " + +parseFloat(tooltipItems[0].value).toFixed(4) + "%";
                            }, label: function (tooltipItem, data) {
                                return ["[" + chartData[id].assignmentCategories[tooltipItem.index] + "] " + chartData[id].assignmentNames[tooltipItem.index] + ((chartData[id].assignmentPercents[tooltipItem.index] !== -1 && chartData[id].assignmentScoresParsed[tooltipItem.index].substring(0, 2) !== "--") ? (" - " + chartData[id].assignmentPercents[tooltipItem.index] + "% ") : (" ")) + ((chartData[id].assignmentScoresParsed[tooltipItem.index].substring(chartData[id].assignmentScoresParsed[tooltipItem.index].length - 2)) !== "/0" ? ("(" + chartData[id].assignmentScoresParsed[tooltipItem.index] + ")") : ("(" + chartData[id].assignmentScoresParsed[tooltipItem.index].substring(0, chartData[id].assignmentScoresParsed[tooltipItem.index].length - 2) + ")"))];
                            }
                        }
                    }, responsive: true, maintainAspectRatio: false, plugins: {
                        zoom: {
                            zoom: {
                                enabled: true, mode: "y", speed: 0.05, onZoom: ({chart}) => {
                                    $("#reset-zoom" + id).show();

                                    // Disable hovering and tooltips to make animation smoother
                                    chart.options.hover.mode = null;
                                    chart.options.tooltips.enabled = false;
                                }, onZoomComplete: ({chart}) => {
                                    chart.options.hover.mode = "nearest";
                                    chart.options.tooltips.enabled = true;
                                }
                            }, pan: {
                                enabled: true, mode: "y", speed: 0.05, onPan: ({chart}) => {
                                    $("#reset-zoom" + id).show();

                                    // Disable hovering and tooltips to make animation smoother
                                    chart.options.hover.mode = null;
                                    chart.options.tooltips.enabled = false;
                                }, onPanComplete: ({chart}) => {
                                    chart.options.hover.mode = "nearest";
                                    chart.options.tooltips.enabled = true;
                                }
                            }
                        }
                    }
                }
            });
        } else {
            $("#chart-container" + id).html("<div class=\"chart\" style=\"height: 100%; font-size: 3rem; font-weight: bold;text-align: center; filter: opacity(0.5); line-height: 100%\">No Data</div>");
        }
    }

    function showPage(id) {
        document.getElementById("pageNumber").textContent = id;
        for (let i = -1; i < data.length; i++) {
            document.getElementById("link" + i).classList.remove("active");
        }
        document.getElementById("link" + id).classList.add("active");
        for (let i = -1; i < data.length; i++) {
            document.getElementById("section" + i).style.display = "none";
        }
        document.getElementById("section" + id).style.display = "block";
        sessionStorage.setItem("currentPage", id);
        currentPage = id;
    }

    document.onkeyup = function (e) {
        if ($("input").is(":focus") || !shortcutsEnabled) {
            // Do nothing
        } else if (e.key === "ArrowUp") {
            // up arrow
        } else if (e.key === "ArrowDown") {
            // down arrow
        } else if (e.key === "ArrowLeft") {
            // left arrow
            if (cardsDisplayed.slice(-1)[0] === "settingsCardDisplay") {
                if (currentTab === 1) {
                    openTab(maxTab);
                } else {
                    openTab(currentTab - 1);
                }
            } else if (cardsDisplayed.length === 0) {
                if (currentPage === -1) {
                    showPage(data.length - 1);
                } else {
                    showPage(currentPage - 1);
                }
            }
        } else if (e.key === "ArrowRight") {
            // right arrow
            if (cardsDisplayed.slice(-1)[0] === "settingsCardDisplay") {
                if (currentTab === maxTab) {
                    openTab(1);
                } else {
                    openTab(currentTab + 1);
                }
            } else if (cardsDisplayed.length === 0) {
                if (currentPage === data.length - 1) {
                    showPage(-1);
                } else {
                    showPage(currentPage + 1);
                }
            }
        } else if (e.key === "s") {
            if (cardsDisplayed.includes("settingsCardDisplay")) {
                if (cardsDisplayed.indexOf("settingsCardDisplay") !== cardsDisplayed.length - 1) {
                    showCard("#settingsCardDisplay");
                } else {
                    closeForm("settingsCardDisplay");
                }
            } else {
                showCard("#settingsCardDisplay");
            }
        } else if (e.key === "w") {
            if (cardsDisplayed.includes("latestDisplay")) {
                if (cardsDisplayed.indexOf("latestDisplay") !== cardsDisplayed.length - 1) {
                    showLatest(true);
                } else {
                    closeForm("latestDisplay");
                }
            } else {
                showLatest(true);
            }
        } else if (e.key === "q") {
            if (cardsDisplayed.includes("changelogDisplay")) {
                if (cardsDisplayed.indexOf("changelogDisplay") !== cardsDisplayed.length - 1) {
                    showChangelog();
                } else {
                    closeForm("changelogDisplay");
                }
            } else {
                showChangelog();
            }
        } else if (e.key === "k") {
            if (cardsDisplayed.includes("shortcutsDisplay")) {
                if (cardsDisplayed.indexOf("shortcutsDisplay") !== cardsDisplayed.length - 1) {
                    showCard("#shortcutsDisplay");
                } else {
                    closeForm("shortcutsDisplay");
                }
            } else {
                showCard("#shortcutsDisplay");
            }
        } else {
            //console.log(e.code);
        }
    };

    function isEqual(a, b) {
        let aProps = Object.getOwnPropertyNames(a);
        let bProps = Object.getOwnPropertyNames(b);

        // If number of properties is different,
        // objects are not equivalent
        if (aProps.length != bProps.length) {
            return false;
        }

        for (let i = 0; i < aProps.length; i++) {
            let propName = aProps[i];

            // If values of same property are not equal,
            // objects are not equivalent
            if (a[propName] !== b[propName]) {
                return false;
            }
        }

        // If we made it this far, objects
        // are considered equivalent
        return true;
    }


    //TODO I'm pretty sure the following two functions do the same thing but I'm not sure so I'll keep them for now -- Joel
    function resetWeights(index) {
        let className = data[index].class_name;
        $("#check" + index).prop("checked", relClassData[className]["hasWeights"] === "false");
        disableInput("check" + index, "weightsTable" + index);
        let keys = Object.keys(weights[className]["weights"]);
        for (let i = 0; i < keys.length; i++) {
            if (keys[i] in relClassData[className]["weights"]) {
                $("#weightTableWeight" + index + i + " input").val(relClassData[className]["weights"][keys[i]]);
            } else if (tempWeights[className]) {
                $("#weightTableWeight" + index + i + " input").val(tempWeights[className][keys[i]]);
            }
        }

        let hasWeights = eval(relClassData[className]["hasWeights"]);
        if (eval(weights[className]["hasWeights"]) !== eval(hasWeights)) {
            if (!hasWeights) {
                tempWeights[className] = Object.assign({}, weights[className]["weights"]);
            }
        }
    }

    //Resets inputs to old weight value when exiting point based
    function resetInputs(form) {
        let hasWeights = !($(form).find("input[name=\"hasWeights\"]")).is(":checked");
        let className = data[$(form)[0].id.substring(7)].class_name;
        if (eval(weights[className]["hasWeights"]) != eval(hasWeights)) {
            if (!hasWeights) {
                tempWeights[className] = Object.assign({}, weights[className]["weights"]);
            } else if (tempWeights[className]) {
                for (let i = 0; i < Object.keys(weights[className]["weights"]).length; i++) {
                    let weight = $("#weightTableWeight" + $(form)[0].id.substring(7) + i + " input");
                    weight.val(tempWeights[className][Object.keys(tempWeights[className])[i]]);
                }
            }
        }
    }

    $(function initAjaxFormPosts() {
        if ($("form.form-weights").length > 0) {
            $("form.form-weights").each(function () {
                let form = $(this);
                $(form).submit(function (event) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                    let hasWeights = !($(form).find("input[name=\"hasWeights\"]")).is(":checked");
                    let className = data[$(form)[0].id.substring(7)].class_name;

                    let weightData = $(form).serializeArray();
                    let weightURI = {};
                    jQuery.map(weightData, function (n, i) {
                        if (n.name !== "hasWeights") {
                            weightURI[n.name] = isNaN(parseFloat(n.value)) ? null : parseFloat(n.value);
                        }
                    });
                    if (isEqual(weights[className]["weights"], weightURI) && ((weights[className]["hasWeights"] === "true") === hasWeights)) {
                        return;
                    }
                    weightURI = encodeURIComponent(JSON.stringify(weightURI));
                    className = encodeURI(className);
                    hasWeights = encodeURI(hasWeights);
                    let formData = "className=" + className + "&hasWeights=" + hasWeights + "&newWeights=" + weightURI;

                    $.ajax({
                               type: "POST", url: $(form).attr("action"), data: formData
                           }).done((data) => {
                        // Make sure that the formMessages div has the alert-success class.
                        className = decodeURI(className);
                        weights[className]["custom"] = data.includes("Custom");
                        for (let i = 0; i < Object.keys(weights[className]["weights"]).length; i++) {
                            let weight = $("#weightTableWeight" + $(form)[0].id.substring(7) + i + " input");
                            if (weight[0].value) {
                                weight.addClass("text-view");
                                weight.css("border-color", "unset");
                            } else {
                                weight.removeClass("text-view");
                                weight.css("border-color", "lightcoral");
                            }
                        }
                        if (weightData[0].value === "on") {
                            weights[className]["hasWeights"] = "false";
                            setPointBasedWeights();
                        } else {
                            weights[className]["hasWeights"] = "true";
                            if (weightData.length === 0) {
                                return;
                            }
                            for (let weight of weightData) {
                                weights[className]["weights"][weight.name] = parseFloat(weight.value);
                            }
                        }
                        refreshWithoutReload();
                    });
                });
            });
        }
    });

    // Get the navbar
    let navbar = document.getElementById("classLinks");
    let sticky, height;

    if (navbar) {
        // Get the offset position of the navbar
        sticky = navbar.offsetTop - $(".navbar")[0].offsetTop;

        // Get the height of the navbar
        height = navbar.offsetHeight + parseInt(getComputedStyle(navbar).marginBottom);

        function stickyNavbar() {
            if (window.pageYOffset >= sticky) {
                $(".container").css("padding-top", height);
                navbar.classList.add("sticky");
            } else {
                navbar.classList.remove("sticky");
                $(".container").css("padding-top", "unset");
            }
        }

        // Do it once on load
        stickyNavbar();
        // When the user scrolls the page
        window.onscroll = stickyNavbar;
    }

    window.onresize = () => {
        renderAllCharts();

        if (navbar) {
            navbar.classList.remove("sticky");
            disableScrolling();

            // Get the offset position of the navbar
            sticky = navbar.offsetTop - $(".navbar")[0].offsetTop;

            enableScrolling();

            // Get the height of the navbar
            height = navbar.offsetHeight + parseInt(getComputedStyle(navbar).marginBottom);
        }

        // Reopen all cards
        let temp = cardsDisplayed;
        temp.forEach(card => {
            if (card === "changelogDisplay") {
                showChangelog();
            } else if (card === "latestDisplay") {
                showLatest(true);
            } else {
                showCard("#" + card);
            }
        });
    };

</script>
</body>
</html>
