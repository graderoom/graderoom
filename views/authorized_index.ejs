<!doctype html>
<html>
<head>
    <title>Graderoom</title>
    <link rel="icon" href="../public/resources/common/icon.png">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat:500&display=swap">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/chart.js@2.8.0/dist/Chart.min.css">
    <% if (user.darkMode) { %>
        <link rel="stylesheet" type="text/css" href="public/css/dark_mode.css">
    <% } else { %>
        <link rel="stylesheet" type="text/css" href="public/css/light_mode.css">
    <% } %>
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
    
    <!-- Navbar -->
    <% include partials/user/navbar.ejs %>

    <ul class="mx-5 my-3 nav nav-justified" style="border-bottom: 2px solid #999999; color: #BBBBBB;" >
        <li class="nav-item active" id="link-1">
            <a class="nav-link" onclick="showPage(-1)">Overview</a>
        </li>
        <% for (let i = 0; i<JSON.parse(gradeData).length; i++) { %>
            <li class="nav-item" id="link<%=i%>">
                <a class="nav-link" onclick="showPage(<%=i%>)"><%=(JSON.parse(gradeData)[i].class_name)%></a>
            </li>
        <% } %>
    </ul>

    <!-- Main Screen -->
    <div class="container">
        <!-- Messages -->
        <% if (updateGradesMessageSuccess.length > 0) { %>
            <br>
            <div class="alert alert-success"><%= updateGradesMessageSuccess %></div>
        <% } else if (updateGradesMessageFail.length > 0) { %>
            <br>
            <div class="alert alert-danger"><%= updateGradesMessageFail %></div>
        <% } else { %>
            <br>
        <% } %>

        <% for (let i = 0; i<JSON.parse(gradeData).length; i++) { %>
            <div id="chart-container<%=i%>" class="chart-container" style="position: relative; height:40vh; width:50vw;margin: 0 auto;">
                <canvas id="chart<%=i%>" class="chart" style="width:50%; margin: auto;"></canvas>
            </div>
        <% } %>

        <% for (let i = 0; i<JSON.parse(gradeData).length; i++) { %>
        <span id="table-container<%=i%>">
            <hr>
            <table class="table">
                <thead>
                <tr>
                    <th style="width:25%;">Assignment Name</th>
                    <th style="width:25%;">Date</th>
                    <th style="width:25%;">Category</th>
                    <th style="width:25%;">Assignment Percent</th>
                    <th style="width:25%;">Score</th>
                </tr>
                </thead>

                <% for (let grade of JSON.parse(gradeData)[i].grades) { %>
                    <tr>
                        <td><%= grade.assignment_name%> </td>
                        <td><%= grade.date%> </td>
                        <td><%= grade.category%> </td>
                        <td><%= grade.grade_percent%> </td>
                        <td><%= grade.points_gotten%>/<%= grade.points_possible%></td>
                    </tr>
                <% } %>
            </table>
        </span>
        <% } %>


        <!-- JavaScript Imports -->
        <script src="https://cdn.jsdelivr.net/npm/moment@2.24.0/moment.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0/dist/Chart.min.js"></script>

        <!-- Custom JavaScript -->
        <script>
            let data = <%- gradeData %>;

            //Array of objects for each class. 
            //Each object has individual arrays for different data (overallgrades, timestamps,...)
            let parsedData = [];

            parseData();

            function parseData()
            {
                //Get data for one class
                for (let classData of data) 
                {
                    // Parse Overall Grade Steps
                    let overallGradeSteps = [];
                    let totalPossiblesAndGottens = {}; //by category
                    let totalWeightValue = 0; // divide by the total weight amount - so even if the final is not entered the grade is still of of 100
                    let doesntHaveWeights = Object.entries(classData.weights).length === 0 && classData.weights.constructor === Object
                    for (let grade of classData.grades) {
                        let category = grade.category;
                        if (doesntHaveWeights) {
                            category = 'default';
                        }
                        try {
                            if (typeof totalPossiblesAndGottens[category] === 'undefined') {
                                let weightVal = classData.weights[category];
                                if (doesntHaveWeights) {
                                    weightVal = 100;
                                }
                                totalPossiblesAndGottens[category] = {
                                    totalPossible: 0,
                                    totalGotten: 0,
                                    weight: weightVal,
                                }
                                totalWeightValue += weightVal;
                            }

                            totalPossiblesAndGottens[category].totalPossible += grade.points_possible;
                            totalPossiblesAndGottens[category].totalGotten += grade.points_gotten;

                            let overallPercent = 0;
                            for (let [key, value] of Object.entries(totalPossiblesAndGottens)) {
                                overallPercent = overallPercent + (value.weight * (value.totalGotten / value.totalPossible));
                            }
                            let total = ((overallPercent/totalWeightValue) * 100).toFixed(3);
                            total = +total;
                            //rounds to 3 decimal places (the plus sign drops any trailing zeros)

                            overallGradeSteps.push(total);
                        } catch(err) {
                            console.log(err);
                            console.log("bad weight input");
                        }
                    }

                    //Parse Other Data
                    //TODO: COMBINE THESE CALCULATIONS INTO UPDATE WEIGHTS FOR LOOP FOR EFFICIENCY
                    let assignmentNames = classData.grades.map(x => x.assignment_name);
                    let assignmentTimestamps = classData.grades.map(x => new Date(x.date));
                    let assignmentPercents = classData.grades.map(x => x.grade_percent);
                    let assignmentScoresParsed = classData.grades.map(x => x.points_gotten+"/"+x.points_possible);
                    
                    let mixedData = overallGradeSteps.map(function (grade, i) { 
                        return {x:assignmentTimestamps[i], y:grade}
                    });

                    //Push Data to Array
                    parsedData.push({
                        assignmentNames: assignmentNames,
                        assignmentTimestamps: assignmentTimestamps,
                        assignmentPercents: assignmentPercents,
                        assignmentScoresParsed: assignmentScoresParsed,
                        mixedData: mixedData,
                    });
                }
                console.log(parsedData);
            }
            function renderChart(id)
            {
                var ctx = document.getElementById('chart'+id);
                var myChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        datasets: [
                            {
                                label: 'Overall Grade',
                                backgroundColor: 'rgba(256,256,256,0.05)',
                                pointBackgroundColor: 'white',
                                pointBorderColor: 'white',
                                borderColor: '#BBBBBB',
                                fill: 'start',
                                data: parsedData[id].mixedData,
                                cubicInterpolationMode: 'monotone',
                                spanGaps: false
				            }
                        ]
                    },
                    options: {
                        scales: {
                            xAxes: [{
                                type: 'time',
                                time: {
                                    unit: 'month'
                                },
                                ticks: {
                                    fontColor: 'white',
                                    fontFamily: 'Verdana',
                                    fontSize: '13'
                                },
                                gridLines: {
                                    color: '#555555',
                                }
                            }],
                            yAxes: [{
                                ticks: {
                                    fontColor: 'white',
                                    fontFamily: 'Verdana',
                                    fontSize: '12'
                                },
                                gridLines: {
                                    color: '#555555',
                                    drawBorder: false
                                }
                            }]
                        },
                        animation: {
                            easing: 'easeOutCubic'
                        },
                        legend: {
                            display: false,
                        },
                        tooltips: {
                            enabled: true,
                            position: 'nearest',
                            intersect: false,
                            displayColors: false,
                            callbacks: {
                                title: function(tooltipItems, data) {
                                    return moment(tooltipItems[0].xLabel).format("MM/DD/YY") + " " + parseFloat(tooltipItems[0].value).toFixed(2) + "%";
                                },
                                label: function(tooltipItem, data) {
                                    return parsedData[id].assignmentNames[tooltipItem.index]
                                            + " - " + parsedData[id].assignmentPercents[tooltipItem.index] + "%"
                                            + " (" + parsedData[id].assignmentScoresParsed[tooltipItem.index] + ")"; 
                                },
                            }
                        },
                        responsive: true,
                        maintainAspectRatio: false,
                    }
                });

            }
            for (let i = 0; i<data.length; i++)
            {
                renderChart(i)
            }
            function showPage(id) {
                for (let i = -1; i < data.length; i++) {
                    document.getElementById("link" + i).classList.remove("active");
                }
                document.getElementById("link" + id).classList.add("active");
                if (id===-1)
                {
                    for (let i = 0; i < data.length; i++) {
                        document.getElementById("chart-container" + i).style.display = "block";
                        document.getElementById("table-container" + i).style.display = "block";
                    }
                } else {
                    for (let i = 0; i < data.length; i++) {
                        document.getElementById("chart-container" + i).style.display = "none";
                        document.getElementById("table-container" + i).style.display = "none";
                    }

                    document.getElementById("chart-container" + id).style.display = "block";
                    document.getElementById("table-container" + id).style.display = "block";
                }

            }
        </script>

    </div>
</body>
</html>
