<!doctype html>
<html>
<title>Graderoom</title>
<link rel="icon" href="public/resources/common/icon.png">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat:500&display=swap">
<% if (user.appearance.theme === "dark") { %>
    <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/dark_mode.css">
<% } else if (user.appearance.theme === "light") { %>
    <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/light_mode.css">
<% } else if ((((user.appearance.darkModeStart < user.appearance.darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= user.appearance.darkModeStart - (dst ? (user.appearance.darkModeStart === 0 ? -23 : 1) : 0)) && ((Date.now() / 1000 / 3600 - 8) % 24) < user.appearance.darkModeFinish - (dst ? (user.appearance.darkModeFinish === 1 ? -23 : 1) : 0))) || ((user.appearance.darkModeStart > user.appearance.darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= user.appearance.darkModeStart - (dst ? (user.appearance.darkModeStart === 0 ? -23 : 1) : 0)) || ((Date.now() / 1000 / 3600 - 8) % 24) < user.appearance.darkModeFinish - (dst ? (user.appearance.darkModeFinish === 1 ? -23 : 1) : 0))))) { %>
    <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/dark_mode.css">
<% } else { %>
    <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/light_mode.css">
<% } %>
<link rel="stylesheet" type="text/css" href="public/css/main.css">
<link id="fade" rel="stylesheet" type="text/css" href="public/css/fade.css" disabled>
<meta name="viewport" content="width=device-width, initial-scale=1">

<!-- JavaScript Imports -->
<script src="https://cdn.jsdelivr.net/npm/moment@2.24.0/moment.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.1"></script>
<script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@0.7.4"></script>
</head>
<body>

<% if (user.alerts.policyLastSeen === "never" || user.alerts.termsLastSeen === "never") { %>

    <% if (user.alerts.termsLastSeen === "never") { %>
        <% include partials/user/terms_and_conditions.ejs %>
            <script>
                $("#termsDisplay").show();
            </script>
    <% } %>
    <% if (user.alerts.policyLastSeen === "never") { %>
        <% include partials/user/privacy_policy.ejs %>
            <script>
                $("#privacyDisplay").show();
            </script>
    <% } %>

<% } else { %>

    <!-- Navbar -->
    <% include partials/user/navbar.ejs %>

        <% let page = -1; %>
        <i id="pageNumber" style="display:none"><%= page %></i>

        <!-- Class Links -->
        <ul id="classLinks" class="nav nav-fill" style="color: #BBBBBB;">
            <li class="nav-item" id="link-1">
                <a class="nav-link" onclick="showPage(-1)">Overview</a>
            </li>
            <% let offset = 0; %>
            <% for (let i = 0; i < JSON.parse(gradeData).length; i++) { %>
                <% if (user.appearance.showNonAcademic || JSON.parse(relevantClassData)[JSON.parse(gradeData)[i].class_name]["classType"] !== "non-academic") { %>
                    <li class="nav-item" id="link<%= i + offset %>">
                        <a style="color: <%= user.appearance.classColors[i] %>" class="nav-link"
                           onclick="showPage(<%= i + offset %>)"><%= (JSON.parse(gradeData)[i].class_name) %></a>
                    </li>
                <% } else {
                    offset--;
                } %>
            <% } %>
        </ul>

        <!-- Main Screen -->
        <div class="container">
            <!-- Messages -->
            <div style="display: none" id="backgroundRefreshMessage"
                 class="alert alert-success font-weight-bold">
                <span style="display: flex;" id="preRefresh">
                    Syncing...
                    <div style="float: right" class="container" id="miniLoadingDisplay">
                        <div style="float: left" class="sk-chase-mini">
                            <div class="sk-chase-dot mini"></div>
                            <div class="sk-chase-dot mini"></div>
                            <div class="sk-chase-dot mini"></div>
                            <div class="sk-chase-dot mini"></div>
                            <div class="sk-chase-dot mini"></div>
                            <div class="sk-chase-dot mini"></div>
                        </div>
                    </div>
                </span>
            </div>
            <% var daysSinceUpdated = 0; %>
            <% if (user.alerts.lastUpdated.length === 0) { %> <br>
            <div class="alert alert-success">
                <u style="cursor: pointer" onclick="showCard('#updateGradesDisplay'); $('#inputPassword').focus()">Sync
                    your
                    grades</u> now!
            </div>
            <% } else { %>
                <% daysSinceUpdated = Math.floor((Date.now() - user.alerts.lastUpdated.slice(-1)[0]) / (1000 * 3600 * 24)); %>
                <% if ((user.alerts.updateGradesReminder.toLowerCase() == ('daily') && daysSinceUpdated >= 1) || (user.alerts.updateGradesReminder.toLowerCase() == 'weekly') && daysSinceUpdated >= 7) { %>
                    <div class="alert alert-danger alert-dismissible font-weight-bold">
                        <a class="close" data-dismiss="alert" aria-label="close">X</a> It's been <%= daysSinceUpdated %>
                        <% if (daysSinceUpdated == 1) { %>
                            day
                        <% } else { %> days
                        <% } %>
                        since you last synced your grades! <span
                                style="float: right; display: flex"><u
                                    style="cursor: pointer; margin-right: 10px"
                                    onclick="showCard('#settingsCardDisplay'); openTab(3)">Alert Settings</u><u
                                    style="cursor: pointer" onclick="showCard('#updateGradesDisplay')">Sync
                                Grades</u></span>
                    </div>
                <% } %>
            <% } %>
            <!-- <div class="alert alert-danger alert-dismissible" id="weightmsg" style="display:none">
                                <a class="close" data-dismiss="alert" aria-label="close">X</a>
                                <span id="weightmsg_text"></span>
                            </div> -->
            <!-- Overview Section -->
            <% if (user.alerts.lastUpdated.length !== 0) { %>
                <span id="section-1">
                    <div style="display: flex">
                        <div style="display: flex; flex-flow: column; justify-content: center; align-items: center; padding-right: 1rem;">
                            <h5 style="font-size: 2rem" class="text-center">Semester GPA</h5>
                            <h5 style="font-size: 5rem" id="GPA-display">--</h5>
                            <span class="popup">
                                <i id="incorrectGPA"
                                   class="fa fa-2x fa-exclamation-circle"
                                   style="display: none; margin-left: 0.2rem; vertical-align: middle">
                                    <span class="popup-top">
                                        Your GPA is incorrect. Please fix all issues marked with <i
                                                class="fa fa-exclamation-circle"></i> to resolve.
                                    </span>
                                </i>
                            </span>
                        </div>
                        <div id="chart-container-1" class="chart-container text-center"
                             style="position: relative; height:60vh; width: 100%; margin: 0 auto;">
                            <button id="reset-zoom-1"
                                    style="position: absolute; top: 0; right: 0; height: fit-content; display:none"
                                    class="btn btn-sm" onclick="resetZoom(-1); $(this).hide()">Reset
                            </button>
                            <canvas id="chart-1" class="chart" style="height: 60vh; width: 60vw;"></canvas>
                        </div>
                    </div>
                    <br>
                    <table class="table text-center" id="table-1">
                        <thead>
                            <tr>
                                <% offset = 0; %>
                                <% for (let i = 0; i < JSON.parse(gradeData).length; i++) { %>
                                    <% if (user.appearance.showNonAcademic || JSON.parse(relevantClassData)[JSON.parse(gradeData)[i].class_name]["classType"] !== "non-academic") { %>
                                        <th id="overview<%= i + offset %>" class="overview"
                                            style="cursor: pointer; color: <%= user.appearance.classColors[i] %>; text-align: center"
                                            onclick="showPage(<%= i + offset %>)">
                                            <%= JSON.parse(gradeData)[i].class_name %>
                                            <span class="popup">
                                                <i id="incorrectOverviewGrade<%= i + offset %>"
                                                   class="fa fa-exclamation-circle"
                                                   style="display: none; margin-left: 0.2rem">
                                                    <span class="popup-top">
                                                        WARNING: Your grade in
                                                        PowerSchool, <%= JSON.parse(gradeData)[i].overall_percent + "%" %>
                                                        (<%= JSON.parse(gradeData)[i].overall_letter %>) does not match
                                                        the
                                                        calculated grade. Make sure your weights are entered correctly.
                                                    </span>
                                                </i></span></th>
                                    <% } else {
                                        offset--;
                                    } %>
                                <% } %>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <% offset = 0; %>
                                <% for (let i = 0; i < JSON.parse(gradeData).length; i++) { %>
                                    <% if (user.appearance.showNonAcademic || JSON.parse(relevantClassData)[JSON.parse(gradeData)[i].class_name]["classType"] !== "non-academic") { %>
                                        <td class="overview"
                                            style="padding-top: 0.5rem; padding-bottom: 0; cursor: pointer; color: <%= user.appearance.classColors[i] %>"
                                            onclick="showPage(<%= i + offset %>)">
                                            <div id="overviewChart<%= i + offset %>"
                                                 style="display:block; font-weight:bolder">--<br>--<br>--
                                            </div>
                                        </td>
                                    <% } else {
                                        offset--;
                                    } %>
                                <% } %>
                            </tr>
                        </tbody>
                    </table>
                </span>
            <% } %>
            <!-- Class Sections -->
            <% offset = 0; %>
            <% for (let i = 0; i < JSON.parse(gradeData).length; i++) { %>
                <% if (user.appearance.showNonAcademic || JSON.parse(relevantClassData)[JSON.parse(gradeData)[i].class_name]["classType"] !== "non-academic") { %>
                    <span id="section<%= i + offset %>" style="display: none;">
                        <% if (JSON.parse(relevantClassData)[JSON.parse(gradeData)[i].class_name]["classType"] === "non-academic") { %>
                            <div style="display:block">
                                <div class="alert alert-info font-weight-bold"
                                     id="weightmsg<%= i + offset %>">This class is non-academic. You can stop
                                    non-academic classes from being displayed in <u style="cursor: pointer"
                                                                                    onclick="showCard('#settingsCardDisplay');">settings</u>
                                </div>
                            </div>
                        <% } %>
                        <div style="display:flex; justify-content: space-evenly; align-items: center">
                            <div id="chart-container<%= i + offset %>" class="chart-container"
                                 style="position: relative; height:40vh; width:100%; margin: 0 auto;">
                                <button id="reset-zoom<%= i + offset %>"
                                        style="position: absolute; top: 0; right: 0; height: fit-content; display:none"
                                        class="btn btn-sm"
                                        onclick="resetZoom(<%= i + offset %>); $(this).hide()">Reset
                                </button>
                                <canvas id="chart<%= i + offset %>" class="chart"></canvas>
                            </div>
                            <form id="weights<%= i + offset %>" class="form-ajax form-weights form-signin"
                                  action="/updateweights">
                                <table class="table text-center weights"
                                       style="width: 25%; white-space: nowrap; margin: 20px"
                                       id="weightsTable<%= i + offset %>">
                                    <thead>
                                        <tr>
                                            <th colspan="4" style="padding: 0.3rem 0">
                                                <label style="display: flex; font-size: 1rem; justify-content: center; margin: 0; align-items: center">Point
                                                    Based&nbsp
                                                    <label class="switch">
                                                        <input
                                                                id="check<%= i + offset %>"
                                                                style="margin: 0; display: flex"
                                                                type="checkbox"
                                                                name="hasWeights"
                                                        <% if (JSON.parse(weightData)[JSON.parse(gradeData)[i + offset].class_name]["hasWeights"] === "false") { %>
                                                                checked
                                                                <% } %>
                                                                oninput="disableInput('check<%= i + offset %>','weightsTable<%= i + offset %>'); resetInputs('#weights<%= i + offset %>'); $('#weights<%= i + offset %>').submit();"
                                                        >
                                                        <span style="color: <%= user.appearance.classColors[i + offset] %>"
                                                              class="slider"></span>
                                                    </label>
                                                </label>
                                            </th>
                                        </tr>
                                        <tr>
                                            <th>Category</th>
                                            <th style="width: 10rem !important" id="weight-header<%= i + offset %>">
                                                Weights
                                                <span class="popup">
                                                    <i
                                                            id="reset<%= i + offset %>"
                                                            style="color: #888888; margin: 0; cursor: pointer; display:inline-block"
                                                            class="fa fa-undo"
                                                            onclick="resetWeights(<%= i + offset %>); $('#weights<%= i + offset %>').submit();">
                                                        <span class="popup-top">Revert
                                                            to Default</span>
                                                    </i>
                                                </span>
                                                <span class="popup">
                                                    <i style="display: inline-block"
                                                       id="ignoringWeights<%= i + offset %>"
                                                       class="fa fa-exclamation-circle">
                                                        <span class="popup-top">
                                                            Enter all weights to enable weighted overall grade
                                                            calculation
                                                            or choose the point-based option.
                                                        </span>
                                                    </i>
                                                </span>
                                            </th>
                                            <th>Score</th>
                                            <th>Grade</th>
                                        </tr>
                                    </thead>
                                    <tbody>

                                        <% for (let j = 0; j < Object.keys(JSON.parse(weightData)[JSON.parse(gradeData)[i].class_name]["weights"]).length; j++) { %>
                                            <tr>
                                                <td id="weightTableCategory<%= i + offset %><%= j %>"></td>
                                                <% let weights = JSON.parse(weightData)[JSON.parse(gradeData)[i + offset].class_name]["weights"] %>
                                                <% let category = Object.keys(weights)[j] %>
                                                <% let value = weights[category] %>
                                                <td id="weightTableWeight<%= i + offset %><%= j %>" class="form-group">
                                                    <input style="<% if (!value && value != 0) { %> border-color: lightcoral !important; <% } %>"
                                                           value="<%= value %>"
                                                           type="number"
                                                           min="0"
                                                           step="0.01"
                                                           class="number-input disableable form-control <% if(value || value == 0){ %> text-view <% } %>"
                                                           name="<%= category %>"
                                                    >
                                                </td>
                                                <td id="weightTablePoints<%= i + offset %><%= j %>"></td>
                                                <td id="weightTableGrade<%= i + offset %><%= j %>"></td>
                                            </tr>
                                        <% } %>
                                        <script>
                                            function disableInput(checkBoxID, id) {
                                                $("#" + id).find(".disableable").each(function () {
                                                    if ($("#" + checkBoxID).is(":checked")) {
                                                        $(this).val("");
                                                        $(this).addClass("disabled");
                                                        $(this).attr("disabled", "disabled");
                                                    } else {
                                                        $(this).removeClass("disabled");
                                                        $(this).removeAttr("disabled");
                                                    }
                                                });
                                            }

                                            disableInput('check<%= i + offset %>', 'weightsTable<%= i + offset %>');
                                        </script>
                                    <tfoot>
                                        <tr>
                                            <th colspan="4">
                                                <div style="display:none; color: <%= user.appearance.classColors[i] %>"
                                                     id="weightTableOverallGrade<%= i + offset %>">
                                                </div>
                                                <span class="popup">
                                                    <i id="incorrectOverallGrade<%= i + offset %>"
                                                       class="fa fa-exclamation-circle"
                                                       style="margin-left: 0.2rem; vertical-align: middle">
                                                        <span class="popup-top">
                                                            WARNING: Your grade in
                                                            PowerSchool, <%= JSON.parse(gradeData)[i].overall_percent %>
                                                            %
                                                            (<%= JSON.parse(gradeData)[i].overall_letter %>) does not
                                                            match
                                                            the calculated grade.
                                                        </span>
                                                    </i>
                                                </span>
                                            </th>
                                        </tr>
                                    </tfoot>
                                </table>
                            </form>
                        </div>
                        <hr>
                        <table class="table text-center" id="table<%= i + offset %>">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Assignment Name</th>
                                    <th>Category</th>
                                    <th>Score</th>
                                    <th>Assignment Percent</th>
                                    <th>Overall Grade</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% let jOffset = 0; %>
                                <% for (let j = 0; j < JSON.parse(gradeData)[i + offset].grades.length; j++) { %>
                                    <% let grade = JSON.parse(gradeData)[i + offset].grades[j] %>
                                    <% if (grade.exclude) { %>
                                        <% jOffset--; %>
                                        <tr id="excluded<%= i + offset %><%= j + jOffset %>">
                                            <td id="excludedAssignmentDate<%= i + offset %><%= -jOffset - 1 %>"></td>
                                            <td id="excludedAssignmentName<%= i + offset %><%= -jOffset - 1 %>"></td>
                                            <td id="excludedAssignmentCategory<%= i + offset %><%= -jOffset - 1 %>"></td>
                                            <td id="excludedAssignmentScore<%= i + offset %><%= -jOffset - 1 %>"></td>
                                            <td id="excludedAssignmentPercent<%= i + offset %><%= -jOffset - 1 %>"></td>
                                            <td class="excludedAssignment<%= i + offset %><%= j + jOffset %>"></td>
                                        </tr>
                                    <% } else { %>
                                        <tr id="classTable<%= i + offset %><%= j + jOffset %>">
                                            <td id="assignmentDate<%= i + offset %><%= j + jOffset %>"></td>
                                            <td id="assignmentName<%= i + offset %><%= j + jOffset %>"></td>
                                            <td id="assignmentCategory<%= i + offset %><%= j + jOffset %>"></td>
                                            <td id="assignmentScore<%= i + offset %><%= j + jOffset %>"></td>
                                            <td id="assignmentPercent<%= i + offset %><%= j + jOffset %>"></td>
                                            <td id="assignment<%= i + offset %><%= j + jOffset %>"></td>
                                        </tr>
                                    <% } %>
                                <% } %>
                            </tbody>
                        </table>
                    </span>
                <% } else {
                    offset--;
                } %>
            <% } %>
        </div>
<% } %>
<!-- Custom JavaScript -->
<script>

    let refreshing;

    function refreshWithoutReload(doItNow = false) {
        if (doItNow) {
            clearTimeout(refreshing);
            parseData();
            setupWeightsTables();
            setupOverviewTable();
            setupClassTables();
            setupGPADisplay();
            setupIncorrectGradeMessages();
            setPointBasedWeights();
            renderAllCharts();
            return;
        }
        if (refreshing) {
            clearTimeout(refreshing);
        }
        refreshing = setTimeout(() => {
            parseData();
            setupWeightsTables();
            setupOverviewTable();
            setupClassTables();
            setupGPADisplay();
            setupIncorrectGradeMessages();
            setPointBasedWeights();
            renderAllCharts();
        }, 400);
    }

    let user = <%- userRef %>;
    let data = <%- gradeData %>;
    let weights = <%- weightData %>;
    let relClassData = <%- relevantClassData %>;
    let parsedData = [];
    let excludedData = [];
    let unobtainedWeights = {};
    let tempWeights = {};
    let currentPage = (isNaN(parseInt(localStorage.getItem("currentPage"))) ? -1 : parseInt(localStorage.getItem("currentPage")));
    let cardsDisplayed = [];
    let charts = [];
    let currentTab = 1;
    let maxTab = 4;
    let darkMode;
    let colors = user.appearance.classColors;
    let darkModeStart = user.appearance.darkModeStart || 18;
    let darkModeFinish = user.appearance.darkModeFinish || 7;

    if (!user.appearance.showNonAcademic) {
        colors = colors.filter(color => relClassData[data[colors.indexOf(color)].class_name].classType !== "non-academic");
        data = data.filter(grade => relClassData[grade.class_name].classType !== "non-academic");
    }

    refreshWithoutReload(true);

    let changeTransition;
    let theme = user.appearance.theme;
    let checkingTheme;
    if (theme === "auto") {
        darkMode = (user.appearance.theme === "dark" || (user.appearance.theme === "auto" && (((user.appearance.darkModeStart < user.appearance.darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= user.appearance.darkModeStart - (isDST() ? (user.appearance.darkModeStart === 0 ? -23 : 1) : 0)) && ((Date.now() / 1000 / 3600 - 8) % 24) < user.appearance.darkModeFinish - (isDST() ? (user.appearance.darkModeFinish === 1 ? -23 : 1) : 0))) || ((user.appearance.darkModeStart > user.appearance.darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= user.appearance.darkModeStart - (isDST() ? (user.appearance.darkModeStart === 0 ? -23 : 1) : 0)) || ((Date.now() / 1000 / 3600 - 8) % 24) < user.appearance.darkModeFinish - (isDST() ? (user.appearance.darkModeFinish === 1 ? -23 : 1) : 0))))));
        checkTime();
    } else {
        darkMode = theme === "dark";
    }
    if (user.alerts.lastUpdated.length !== 0) {
        try {
            renderAllCharts();
        } catch {
        }
    }
    try {
        showPage(currentPage);
        localStorage.setItem("currentPage", currentPage);
    } catch {
        currentPage = -1;
        try {
            showPage(-1);
            localStorage.setItem("currentPage", currentPage);
        } catch {
        }
    }
    if (user.schoolPassword) {
        $("#syncGradesDiv").hide();
        $("#gradeSyncDiv").show();
        checkUpdateBackground();
    } else {
        $("#gradeSyncDiv").hide();
        $("#syncGradesDiv").show();
        showLatest(false);
    }
    document.getElementById("darkModeStart").setAttribute("placeholder", (darkModeStart === 0 ? "12" : darkModeStart > 12 ? (darkModeStart - 12).toString() : darkModeStart.toString()));
    document.getElementById("darkModeFinish").setAttribute("placeholder", (darkModeFinish === 24 ? "12" : darkModeFinish > 12 ? (darkModeFinish - 12).toString() : darkModeFinish.toString()));

    function isDST() {
        return Math.max(new Date(new Date(Date.now()).getFullYear(), 0, 1).getTimezoneOffset(), new Date(new Date(Date.now()).getFullYear(), 6, 1).getTimezoneOffset()) !== new Date(Date.now()).getTimezoneOffset();
    }

    function setAutoTheme() {
        if (theme !== "auto") {
            if (checkingTheme) {
                clearInterval(checkingTheme);
            }
            return;
        }
        darkModeStart = parseInt(darkModeStart);
        darkModeFinish = parseInt(darkModeFinish);
        //console.log("Start, finish, theme", darkModeStart, darkModeFinish, theme);
        //console.log(((Date.now() / 1000 / 3600 - 8) % 24) >= darkModeStart);
        if (theme === "dark" || (theme === "auto" && (((darkModeStart < darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= darkModeStart - (isDST() ? (darkModeStart === 0 ? -23 : 1) : 0)) && ((Date.now() / 1000 / 3600 - 8) % 24) < darkModeFinish - (isDST() ? (darkModeFinish === 1 ? -23 : 1) : 0))) || ((darkModeStart > darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= darkModeStart - (isDST() ? (darkModeStart === 0 ? -23 : 1) : 0)) || ((Date.now() / 1000 / 3600 - 8) % 24) < darkModeFinish - (isDST() ? (darkModeFinish === 1 ? -23 : 1) : 0)))))) {
            let oldDarkMode = document.getElementById("pageStyle").getAttribute("href") === "public/css/dark_mode.css";
            darkMode = true;
            if (darkMode !== oldDarkMode) {
                clearTimeout(changeTransition);
                document.getElementById("fade").disabled = false;
                document.getElementById("pageStyle").setAttribute("href", "public/css/dark_mode.css");
                setTimeout(() => {
                    document.getElementById("fade").disabled = true;
                }, 1000);
                renderAllCharts();
            }
        } else {
            let oldDarkMode = document.getElementById("pageStyle").getAttribute("href") === "public/css/dark_mode.css";
            darkMode = false;
            if (darkMode !== oldDarkMode) {
                clearTimeout(changeTransition);
                document.getElementById("fade").disabled = false;
                document.getElementById("pageStyle").setAttribute("href", "public/css/light_mode.css");
                setTimeout(() => {
                    document.getElementById("fade").disabled = true;
                }, 1000);
                renderAllCharts();
            }
        }
    }

    async function checkTime() {
        if (checkingTheme) {
            clearInterval(checkingTheme);
        }
        setAutoTheme();
        checkingTheme = window.setInterval(function () {
            setAutoTheme();
        }, 100);
    }

    async function checkUpdateBackground() {
        $.get("/checkUpdateBackground", function (data, status) {
            if (status === "success") {
                if (data === "Sync Complete!") {
                    $("#preRefresh").hide();
                    $("#backgroundRefreshMessage").hide();
                    clearInterval(checking);
                    setTimeout(() => window.reload(), 400);
                } else if (data === "Already Synced!") {
                    clearInterval(checking);
                    showLatest(false);
                } else if (data === "Did not sync") {
                    $("#backgroundRefreshMessage").show();
                    $("#weightmsg-1").hide();
                }
            }
        });
        let checking = window.setInterval(function () {
            $.get("/checkUpdateBackground", function (data, status) {
                if (status === "success") {
                    if (data === "Sync Complete!") {
                        $("#preRefresh").hide();
                        $("#backgroundRefreshMessage").hide();
                        clearInterval(checking);
                        setTimeout(() => window.reload(), 400);
                    } else if (data === "Already Synced!") {
                        clearInterval(checking);
                        showLatest(false);
                    } else if (data === "Did not sync") {
                        $("#backgroundRefreshMessage").show();
                        $("#weightmsg-1").hide();
                    }
                }
            });
        }, 1000);
    }

    function disableScrolling() {
        $("body").addClass("no-scroll");
    }

    function enableScrolling() {
        $("body").removeClass("no-scroll");
    }

    function setupGPADisplay() {
        $("#GPA-display").text(getOverallGPA);
    }

    function setupIncorrectGradeMessages() {
        $("#incorrectGPA").hide();
        $("#GPA-display").removeClass("ignored");
        for (let i = 0; i < data.length; i++) {
            let realOverallGrade = data[i].overall_percent;
            let realOverallLetter = data[i].overall_letter;
            let calculatedOverallGrade = getOverallGrade(i);
            let correctDecimalPlaces = getOverallGrade(i).toFixed(countDecimals(realOverallGrade));
            let calculatedOverallLetter = getLetterGrade(calculatedOverallGrade);
            if (correctDecimalPlaces != realOverallGrade || calculatedOverallLetter !== realOverallLetter) {
                $("#incorrectOverviewGrade" + i).css("display", "inline");
                $("#incorrectOverallGrade" + i).css("display", "inline");
                $("#overviewChart" + i).addClass("ignored");
            } else {
                $("#incorrectOverviewGrade" + i).hide();
                $("#incorrectOverallGrade" + i).hide();
                $("#overviewChart" + i).removeClass("ignored");
            }

            // GPA will only be different if the actual letter is different
            let strippedCalculatedLetter = calculatedOverallLetter.substring(0, 1);
            let strippedRealLetter = realOverallLetter.substring(0, 1);
            if (strippedCalculatedLetter !== strippedRealLetter) {
                $("#incorrectGPA").css("display", "inline");
                $("#GPA-display").addClass("ignored");
            }
        }
    }

    function countDecimals(value) {
        if (Math.floor(value) === value) {
            return 0;
        }
        return value.toString().split(".")[1].length || 0;
    }

    function getOverallGPA() {
        let GPA = 0.0;
        let numClasses = data.length;
        for (let i = 0; i < data.length; i++) {
            let className = data[i].class_name;
            let classType = relClassData[className]["classType"];
            if (classType === "ap" || classType === "honors") {
                GPA += 1;
            }
            if (classType !== "non-academic") {
                GPA += getGPA(getOverallGrade(i));
            } else {
                numClasses--;
            }
        }
        GPA /= numClasses;
        return GPA.toFixed(2);
    }

    function getGPA(grade) {
        let letterGrade = getLetterGrade(grade).substring(0, 1);
        if (letterGrade === "A") {
            return 4;
        } else if (letterGrade === "B") {
            return 3;
        } else if (letterGrade === "C") {
            return 2;
        } else if (letterGrade === "D") {
            return 1;
        }
        return 0;
    }

    function getTotalWeight(classIndex) {
        let className = data[classIndex].class_name;
        let classWeights = Object.values(weights[className]["weights"]);
        let totalWeight = 0;
        let classCategories = Object.keys(weights[className]["weights"]);
        for (let i = 0; i < classWeights.length; i++) {
            if (getCategoryGottenAndPossible(classIndex, classCategories[i]).possible !== 0) {
                totalWeight += Number(classWeights[i]);
            }
        }
        return totalWeight;
    }

    function setPointBasedWeights() {
        for (let classIndex = 0; classIndex < data.length; classIndex++) {
            let className = data[classIndex].class_name;
            let totalPossible = 0;
            let result = {};
            for (let assignment of data[classIndex]["grades"]) {
                if (assignment["points_gotten"] !== false && assignment["points_possible"] !== false && assignment["exclude"] !== true) {
                    if (!result[assignment.category]) {
                        result[assignment.category] = 0;
                    }
                    result[assignment.category] += assignment["points_possible"];
                    totalPossible += assignment["points_possible"];
                }
            }
            for (let i = 0; i < Object.keys(result).length; i++) {
                let weight = Object.keys(result)[i];
                result[weight] = +(result[weight] / totalPossible * 100).toFixed(4) || 0;
                $("#weightTableWeight" + classIndex + i + " input").attr("placeholder", result[weight]);
            }
        }
    }

    function getOverallGrade(classIndex) {
        let className = data[classIndex].class_name;
        if (className in weights) {
            let overallGrade = 0;
            if (weights[className]["hasWeights"] === "false" || unobtainedWeights[className]) {
                let points_earned = 0;
                let points_total = 0;
                for (let assignment of data[classIndex]["grades"]) {
                    if (assignment["points_gotten"] !== false && assignment["points_possible"] !== false && assignment["exclude"] !== true) {
                        points_earned += assignment["points_gotten"];
                        points_total += assignment["points_possible"];
                    }
                }
                overallGrade = points_earned / points_total * 100;
            } else {
                let classCategories = Object.keys(weights[className]["weights"]);
                let classWeights = Object.values(weights[className]["weights"]);
                for (let i = 0; i < classCategories.length; i++) {
                    overallGrade += getCategoryGrade(classIndex, classCategories[i]) * classWeights[i] / 100;
                }
                let ratio = 100 / getTotalWeight(classIndex);
                overallGrade *= ratio;
            }
            return overallGrade;
        }
        return 0;
    }

    function getLetterGrade(grade) {
        if (grade >= 97.5) {
            return "A+";
        } else if (grade >= 92.5) {
            return "A";
        } else if (grade >= 89.5) {
            return "A-";
        } else if (grade >= 87.5) {
            return "B+";
        } else if (grade >= 82.5) {
            return "B";
        } else if (grade >= 79.5) {
            return "B-";
        } else if (grade >= 77.5) {
            return "C+";
        } else if (grade >= 72.5) {
            return "C";
        } else if (grade >= 69.5) {
            return "C-";
        } else if (grade >= 67.5) {
            return "D+";
        } else if (grade >= 62.5) {
            return "D";
        } else if (grade >= 59.5) {
            return "D-";
        }
        return "F";
    }

    function colorAlphaFunction(delta) {
        let abs = Math.abs(delta);
        let max = 0.2;
        let maxInput = 10;
        let cutoff = Math.min(abs, maxInput);
        return max * Math.pow(cutoff / maxInput, 1 / 2.5);
    }

    let submittingWeights;

    function setupWeightsTableListeners() {
        for (let i = 0; i < data.length; i++) {
            let className = data[i].class_name;
            let tableCategories = Object.keys(weights[className]["weights"]);
            for (let j = 0; j < tableCategories.length; j++) {
                $("#weightTableWeight" + i + j + " input").blur(() => {
                    clearTimeout(submittingWeights);
                    submittingWeights = setTimeout(() => {
                        resetInputs("#weights" + i);
                        $("#weightTableWeight" + i + j).parents("form").submit();
                    }, 400);
                }).on("keyup", (e) => {
                    e = e || window.event;
                    let keyCode = e.code;
                    if (keyCode === "Enter") {
                        $("#weightTableWeight" + i + j + " input").blur();
                    }
                });
            }
        }
    }

    function setupWeightsTables() {
        for (let i = 0; i < data.length; i++) {
            let className = data[i].class_name;
            let tableCategories = Object.keys(weights[className]["weights"]);

            let enableReset = weights[className]["custom"];
            //if custom and both haveWeights, enable reset only if db had diff value to give to user's weights
            //stop reset from showing if custom is due to user having more categories than classes db
            if (enableReset && relClassData[className]["hasWeights"] != "false") {
                enableReset = false;
                let keys = Object.keys(weights[className]["weights"]);
                for (let i = 0; i < keys.length; i++) {
                    if (weights[className]["hasWeights"] == "false" && keys[i] in relClassData[className]["weights"]) {
                        enableReset = true;
                    } else if ((keys[i] in relClassData[className]["weights"]) && weights[className]["weights"][keys[i]] != relClassData[className]["weights"][keys[i]]) {
                        enableReset = true;
                    }
                }
            }

            //Hide or Show Reset Button
            if (enableReset) {
                $("#reset" + i).show();
                $("#weight-header" + i).css("font-style", "italic");
            } else {
                $("#reset" + i).hide();
                $("#weight-header" + i).css("font-style", "normal");
            }

            //Hide or Show Ignoring weights
            if (unobtainedWeights[className]) {
                $("#ignoringWeights" + i).show();
            } else {
                $("#ignoringWeights" + i).hide();
            }

            for (let j = 0; j < tableCategories.length; j++) {
                //Set italics of weights
                if (enableReset) {
                    $("#weightTableWeight" + i + j).children().css("font-style", "italic");
                } else {
                    $("#weightTableWeight" + i + j).children().css("font-style", "normal");
                }

                //Strikethrough weights if any are missing
                let input = $("#weightTableWeight" + i + j + " input");
                if (unobtainedWeights[className] && (!isNaN(parseFloat(input[0].valueAsNumber)))) {
                    input.addClass("ignored");
                } else {
                    input.removeClass("ignored");
                }

                document.getElementById("weightTableCategory" + i + j).textContent = tableCategories[j];
                let categoryGottenAndPossible = getCategoryGottenAndPossible(i, tableCategories[j]);
                document.getElementById("weightTablePoints" + i + j).textContent = +categoryGottenAndPossible.gotten.toFixed(4) + ((categoryGottenAndPossible.possible !== 0) ? ("/" + +(categoryGottenAndPossible.possible.toFixed(4))) : "");
                let categoryGrade = getCategoryGrade(i, tableCategories[j]);
                if (categoryGottenAndPossible.possible !== 0) {
                    document.getElementById("weightTableGrade" + i + j).textContent = categoryGrade + "% (" + getLetterGrade(categoryGrade) + ")";
                }
            }
            let overallGrade = getOverallGrade(i);
            let assignmentData = parsedData[i].mixedData.map(o => o.y);
            let lastIndex = assignmentData.length - 1;
            let delta = +(assignmentData[lastIndex] - assignmentData[lastIndex - 1]).toFixed(5);
            let color;
            let bgColor;
            if (delta > 0) {
                bgColor = "rgba(0, 255, 0, " + colorAlphaFunction(delta) + ")";
                delta = "<i class=\"fa fa-caret-up\"></i>" + delta + "%";
                color = "green";
            } else if (delta < 0) {
                bgColor = "rgba(255, 0, 0, " + colorAlphaFunction(delta) + ")";
                delta = "<i class=\"fa fa-caret-down\"></i>" + delta + "%";
                color = "red";
            } else {
                bgColor = "unset";
            }
            delta = (delta ? (" <div style=\"display: inline-block; margin-left: 1rem; color: " + color + "\">" + delta + "</div>") : "");
            if (overallGrade) {
                document.getElementById("weightTableOverallGrade" + i).innerHTML = (+(overallGrade.toFixed(4))).toString() + "% (" + getLetterGrade(overallGrade) + ")" + delta;
                $("#weightTableOverallGrade" + i).parents("th").css("background-color", bgColor);
            }
            document.getElementById("weightTableOverallGrade" + i).style.display = "inline";

        }
        setupWeightsTableListeners();
    }

    function adjust(elements, offset, min, max) {

        // Initialize parameters
        offset = offset || 0;
        min = min || 0;
        max = max || Infinity;
        elements.each(function () {
            let element = $(this);

            // Add element to measure pixel length of text
            let id = btoa(Math.floor(Math.random() * Math.pow(2, 64)));
            let tag = $("<span id=\"" + id + "\">" + element.val() + "</span>").css({
                                                                                        "display": "none",
                                                                                        "font-family": element.css("font-family"),
                                                                                        "font-size": element.css("font-size")
                                                                                    }).appendTo("body");

            // Adjust element width on keydown
            const update = () => {

                // Give browser time to add current letter
                setTimeout(function () {

                    // Prevent whitespace from being collapsed
                    tag.html(element.val().replace(/ /g, "&nbsp"));

                    // Clamp length and prevent text from scrolling
                    let size = Math.max(min, Math.min(max, tag.width() + offset));
                    if (size < max) {
                        element.scrollLeft(0);
                    }

                    // Apply width to element
                    element.width(size);

                }, 0);
            };
            update();
            element.keydown(update);
        });
    }

    function remToPixels(rem) {
        return rem * parseFloat(getComputedStyle(document.documentElement).fontSize);
    }

    const updatePointsGotten = (element, classIndex, assignmentIndex) => {
        let assignment = data[classIndex]["grades"][assignmentIndex];
        assignment.points_gotten = parseFloat($(element)[0].value);
        assignment.grade_percent = +parseFloat(assignment.points_gotten / assignment.points_possible * 100).toFixed(2);
    };
    const updatePointsPossible = (element, classIndex, assignmentIndex) => {
        let assignment = data[classIndex]["grades"][assignmentIndex];
        assignment.points_possible = parseFloat($(element)[0].value);
        assignment.grade_percent = +parseFloat(assignment.points_gotten / assignment.points_possible * 100).toFixed(2);
    };

    function setupClassTables() {
        for (let i = 0; i < parsedData.length; i++) {
            let assignmentData = parsedData[i].mixedData.map(o => o.y);
            let assignmentDates = parsedData[i].assignmentDates;
            let assignmentNames = parsedData[i].assignmentNames;
            let assignmentCategories = parsedData[i].assignmentCategories;
            let assignmentScoresParsed = parsedData[i].assignmentScoresParsed;
            let assignmentPercents = parsedData[i].assignmentPercents;
            for (let j = 0; j < assignmentData.length; j++) {
                // Set up dates
                $("#assignmentDate" + i + j).text(assignmentDates[j]);

                // Set up names
                $("#assignmentName" + i + j).text(assignmentNames[j]);

                // Set up categories
                $("#assignmentCategory" + i + j).text(assignmentCategories[j]);

                // Set up scores
                let exclusionOffset = 0; // This is necessary because excluded assignments still exist in the data array but not in parsedData. We are changing data.
                let k;
                for (k = 0; k < j + exclusionOffset + 1; k++) {
                    if (data[i].grades[k].exclude) {
                        exclusionOffset++;
                    }
                }
                let scoreDiv = $("#assignmentScore" + i + j);
                let score = assignmentScoresParsed[j];
                if (score.substring(score.length - 2) === "/0") {
                    score = score.substring(0, score.length - 2);
                }
                scoreDiv.text(score);
                if (score.indexOf("/") !== -1) {
                    score = score.split("/");
                    let displayedScore = ["", ""];
                    try {
                        displayedScore = [scoreDiv.find(".dynamic-input")[0].value, scoreDiv.find(".dynamic-input")[1].value];
                    } catch {
                    }
                    if (displayedScore[0] !== score[0] || displayedScore[1] !== score[1]) {
                        scoreDiv.addClass("form-weights form-signin form-group").html("<div style=\"display: flex; justify-content: center; align-items: center\">" + "<input type=\"number\" step=\"0.001\" style=\"padding: 0; width: 0 !important; \" class=\"form-control text-view dynamic-input\" value=\"" + score[0] + "\" oninput=\"updatePointsGotten(this," + i + "," + (j + exclusionOffset) + ")\" onblur=\"{refreshWithoutReload()}\">" + "/" + "<input style=\"padding: 0; width: 0 !important; \" class=\"form-control text-view dynamic-input\" value=\"" + score[1] + "\" oninput=\"updatePointsPossible(this," + i + "," + (j + exclusionOffset) + ")\" onblur=\"refreshWithoutReload()\">" + "</div>");
                        adjust($("#assignmentScore" + i + j + " .dynamic-input"), 0, remToPixels(1), remToPixels(4));
                    }
                }
                // Set up percents
                let percent = assignmentPercents[j];
                if (percent === -1 || isNaN(parseFloat(percent))) {
                    percent = "--";
                }
                $("#assignmentPercent" + i + j).text(percent);

                // Set up coloring and gain/loss
                let display = +isNaN(parseFloat(assignmentData[j]).toFixed(2)) ? +parseFloat(assignmentData[assignmentData.length - 1]).toFixed(2) : parseFloat(assignmentData[j]).toFixed(2);
                let delta = (assignmentData[j] - assignmentData[j - 1]).toFixed(3);
                let color;
                let bgColor;

                if (delta > 0) {
                    bgColor = "rgba(0, 255, 0, " + colorAlphaFunction(delta) + ")";
                    delta = "(+" + delta + "%) <i class=\"fa fa-long-arrow-up\"></i>";
                    color = "green";
                } else if (delta < 0) {
                    bgColor = "rgba(255, 0, 0, " + colorAlphaFunction(delta) + ")";
                    delta = "(" + delta + "%) <i class=\"fa fa-long-arrow-down\"></i>";
                    color = "red";
                } else {
                    delta = "(±0.000%) <i class=\"fa fa-arrows-v\"></i>";
                    bgColor = "unset";
                    color = "unset";
                }
                let excludedDisplay = display + "% " + "<div style=\"display: inline-block; font-weight: normal; font-size: smaller\">(±0.00%) " + "<i class=\"fa fa-arrows-v\"></i>" + "</div>";
                display = display + "% " + "<div style=\"display: inline-block; font-weight: normal; font-size: smaller\">" + delta + "</div>";
                $("#assignment" + i + j).css("color", color).html(display);
                if (color) {
                    $("#assignment" + i + j).css("font-weight", "bold");
                }
                $("#classTable" + i + j).css("background-color", bgColor);
                let excluded = $(".excludedAssignment" + i + j);
                if (excluded.length) {
                    excluded.html(excludedDisplay);
                }
            }
            assignmentDates = excludedData[i].assignmentDates;
            assignmentNames = excludedData[i].assignmentNames;
            assignmentCategories = excludedData[i].assignmentCategories;
            assignmentScoresParsed = excludedData[i].assignmentScoresParsed;
            assignmentPercents = excludedData[i].assignmentPercents;
            for (let j = 0; j < assignmentDates.length; j++) {
                // Set up dates
                $("#excludedAssignmentDate" + i + j).text(assignmentDates[j]);

                // Set up names
                $("#excludedAssignmentName" + i + j).text(assignmentNames[j]);

                // Set up categories
                $("#excludedAssignmentCategory" + i + j).text(assignmentCategories[j] + " (EXCLUDED)");

                // Set up scores
                let score = assignmentScoresParsed[j];
                if (score.substring(score.length - 2) === "/0") {
                    score = score.substring(0, score.length - 2);
                }
                $("#excludedAssignmentScore" + i + j).text(score);

                // Set up percents
                let percent = assignmentPercents[j];
                if (percent === -1 || isNaN(parseFloat(percent))) {
                    percent = "--";
                }
                $("#excludedAssignmentPercent" + i + j).text(percent);
            }
        }
    }

    function setupOverviewTable() {
        for (let i = 0; i < data.length; i++) {
            let overallGrade = getOverallGrade(i);
            let assignmentData = parsedData[i].mixedData.map(o => o.y);
            let lastIndex = assignmentData.length - 1;
            let delta = +(assignmentData[lastIndex] - assignmentData[lastIndex - 1]).toFixed(5);
            let color;
            let bgColor;

            if (delta > 0) {
                bgColor = "rgba(0, 255, 0, " + colorAlphaFunction(delta) + ")";
                delta = "<i class=\"fa fa-caret-up\"></i>" + delta + "%";
                color = "green";
            } else if (delta < 0) {
                bgColor = "rgba(255, 0, 0, " + colorAlphaFunction(delta) + ")";
                delta = "<i class=\"fa fa-caret-down\"></i>" + delta + "%";
                color = "red";
            } else {
                bgColor = "unset";
            }
            delta = (delta ? (" <div style=\"display: inline-block; font-size: smaller; color: " + color + "\">" + delta + "</div>") : "");
            if (getOverallGrade(i)) {
                document.getElementById("overviewChart" + i).innerHTML = (+(overallGrade.toFixed(4))).toString() + "%" + "<br>" + getLetterGrade(overallGrade) + "<br>" + delta;
                document.getElementById("overviewChart" + i).parentElement.style.backgroundColor = bgColor;
                document.getElementById("overview" + i).style.backgroundColor = bgColor;
            } else {
                document.getElementById("overviewChart" + i).innerHTML = "N/A";
                document.getElementById("overviewChart" + i).parentElement.style.backgroundColor = "transparent";
                document.getElementById("overview" + i).style.backgroundColor = "transparent";
            }
        }
    }

    function getCategoryGottenAndPossible(classIndex, categoryName) {
        let grades = data[classIndex].grades;
        let totalGotten = 0;
        let totalPossible = 0;
        for (let i = 0; i < grades.length; i++) {
            if (!grades[i].exclude && grades[i].category === categoryName) {
                if (grades[i].points_gotten !== false && grades[i].points_possible !== false) {
                    totalGotten += grades[i].points_gotten;
                    totalPossible += grades[i].points_possible;
                }
            }
        }
        return {"gotten": totalGotten, "possible": totalPossible};
    }

    function getCategoryGrade(classIndex, categoryName) {
        let categoryGottenAndPossible = getCategoryGottenAndPossible(classIndex, categoryName);
        let totalGotten = categoryGottenAndPossible.gotten;
        let totalPossible = categoryGottenAndPossible.possible;
        if (totalPossible === 0) {
            return 0;
        }
        return +((totalGotten / totalPossible * 100).toFixed(4));
    }

    function parseData() {
        /*
         WEIGHTS first
         */
        for (let classData of data) {
            let className = classData.class_name;
            let localMissingCategories = Object.keys(weights[className]["weights"]).filter(category => !weights[className]["weights"][category] && weights[className]["weights"][category] !== 0);
            delete unobtainedWeights[className];
            if (localMissingCategories.length > 0 && weights[className]["hasWeights"] !== "false") {
                unobtainedWeights[className] = localMissingCategories;
            }

        }
        /**
         * now grades!
         */
        //Add array to each object in parsedData: one for weights (not needed?), one for missing weights
        //Get data for one class
        parsedData = [];
        excludedData = [];
        for (let classData of data) {
            let className = classData.class_name;
            let overallGradeSteps = [];
            let totalPossiblesAndGottens = {}; //by category
            let totalWeightValue = 0; // divide by the total weight amount - so even if the final is not entered the grade is still of of 100
            // VERY JANK CHANGE LATER
            let doesntHaveWeights = (className in unobtainedWeights) || (weights[className]["hasWeights"] === "false");
            // console.log(className + " DHW? : " + doesntHaveWeights);
            for (let grade of classData.grades) {
                let category = grade.category;
                if (doesntHaveWeights) {
                    category = "default";
                }
                try {
                    if (typeof totalPossiblesAndGottens[category] === "undefined" && !grade.exclude && grade.points_possible !== false && grade.points_gotten !== false) {
                        let weightVal = 100;
                        if (!doesntHaveWeights) {
                            weightVal = Number(weights[className]["weights"][category]);
                        }
                        totalPossiblesAndGottens[category] = {
                            totalPossible: false, totalGotten: false, weight: weightVal
                        };
                        totalWeightValue += weightVal;
                    }
                    if (!grade.exclude) {
                        if (grade.points_possible !== false && grade.points_gotten !== false) {
                            totalPossiblesAndGottens[category].totalPossible += grade.points_possible;
                            totalPossiblesAndGottens[category].totalGotten += grade.points_gotten;
                            let overallPercent = 0;
                            for (let [key, value] of Object.entries(totalPossiblesAndGottens)) {
                                if (value.totalGotten === false || value.totalPossible === false) {
                                    totalWeightValue -= value.weight;
                                    value.weight = 0;
                                    continue;
                                }
                                overallPercent += ((value.weight * (value.totalPossible !== 0 ? (value.totalGotten / value.totalPossible) : value.totalGotten)));
                            }
                            let total = +(((overallPercent / totalWeightValue) * 100).toFixed(4));
                            //rounds to 4 decimal places (the plus sign drops any trailing zeros)
                            overallGradeSteps.push(total);
                        } else {
                            overallGradeSteps.push(overallGradeSteps[overallGradeSteps.length - 1]);
                        }
                    }
                } catch (err) {
                    // console.log(err);
                    // console.log("bad weight input");
                }
            }
            let assignmentNames = classData.grades.filter(x => !x.exclude).map(x => x.assignment_name);
            let assignmentDates = classData.grades.filter(x => !x.exclude).map(x => x.date);
            let assignmentTimestamps = classData.grades.filter(x => !x.exclude).map(x => new Date(x.date));
            let assignmentPercents = classData.grades.filter(x => !x.exclude).map(x => x.grade_percent);
            let assignmentScoresParsed = classData.grades.filter(x => !x.exclude).map(x => (x.points_gotten === false ? "--" : x.points_gotten) + (x.points_possible === false ? "" : "/" + x.points_possible));
            let assignmentCategories = classData.grades.filter(x => !x.exclude).map(x => x.category);
            let mixedData = overallGradeSteps.map(function (grade, i) {
                return {x: assignmentTimestamps[i], y: grade};
            });
            parsedData.push({
                                assignmentNames: assignmentNames,
                                assignmentDates: assignmentDates,
                                assignmentTimestamps: assignmentTimestamps,
                                assignmentPercents: assignmentPercents,
                                assignmentScoresParsed: assignmentScoresParsed,
                                assignmentCategories: assignmentCategories,
                                mixedData: mixedData
                            });
            assignmentNames = classData.grades.filter(x => x.exclude).map(x => x.assignment_name);
            assignmentDates = classData.grades.filter(x => x.exclude).map(x => x.date);
            assignmentPercents = classData.grades.filter(x => x.exclude).map(x => x.grade_percent);
            assignmentScoresParsed = classData.grades.filter(x => x.exclude).map(x => (x.points_gotten === false ? "--" : x.points_gotten) + (x.points_possible === false ? "" : "/" + x.points_possible));
            assignmentCategories = classData.grades.filter(x => x.exclude).map(x => x.category);
            excludedData.push({
                                  assignmentNames: assignmentNames,
                                  assignmentDates: assignmentDates,
                                  assignmentPercents: assignmentPercents,
                                  assignmentScoresParsed: assignmentScoresParsed,
                                  assignmentCategories: assignmentCategories
                              });
        }

    }

    function renderAllCharts() {
        try {
            renderOverviewChart();
            for (let i = 0; i < data.length; i++) {
                renderChart(i);
            }
        } catch {
        }
    }

    function resetZoom(id) {
        // After experimenting, any chart without 28 keys does not reset, so rerender it
        if (Object.keys(charts[id + 1]).length !== 28) {
            renderChart(id);
        } else {
            charts[id + 1].resetZoom();
        }
    }

    let hoveredDatasetIndex = -1;

    let running;

    function renderOverviewChart() {
        $("#chart-1").remove();
        $("#chart-container-1").append("<canvas id=\"chart-1\" class=\"chart\"></canvas>");
        let ctx = document.getElementById("chart-1");
        let dataset = [];
        let _colors = colors;
        for (let i = 0; i < data.length; i++) {
            dataset.push({
                             label: data[i].class_name,
                             backgroundColor: "transparent",
                             pointBackgroundColor: _colors[i],
                             pointBorderColor: "transparent",
                             borderColor: _colors[i],
                             data: parsedData[i].mixedData,
                             cubicInterpolationMode: "monotone",
                             spanGaps: false,
                             pointRadius: 3,
                             borderWidth: 3,
                             pointHoverRadius: 7,
                             pointHoverBackgroundColor: _colors[i],
                             pointHoverBorderColor: _colors[i],
                             pointHoverBorderWidth: 2
                         });
        }
        let numRunning = 0;
        charts[0] = new Chart(ctx, {
            type: "line", data: {
                datasets: dataset
            }, options: {
                hover: {
                    mode: "nearest", intersect: false
                }, onHover: function onHover(evt, activeElements) {
                    if (!activeElements || !activeElements.length) {
                        return;
                    }
                    let datasetIndex = activeElements[0]._datasetIndex;
                    let activeDataset = this.data.datasets[datasetIndex];
                    for (let i = 0; i < this.data.datasets.length; i++) {
                        let inactiveDataset = this.data.datasets[i];
                        inactiveDataset.borderWidth = 3;
                        inactiveDataset.pointRadius = 3;
                    }
                    activeDataset.borderWidth = 6;
                    activeDataset.pointRadius = 6;
                    this.update(100);
                    let chart = this;
                    if (numRunning === 0) {
                        clearTimeout(running);
                        numRunning++;
                        running = setTimeout(() => {
                            numRunning--;
                            for (let i = 0; i < chart.data.datasets.length; i++) {
                                let dataset = chart.data.datasets[i];
                                dataset.borderWidth = 3;
                                dataset.pointRadius = 3;
                            }
                            chart.update(1000);
                        }, 6000);
                    }
                }, scales: {
                    xAxes: [{
                        type: "time", time: {
                            unit: "month"
                        }, ticks: {
                            fontColor: (darkMode ? "white" : "black"), fontFamily: "Verdana", fontSize: "13"
                        }, gridLines: {
                            color: (darkMode ? "#555555" : "#CCCCCC")
                        }
                    }], yAxes: [{
                        ticks: {
                            max: 110,
                            min: 70,
                            fontColor: (darkMode ? "white" : "black"),
                            fontFamily: "Verdana",
                            fontSize: "12"
                        }, gridLines: {
                            color: (darkMode ? "#555555" : "#CCCCCC"), drawBorder: false
                        }
                    }]
                }, animation: {
                    easing: "easeOutCubic"
                }, legend: {
                    display: true, position: "top", labels: {
                        fontColor: (darkMode ? "white" : "black"), fontFamily: "Verdana", boxWidth: 20, fontSize: 13
                    }
                }, tooltips: {
                    enabled: true, position: "nearest", intersect: false, displayColors: true, callbacks: {
                        title: function (tooltipItems) {
                            return moment(tooltipItems[0].xLabel).format("MM/DD/YY") + " " + +parseFloat(tooltipItems[0].value).toFixed(2) + "%";
                        }, label: function (tooltipItem) {
                            return ["[" + parsedData[tooltipItem.datasetIndex].assignmentCategories[tooltipItem.index] + "] " + parsedData[tooltipItem.datasetIndex].assignmentNames[tooltipItem.index] + ((parsedData[tooltipItem.datasetIndex].assignmentPercents[tooltipItem.index] !== -1 && parsedData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].substring(0, 2) !== "--") ? (" - " + parsedData[tooltipItem.datasetIndex].assignmentPercents[tooltipItem.index] + "% ") : (" ")) + ((parsedData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].substring(parsedData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].length - 2)) !== "/0" ? ("(" + parsedData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index] + ")") : ("(" + parsedData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].substring(0, parsedData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].length - 2) + ")"))];
                        }
                    }
                }, responsive: true, maintainAspectRatio: false, plugins: {
                    zoom: {
                        zoom: {
                            enabled: true, mode: "y", speed: 0.05, onZoom: ({chart}) => {
                                $("#reset-zoom-1").show();

                                // Disable hovering and tooltips to make animation smoother
                                chart.options.hover.mode = null;
                                chart.options.tooltips.enabled = false;
                            }, onZoomComplete: ({chart}) => {
                                chart.options.hover.mode = "nearest";
                                chart.options.tooltips.enabled = true;
                            }
                        }, pan: {
                            enabled: true, mode: "y", speed: 0.05, onPan: ({chart}) => {
                                $("#reset-zoom-1").show();

                                // Disable hovering and tooltips to make animation smoother
                                chart.options.hover.mode = null;
                                chart.options.tooltips.enabled = false;
                            }, onPanComplete: ({chart}) => {
                                chart.options.hover.mode = "nearest";
                                chart.options.tooltips.enabled = true;
                            }
                        }
                    }
                }
            }
        });
    }

    function renderChart(id) {
        $("#chart" + id).remove();
        $("#chart-container" + id).append("<canvas id=\"chart" + id + "\" class=\"chart\"></canvas>");
        let ctx = document.getElementById("chart" + id);
        let _colors = colors;
        charts[id + 1] = new Chart(ctx, {
            type: "line", data: {
                datasets: [{
                    label: "parsedData[id]",
                    backgroundColor: (darkMode ? "rgba(256,256,256,0.05)" : "rgba(0,0,0,0.05)"),
                    pointBackgroundColor: _colors[id],
                    pointBorderColor: _colors[id],
                    borderColor: _colors[id],
                    fill: "start",
                    data: parsedData[id].mixedData,
                    cubicInterpolationMode: "monotone",
                    spanGaps: false,
                    pointRadius: 3,
                    borderWidth: 3,
                    pointHoverRadius: 7,
                    pointHoverBackgroundColor: _colors[id],
                    pointHoverBorderColor: _colors[id],
                    pointHoverBorderWidth: 2
                }]
            }, options: {
                hover: {
                    mode: "nearest", intersect: false
                }, scales: {
                    xAxes: [{
                        type: "time", time: {
                            unit: "month"
                        }, ticks: {
                            fontColor: (darkMode ? "white" : "black"), fontFamily: "Verdana", fontSize: "13"
                        }, gridLines: {
                            color: (darkMode ? "#555555" : "#CCCCCC")
                        }
                    }], yAxes: [{
                        ticks: {
                            fontColor: (darkMode ? "white" : "black"), fontFamily: "Verdana", fontSize: "12"
                        }, gridLines: {
                            color: (darkMode ? "#555555" : "#CCCCCC"), drawBorder: false
                        }
                    }]
                }, animation: {
                    easing: "easeOutCubic"
                }, legend: {
                    display: false
                }, tooltips: {
                    enabled: true, position: "nearest", intersect: false, displayColors: false, callbacks: {
                        title: function (tooltipItems, data) {
                            return moment(tooltipItems[0].xLabel).format("MM/DD/YY") + " " + +parseFloat(tooltipItems[0].value).toFixed(4) + "%";
                        }, label: function (tooltipItem, data) {
                            return ["[" + parsedData[id].assignmentCategories[tooltipItem.index] + "] " + parsedData[id].assignmentNames[tooltipItem.index] + ((parsedData[id].assignmentPercents[tooltipItem.index] !== -1 && parsedData[id].assignmentScoresParsed[tooltipItem.index].substring(0, 2) !== "--") ? (" - " + parsedData[id].assignmentPercents[tooltipItem.index] + "% ") : (" ")) + ((parsedData[id].assignmentScoresParsed[tooltipItem.index].substring(parsedData[id].assignmentScoresParsed[tooltipItem.index].length - 2)) !== "/0" ? ("(" + parsedData[id].assignmentScoresParsed[tooltipItem.index] + ")") : ("(" + parsedData[id].assignmentScoresParsed[tooltipItem.index].substring(0, parsedData[id].assignmentScoresParsed[tooltipItem.index].length - 2) + ")"))];
                        }
                    }
                }, responsive: true, maintainAspectRatio: false, plugins: {
                    zoom: {
                        zoom: {
                            enabled: true, mode: "y", speed: 0.05, onZoom: ({chart}) => {
                                $("#reset-zoom" + id).show();

                                // Disable hovering and tooltips to make animation smoother
                                chart.options.hover.mode = null;
                                chart.options.tooltips.enabled = false;
                            }, onZoomComplete: ({chart}) => {
                                chart.options.hover.mode = "nearest";
                                chart.options.tooltips.enabled = true;
                            }
                        }, pan: {
                            enabled: true, mode: "y", speed: 0.05, onPan: ({chart}) => {
                                $("#reset-zoom" + id).show();

                                // Disable hovering and tooltips to make animation smoother
                                chart.options.hover.mode = null;
                                chart.options.tooltips.enabled = false;
                            }, onPanComplete: ({chart}) => {
                                chart.options.hover.mode = "nearest";
                                chart.options.tooltips.enabled = true;
                            }
                        }
                    }
                }
            }
        });
    }

    function showPage(id) {
        document.getElementById("pageNumber").textContent = id;
        for (let i = -1; i < data.length; i++) {
            document.getElementById("link" + i).classList.remove("active");
        }
        document.getElementById("link" + id).classList.add("active");
        for (let i = -1; i < data.length; i++) {
            document.getElementById("section" + i).style.display = "none";
        }
        document.getElementById("section" + id).style.display = "block";
        window.localStorage.setItem("currentPage", id);
        currentPage = id;
    }

    document.onkeydown = function (e) {
        if ($("input").is(":focus")) {
            // Do nothing
        } else if (e.code === "ArrowUp") {
            // up arrow
        } else if (e.code === "ArrowDown") {
            // down arrow
        } else if (e.code === "ArrowLeft") {
            // left arrow
            if (cardsDisplayed.includes("settingsCardDisplay")) {
                if (currentTab === 1) {
                    openTab(maxTab);
                } else {
                    openTab(currentTab - 1);
                }
            } else if (cardsDisplayed.length === 0) {
                if (currentPage === -1) {
                    showPage(data.length - 1);
                } else {
                    showPage(currentPage - 1);
                }
            }
        } else if (e.code === "ArrowRight") {
            // right arrow
            if (cardsDisplayed.includes("settingsCardDisplay")) {
                if (currentTab === maxTab) {
                    openTab(1);
                } else {
                    openTab(currentTab + 1);
                }
            } else if (cardsDisplayed.length === 0) {
                if (currentPage === data.length - 1) {
                    showPage(-1);
                } else {
                    showPage(currentPage + 1);
                }
            }
        } else if (e.code === "KeyS") {
            if (cardsDisplayed.includes("settingsCardDisplay")) {
                if (cardsDisplayed.indexOf("settingsCardDisplay") !== cardsDisplayed.length - 1) {
                    closeForm("settingsCardDisplay");
                    showCard("#settingsCardDisplay");
                } else {
                    closeForm("settingsCardDisplay");
                }
            } else {
                showCard("#settingsCardDisplay");
            }
        } else if (e.code === "KeyW") {
            if (cardsDisplayed.includes("latestDisplay")) {
                if (cardsDisplayed.indexOf("latestDisplay") !== cardsDisplayed.length - 1) {
                    closeForm("latestDisplay");
                    showLatest(true);
                } else {
                    closeForm("latestDisplay");
                }
            } else {
                showLatest(true);
            }
        } else if (e.code === "KeyQ") {
            if (cardsDisplayed.includes("changelogDisplay")) {
                if (cardsDisplayed.indexOf("changelogDisplay") !== cardsDisplayed.length - 1) {
                    closeForm("changelogDisplay");
                    showChangelog();
                } else {
                    closeForm("changelogDisplay");
                }
            } else {
                showChangelog();
            }
        } else if (e.code === "KeyK") {
            if (cardsDisplayed.includes("shortcutsDisplay")) {
                if (cardsDisplayed.indexOf("shortcutsDisplay") !== cardsDisplayed.length - 1) {
                    closeForm("shortcutsDisplay");
                    showCard("#shortcutsDisplay");
                } else {
                    closeForm("shortcutsDisplay");
                }
            } else {
                showCard("#shortcutsDisplay");
            }
        } else {
            //console.log(e.code);
        }
    };

    function isEqual(a, b) {
        let aProps = Object.getOwnPropertyNames(a);
        let bProps = Object.getOwnPropertyNames(b);

        // If number of properties is different,
        // objects are not equivalent
        if (aProps.length != bProps.length) {
            return false;
        }

        for (let i = 0; i < aProps.length; i++) {
            let propName = aProps[i];

            // If values of same property are not equal,
            // objects are not equivalent
            if (a[propName] !== b[propName]) {
                return false;
            }
        }

        // If we made it this far, objects
        // are considered equivalent
        return true;
    }


    //TODO I'm pretty sure the following two functions do the same thing but I'm not sure so I'll keep them for now -- Joel
    function resetWeights(index) {
        let className = data[index].class_name;
        $("#check" + index).prop("checked", relClassData[className]["hasWeights"] == "false");
        disableInput("check" + index, "weightsTable" + index);
        let keys = Object.keys(weights[className]["weights"]);
        for (let i = 0; i < keys.length; i++) {
            if (keys[i] in relClassData[className]["weights"]) {
                $("#weightTableWeight" + index + i + " input").val(relClassData[className]["weights"][keys[i]]);
            } else if (tempWeights[className]) {
                $("#weightTableWeight" + index + i + " input").val(tempWeights[className][keys[i]]);
            }
        }

        let hasWeights = eval(relClassData[className]["hasWeights"]);
        if (eval(weights[className]["hasWeights"]) != eval(hasWeights)) {
            if (!hasWeights) {
                tempWeights[className] = Object.assign({}, weights[className]["weights"]);
            }
        }
    }

    //Resets inputs to old weight value when exiting point based
    function resetInputs(form) {
        let hasWeights = !($(form).find("input[name=\"hasWeights\"]")).is(":checked");
        let className = data[$(form)[0].id.substring(7)].class_name;
        if (eval(weights[className]["hasWeights"]) != eval(hasWeights)) {
            if (!hasWeights) {
                tempWeights[className] = Object.assign({}, weights[className]["weights"]);
            } else if (tempWeights[className]) {
                for (let i = 0; i < Object.keys(weights[className]["weights"]).length; i++) {
                    let weight = $("#weightTableWeight" + $(form)[0].id.substring(7) + i + " input");
                    weight.val(tempWeights[className][Object.keys(tempWeights[className])[i]]);
                }
            }
        }
    }

    $(function initAjaxFormPosts() {
        if ($("form.form-weights").length > 0) {
            $("form.form-weights").each(function () {
                let form = $(this);
                $(form).submit(function (event) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                    let hasWeights = !($(form).find("input[name=\"hasWeights\"]")).is(":checked");
                    let className = data[$(form)[0].id.substring(7)].class_name;

                    let weightData = $(form).serializeArray();
                    let weightURI = {};
                    jQuery.map(weightData, function (n, i) {
                        if (n.name !== "hasWeights") {
                            weightURI[n.name] = isNaN(parseFloat(n.value)) ? null : parseFloat(n.value);
                        }
                    });
                    if (isEqual(weights[className]["weights"], weightURI) && weights[className]["hasWeights"] === "true" == hasWeights) {
                        return;
                    }
                    weightURI = encodeURIComponent(JSON.stringify(weightURI));
                    className = encodeURI(className);
                    hasWeights = encodeURI(hasWeights);
                    let formData = "className=" + className + "&hasWeights=" + hasWeights + "&newWeights=" + weightURI;

                    $.ajax({
                               type: "POST", url: $(form).attr("action"), data: formData
                           }).done((data) => {
                        // Make sure that the formMessages div has the alert-success class.
                        className = decodeURI(className);
                        weights[className]["custom"] = data.includes("Custom");
                        for (let i = 0; i < Object.keys(weights[className]["weights"]).length; i++) {
                            let weight = $("#weightTableWeight" + $(form)[0].id.substring(7) + i + " input");
                            if (weight[0].value) {
                                weight.addClass("text-view");
                                weight.css("border-color", "unset");
                            } else {
                                weight.removeClass("text-view");
                                weight.css("border-color", "lightcoral");
                            }
                        }
                        if (weightData[0].value === "on") {
                            weights[className]["hasWeights"] = "false";
                            setPointBasedWeights();
                        } else {
                            weights[className]["hasWeights"] = "true";
                            if (weightData.length === 0) {
                                return;
                            }
                            for (let weight of weightData) {
                                weights[className]["weights"][weight.name] = parseFloat(weight.value);
                            }
                        }
                        refreshWithoutReload();
                    });
                });
            });
        }
    });

</script>
</body>
</html>
