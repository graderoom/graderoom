<!doctype html>
<html lang="en-US">
<head>
    <title>Graderoom</title>
    <link rel="icon" href="public/resources/common/icon.png">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat:500&display=swap">
    <% let theme; %>
    <% if (JSON.parse(appearance).theme === "dark") { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/dark_mode.css">
    <% } else if (JSON.parse(appearance).theme === "light") { %>
        <% theme = false; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/light_mode.css">
    <% } else if ((((JSON.parse(appearance).darkModeStart < JSON.parse(appearance).darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8 + (dst ? 1 : 0)) % 24) >= JSON.parse(appearance).darkModeStart) && ((Date.now() / 1000 / 3600 - 8 + (dst ? 1 : 0)) % 24) < JSON.parse(appearance).darkModeFinish)) || ((JSON.parse(appearance).darkModeStart > JSON.parse(appearance).darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8 + (dst ? 1 : 0)) % 24) >= JSON.parse(appearance).darkModeStart) || ((Date.now() / 1000 / 3600 - 8 + (dst ? 1 : 0)) % 24) < JSON.parse(appearance).darkModeFinish)))) { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/dark_mode.css">
    <% } else { %>
        <% theme = false; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="public/css/light_mode.css">
    <% } %>
    <link rel="stylesheet" type="text/css" href="public/css/main.css">
    <link id="blur_base" rel="stylesheet" type="text/css" href="public/css/blur.css"
          <% if (!JSON.parse(appearance).blurEffects) { %>disabled
            <% } %>
    >
    <link id="blur_overrides" rel="stylesheet" type="text/css"
          href="public/css/<%= (theme ? "dark" : "light"); %>_blur.css"
          <% if (!JSON.parse(appearance).blurEffects) { %>disabled
            <% } %>
    >
    <link id="fade" rel="stylesheet" type="text/css" href="public/css/fade.css" disabled>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- JavaScript Imports -->
    <script src="https://cdn.jsdelivr.net/npm/moment@2.24.0/moment.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3"></script>
    <script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@0.7.7"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.15/lodash.min.js"></script>
</head>
<body>

<% if (JSON.parse(alerts).policyLastSeen === "never" || JSON.parse(alerts).termsLastSeen === "never") { %>

    <% if (JSON.parse(alerts).termsLastSeen === "never") { %>
        <% include partials/user/terms_and_conditions.ejs %>
            <script>
                $("#termsDisplay").show();
            </script>
    <% } %>
    <% if (JSON.parse(alerts).policyLastSeen === "never") { %>
        <% include partials/user/privacy_policy.ejs %>
            <script>
                $("#privacyDisplay").show();
            </script>
    <% } %>

<% } else { %>

    <!-- Navbar -->
    <% include partials/user/navbar.ejs %>
        <% <!-- DO NOT REMOVE this is there for my IDE's autoformatting to not mess up --> %>

        <% let classPage = -1; %>
        <i id="pageNumber" style="display:none"><%= classPage; %></i>

        <!-- Class Links -->
        <% if (JSON.parse(gradeData).length > 0) { %>
            <ul id="classLinks" class="nav nav-fill" style="color: #BBBBBB">
                <li class="nav-item" id="link-1">
                    <a class="nav-link" onclick="showPage(-1)">Overview</a>
                </li>
                <% let offset = 0; %>
                <% for (let i = 0; i < JSON.parse(gradeData).length; i++) { %>
                    <% if (JSON.parse(appearance).showNonAcademic || JSON.parse(relevantClassData)[JSON.parse(gradeData)[i].class_name]["classType"] !== "non-academic") { %>
                        <li class="nav-item" id="link<%= i + offset; %>">
                            <a class="nav-link" style="color: <%= JSON.parse(appearance).classColors[i]; %>"
                               onclick="showPage(<%= i + offset; %>)"><%= (JSON.parse(gradeData)[i].class_name); %>
                                <br><%= (JSON.parse(gradeData)[i].overall_percent + '%'); %>
                                (<%= (JSON.parse(gradeData)[i].overall_letter); %>)
                                <span class="popup">
                                    <i id="incorrectOverviewGrade<%= i + offset; %>"
                                       class="fa fa-exclamation-triangle"
                                       style="display: none; margin-left: 0.2rem">
                                        <span class="popup-bottom">
                                            Does not match calculated grade
                                        </span>
                                    </i></span>
                            </a>
                        </li>
                    <% } else {
                        offset--;
                    } %>
                <% } %>
            </ul>
        <% } %>

        <script>
            let oldSemester = false;
        </script>
        <!-- Main Screen -->
        <div class="container">
            <div class="backToHome" style="display: none" onclick="showPage(-1)">
                <i class="fa fa-arrow-left"></i>
                <span></span>
            </div>
            <div style="display:none; width: fit-content; width: -moz-fit-content; margin: 0 auto;" id="oldSemesterMsg"
                 class="alert alert-info text-center font-weight-bold">At the moment, this
                semester is view only. Edits will not be saved.
            </div>
            <% if (JSON.parse(betaFeatures).showTermSwitcher) { %>
                <div id="termSwitcher" class="blur">
                    <% for (let i = 0; i < JSON.parse(termsAndSemesters).length; i++) { %>
                        <div id="<%= JSON.parse(termsAndSemesters)[i][0] ;%>"><%= JSON.parse(termsAndSemesters)[i][0] ;%>

                            <% for (let j = 0; j < JSON.parse(termsAndSemesters)[i][1].length; j++) { %>
                                <div onclick="window.location.href='/' + (window.location.href.indexOf('usernameToRender') === -1 ? '?' : 'viewuser?' + window.location.href.slice(window.location.href.indexOf('usernameToRender'),window.location.href.indexOf('&') === -1 ? undefined : window.location.href.indexOf('&')) + '&') + 'term=<%= JSON.parse(termsAndSemesters)[i][0] ;%>&semester=<%= JSON.parse(termsAndSemesters)[i][1][j] ;%>'"
                                     id="<%= JSON.parse(termsAndSemesters)[i][0] ;%><%= JSON.parse(termsAndSemesters)[i][1][j] ;%>"><%= JSON.parse(termsAndSemesters)[i][1][j] ;%></div>
                            <% } %>
                        </div>
                        <script>
                            props = window.location.href.includes("?") ? Object.fromEntries(window.location.href.split("?")[1].split("&").map(prop => prop.split("="))) : {};
                            if ("term" in props && "semester" in props) {
                                $("#" + props["term"]).addClass("active");
                                $("#" + props["term"] + props["semester"]).addClass("active");
                                $("#oldSemesterMsg").show();
                                $("#recentChangesNavBtn").hide();
                                oldSemester = true;
                            } else {
                                let termsAndSemesters = <%- termsAndSemesters %>;
                                $("#" + termsAndSemesters.slice(-1)[0][0]).addClass("active");
                                $("#" + termsAndSemesters.slice(-1)[0][0] + termsAndSemesters.slice(-1)[0][1].slice(-1)[0]).addClass("active");
                            }
                        </script>
                    <% } %>
                </div>
            <% } %>
            <!-- Overview Section -->
            <% if (JSON.parse(gradeData).length) { %>
                <div id="section-1">
                    <div style="display: flex">
                        <div id="GPA-container">
                            <div id="weightedGPAToggle">
                                <form id="weightedGPAForm" action="/weightedGPA" method="post">
                                    <input name="weightedGPA"
                                           value="<% if (JSON.parse(appearance).weightedGPA) { %>false<% } else { %>true<% } %>"
                                           style="display: none">
                                    <button onclick="ajaxPostForm('#weightedGPAForm',[],'',true)"
                                    <% if (JSON.parse(appearance).weightedGPA) { %> type="button"
                                            <% } %>
                                            class="<% if (JSON.parse(appearance).weightedGPA) { %> active <% } %> btn">
                                        Weighted
                                    </button>
                                    <button onclick="ajaxPostForm('#weightedGPAForm',[],'',true)"
                                    <% if (!JSON.parse(appearance).weightedGPA) { %> type="button"
                                            <% } %>
                                            class="<% if (!JSON.parse(appearance).weightedGPA) { %> active <% } %> btn">
                                        Unweighted
                                    </button>
                                </form>
                            </div>
                            <div>
                                <% let accentColor = _.sample(JSON.parse(appearance).classColors); %>
                                <h5 class="text-center">Semester GPA<span
                                            class="popup"><i class="fa fa-question-circle"
                                                             style="margin-left: 0.4rem"><span
                                                    class="popup-right-top">This metric is based on your grades from
                                                this semester.</span></i></span>
                                </h5>
                                <h5 id="GPA-display">----/----</h5>
                            </div>
                            <% if (JSON.parse(gradeHistory).length) { %>
                                <div>
                                    <h5 class="text-center">Cumulative GPA<span class="popup"><i
                                                    class="fa fa-question-circle"
                                                    style="margin-left: 0.4rem"><span
                                                        class="popup-right-top">Your cumulative GPA
                                                    is what shows up on your transcript. It does not include pe or
                                                    summer classes. This cumulative GPA does not include your current
                                                    semester.</span></i></span></h5>
                                    <h5 id="GPA-display-cumulative">----/----</h5>
                                </div>
                            <% } %>
                            <div style="opacity: 0.2; pointer-events: none">
                                <h5 class="text-center">UC GPA<span class="popup"><i class="fa fa-question-circle"
                                                                                     style="margin-left: 0.4rem"><span
                                                    class="popup-right-top">This is your GPA as calculated by the <span
                                                        style="color: <%= accentColor; %>">University of
                                                    California</span>. This metric uses grades from 9<sup>th</sup>
                                                through 11<sup>th</sup> grade and does not include religion, pe, or
                                                summer classes.</span></i></span></h5>
                                <h5 id="GPA-display-uc">Coming Soon!</h5>
                            </div>
                        </div>
                        <div id="chart-container-1" class="chart chart-container text-center">
                            <button id="reset-zoom-1"
                                    style="position: absolute; top: 0; right: 0; height: fit-content; display:none"
                                    class="btn btn-sm" onclick="resetZoom(-1); $(this).hide()">Reset
                            </button>
                            <div class="chart chart-placeholder fa fa-spin fa-spinner"></div>
                            <canvas id="chart-1" style="height: 60vh; width: 60vw;"></canvas>
                        </div>
                    </div>
                    <br>
                    <div class="table" id="table-1">
                        <% offset = 0; %>
                        <% for (let i = 0; i < JSON.parse(gradeData).length; i++) { %>
                            <% if (JSON.parse(appearance).showNonAcademic || JSON.parse(relevantClassData)[JSON.parse(gradeData)[i].class_name]["classType"] !== "non-academic") { %>
                                <table class="rounded-table text-center">
                                    <thead>
                                        <tr>
                                            <th id="overview<%= i + offset; %>" class="overview"
                                                style="cursor: pointer; text-align: center; color: <%= JSON.parse(appearance).classColors[i]; %>"
                                                onclick="showPage(<%= i + offset; %>)">
                                                <%= JSON.parse(gradeData)[i].class_name; %>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td class="overview"
                                                style="padding-top: 0.5rem; padding-bottom: 0; cursor: pointer; color: <%= JSON.parse(appearance).classColors[i]; %>"
                                                onclick="showPage(<%= i + offset; %>)">
                                                <div id="overviewChart<%= i + offset; %>"
                                                     style="display:block; font-weight:bolder">
                                                    <div style="color: <%= JSON.parse(appearance).classColors[i]; %> !important">
                                                        <div class="overallLetter"><%= JSON.parse(gradeData)[i].overall_letter %></div>
                                                        <div class="overallGrade"><%= JSON.parse(gradeData)[i].overall_percent %>
                                                            %
                                                        </div>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            <% } else {
                                offset--;
                            } %>
                        <% } %>
                    </div>
                </div>
            <% } %>
            <!-- Class Sections -->
            <% offset = 0; %>
            <% for (let i = 0; i < JSON.parse(gradeData).length; i++) { %>
                <% if (JSON.parse(appearance).showNonAcademic || JSON.parse(relevantClassData)[JSON.parse(gradeData).filter(g => g.grades.length)[i].class_name]["classType"] !== "non-academic") { %>
                    <span id="section<%= i + offset; %>" class="section" style="display: none;">
                        <% if (JSON.parse(relevantClassData)[JSON.parse(gradeData)[i].class_name]["classType"] === "non-academic") { %>
                            <div style="display:block">
                                <div class="alert alert-info font-weight-bold"
                                     id="weightmsg<%= i + offset; %>">This class is non-academic. You can stop
                                    non-academic classes from being displayed in <u style="cursor: pointer"
                                                                                    onclick="showCard('#settingsCardDisplay');">settings</u>
                                </div>
                            </div>
                        <% } %>
                        <div class="chartAndWeights">
                            <div id="chart-container<%= i + offset; %>" class="chart chart-container">
                                <div class="chart-placeholder fa fa-spin fa-spinner"></div>
                            </div>
                            <div class="weights-container">
                                <form id="weights<%= i + offset; %>" class="form-ajax form-weights form-signin">
                                    <table class="table text-center weights rounded-table"
                                           style="white-space: nowrap"
                                           id="weightsTable<%= i + offset; %>">
                                        <thead>
                                            <tr>
                                                <th colspan="4" style="padding: 0.3rem 0;">
                                                    <label style="display: flex; font-size: 1rem; justify-content: center; margin: 0; align-items: flex-start">Point
                                                        Based&nbsp;
                                                        <label class="switch">
                                                            <input disabled
                                                                   id="check<%= i + offset; %>"
                                                                   style="margin: 0; display: flex"
                                                                   type="checkbox"
                                                                   name="hasWeights"
                                                            <% if (JSON.parse(weightData)[JSON.parse(gradeData)[i].class_name]["hasWeights"] === "false") { %>
                                                                   checked
                                                                    <% } %>
                                                                   onchange="disableInput('check<%= i + offset; %>','weightsTable<%= i + offset; %>'); resetInputs('#weights<%= i + offset; %>'); $('#weights<%= i + offset; %>').submit();"
                                                            >
                                                            <span style="color: <%= JSON.parse(appearance).classColors[i + offset]; %>"
                                                                  class="classSlider slider"></span>
                                                        </label>
                                                    </label>
                                                </th>
                                            </tr>
                                            <tr>
                                                <th>Category</th>
                                                <th id="weight-header<%= i + offset; %>">
                                                    Weights
                                                    <span class="popup">
                                                        <i
                                                                id="reset<%= i + offset; %>"
                                                                style="margin: 0; cursor: pointer; display:inline-block"
                                                                class="fa fa-undo"
                                                                onclick="resetWeights(<%= i + offset; %>); $('#weights<%= i + offset; %>').submit();">
                                                            <span class="popup-top">Revert
                                                                to Crowdsourced Default</span>
                                                        </i>
                                                    </span>
                                                    <span class="popup">
                                                        <i style="display: inline-block"
                                                           id="ignoringWeights<%= i + offset; %>"
                                                           class="fa fa-exclamation-triangle">
                                                            <span class="popup-top">
                                                                Enter all weights to enable weighted overall grade
                                                                calculation
                                                                or choose the point-based option.
                                                            </span>
                                                        </i>
                                                    </span>
                                                </th>
                                                <th>Score</th>
                                                <th>Grade</th>
                                            </tr>
                                        </thead>
                                        <tbody>

                                            <% for (let j = 0; j < Object.keys(JSON.parse(weightData)[JSON.parse(gradeData)[i].class_name]["weights"]).length; j++) { %>
                                                <tr>
                                                    <td id="weightTableCategory<%= i + offset; %><%= j; %>"></td>
                                                    <% let weights = JSON.parse(weightData)[JSON.parse(gradeData)[i].class_name]["weights"]; %>
                                                    <% let category = Object.keys(weights)[j]; %>
                                                    <% let value = weights[category]; %>
                                                    <td id="weightTableWeight<%= i + offset; %><%= j; %>"
                                                        class="form-group">
                                                        <input style="<% if (!value && value !== 0) { %> border-color: lightcoral !important; <% } %>"
                                                               value="<%= value; %>"
                                                               type="number"
                                                               min="0"
                                                               step="0.01"
                                                               class="number-input disableable form-control <% if(value || value === 0){ %> text-view <% } %>"
                                                               name="<%= category; %>"
                                                               disabled
                                                        >
                                                    </td>
                                                    <td id="weightTablePoints<%= i + offset; %><%= j; %>"></td>
                                                    <td id="weightTableGrade<%= i + offset; %><%= j; %>"></td>
                                                </tr>
                                            <% } %>
                                            <script>
                                                function disableInput(checkBoxID, id) {
                                                    $("#" + id).find(".disableable").each(function () {
                                                        if ($("#" + checkBoxID).is(":checked")) {
                                                            $(this).val("");
                                                            $(this).addClass("disabled");
                                                            $(this).attr("disabled", "disabled");
                                                        } else {
                                                            $(this).removeClass("disabled");
                                                            $(this).removeAttr("disabled");
                                                        }
                                                    });
                                                }

                                                disableInput('check<%= i + offset; %>', 'weightsTable<%= i + offset; %>');
                                            </script>
                                        <tfoot>
                                            <tr>
                                                <th colspan="4">
                                                    <span class="popup">
                                                        <i id="incorrectOverallGrade<%= i + offset; %>"
                                                           class="fa fa-exclamation-circle"
                                                           style="margin-left: 0.2rem; vertical-align: middle">
                                                            <span class="popup-bottom-left always-show">
                                                                <% let grade = JSON.parse(gradeData)[i].overall_percent + "%"; %>
                                                                Grade in PowerSchool:
                                                                <nobr><%= grade + " (" + JSON.parse(gradeData)[i].overall_letter + ")"; %></nobr>
                                                            </span>
                                                        </i>
                                                    </span>
                                                    <div style="display:none; color: <%= JSON.parse(appearance).classColors[i + offset]; %>"
                                                         id="weightTableOverallGrade<%= i + offset; %>"
                                                         class="weightOverall">
                                                    </div>
                                                </th>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </form>
                            </div>
                        </div>
                        <hr>
                        <div class="options-container">
                            <div class="add-assignment-container">
                                <form id="addAssignmentForm<%= i + offset; %>">
                                    <div class="add-assignment-header">
                                        <div class="addAssignment"
                                             onclick="{$(this).parents('.add-assignment-container').toggleClass('active').parents('div').toggleClass('keep-right');}">
                                            <i class="fa fa-plus"></i>
                                            <span>Add Assignment</span>
                                        </div>
                                        <button type="submit" class="btn btn-med">Add
                                        </button>
                                    </div>
                                    <table id="assignmentWizard<%= i + offset; %>"
                                           class="assignmentWizard">
                                        <tr>
                                            <td class="addAssignmentDate form-weights form-signin form-group input-group">
                                                <label id="dateLabel<%= i + offset; %>"
                                                       style="display:none">Date</label>
                                                <input class="form-control dynamic-input"
                                                       type="text"
                                                       onfocus="this.type='date'; $('#dateLabel<%= i + offset; %>').show().addClass('label-active');"
                                                       onblur="this.type='text'; checkLabel(this); $('#dateLabel<%= i + offset; %>:not(.label-active)').hide(); "
                                                       placeholder="Date" required>
                                            </td>
                                            <td class="form-weights form-signin">
                                                <div class="excludeToggle"
                                                     style="display: flex; justify-content: space-between; align-items: center">
                                                    <div class="input-group addAssignmentName form-group">
                                                        <label>Assignment Name</label>
                                                        <input class="form-control dynamic-input"
                                                               type="text" oninput="checkLabel(this)" required>
                                                    </div>
                                                    <div style="display: flex; justify-content: center; flex-flow: column; align-items: center"
                                                         class="addExclude">
                                                        <input id="addExclude<%= i + offset; %>"
                                                               class="form-control" type="checkbox"
                                                               style="cursor: pointer">
                                                        <label for="addExclude<%= i + offset; %>"
                                                               style="cursor: pointer !important; margin: 0; display: block; font-weight: bolder; font-size: 0.5rem">Exclude</label>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="addAssignmentCategory form-group">
                                                <label>Category</label>
                                                <select class="minimal addCategory"
                                                        style="margin: 0"></select>
                                            </td>
                                            <td class="form-weights form-signin form-group addAssignmentScore">
                                                <label>Score</label>
                                                <div style="display: flex; justify-content: center; align-items: center">
                                                    <input class="form-control dynamic-input"
                                                           type="number" step="0.001"
                                                           style="padding: 0; width: 0 !important; "
                                                           placeholder="--">
                                                    /<input style="padding: 0; width: 0 !important; "
                                                            class="form-control dynamic-input"
                                                            type="number" step="0.001"
                                                            placeholder="--">
                                                </div>
                                            </td>
                                        </tr>
                                    </table>
                                </form>
                            </div>
                            <div class="tableOptionsContainer">
                                <div class="tableOptions">
                                    <div>Sort By</div>
                                    <select id="sortBy<%= i + offset; %>" class="classic"
                                            onchange="setSortMethod(this)">
                                        <option value="date"
                                                <% if (!JSON.parse(sortingData).categorySort[i + offset]) { %>selected
                                                <% } %>
                                        >Date
                                        </option>
                                        <option value="category"
                                                <% if (JSON.parse(sortingData).categorySort[i + offset]) { %>selected
                                                <% } %>
                                        >Category
                                        </option>
                                    </select>
                                    <span class="popup">
                                        <i style="cursor: pointer; margin: 1rem 0"
                                           class="fa <% if (JSON.parse(sortingData).dateSort[i + offset]) { %>fa-sort-amount-asc <% } else { %>fa-sort-amount-desc<% } %>"
                                           onclick="toggleSortDirection(<%= i + offset; %>)">
                                            <span class="popup-top">
                                                <% if (JSON.parse(sortingData).dateSort[i + offset]) { %>
                                                    Oldest to Newest
                                                <% } else { %>
                                                    Newest to Oldest
                                                <% } %>
                                            </span>
                                        </i>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="table-container">
                            <table class="table rounded-table class-table text-center" id="table<%= i + offset; %>">
                                <thead>
                                    <tr>
                                        <th class="compact">Date</th>
                                        <th>Assignment Name</th>
                                        <th class="compact">Category</th>
                                        <th>Score</th>
                                        <th class="compact">Assignment Percent</th>
                                        <th>Overall Grade</th>
                                        <th id="modAllTab<%= i + offset %>" class="toolTab">
                                            <span class="popup">
                                                <i id="resetAll<%= i + offset %>" class="fa fa-undo disabled"
                                                   onclick="{resetAll(this)}">
                                                    <span class="popup-top-left">
                                                        Revert ALL changes
                                                    </span>
                                                </i>
                                            </span>
                                            <span class="popup">
                                                <i id="trashAll<%= i + offset %>" class="fa fa-trash disabled"
                                                   onclick="{trashAll(this);}">
                                                    <span class="popup-top-left">
                                                        Delete ALL added assignments
                                                    </span>
                                                </i>
                                            </span>
                                            <span class="popup">
                                                <i id="saveAll<%= i + offset %>" class="fa fa-check disabled"
                                                   onclick="{saveAll(this);}">
                                                    <span class="popup-top-left">
                                                        Save ALL changes
                                                    </span>
                                                </i>
                                            </span>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                        <table class="table rounded-table class-table text-center categoryTable<%= i + offset; %>">
                            <% for (let j = 0; j < Object.keys(JSON.parse(weightData)[JSON.parse(gradeData)[i].class_name].weights).length; j++) { %>
                                <% let category = Object.keys(JSON.parse(weightData)[JSON.parse(gradeData)[i].class_name].weights)[j]; %>
                                <thead class="categoryStart">
                                    <% if (j > 0) { %>
                                        <tr class="separator">
                                            <td colspan="6"></td>
                                        </tr>
                                    <% } %>
                                    <tr>
                                        <th colspan="6"><%= category; %></th>
                                        <th class="toolTab categoryModAllTab<%= i + offset %>">
                                            <span class="popup">
                                                <i
                                                        class="fa fa-undo resetCategory<%= i + offset %> disabled"
                                                        onclick="{resetCategory(this)}">
                                                    <span class="popup-top-left">
                                                        Revert ALL changes in <span
                                                                class="tutorial-popup"><%= category; %></span>
                                                    </span>
                                                </i>
                                            </span>
                                            <span class="popup">
                                                <i
                                                        class="fa fa-trash trashCategory<%= i + offset %> disabled"
                                                        onclick="{trashCategory(this);}"><span
                                                            class="popup-top-left">
                                                        Delete ALL added assignments in <span
                                                                class="tutorial-popup"><%= category; %></span>
                                                    </span>
                                                </i>
                                            </span>
                                            <span class="popup">
                                                <i
                                                        class="fa fa-check saveCategory<%= i + offset %> disabled"
                                                        onclick="{saveCategory(this);}"><span
                                                            class="popup-top-left">
                                                        Save ALL changes in <span
                                                                class="tutorial-popup"><%= category; %></span>
                                                    </span>
                                                </i>
                                            </span>
                                        </th>
                                    </tr>
                                    <tr>
                                        <th>Date</th>
                                        <th>Assignment Name</th>
                                        <th>Category</th>
                                        <th>Score</th>
                                        <th>Assignment Percent</th>
                                        <th>Category Grade</th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            <% } %>
                        </table>
                    </span>
                <% } else {
                    offset--;
                } %>
            <% } %>
        </div>
        <!-- Custom JavaScript -->
        <script>

            let refreshing;
            let shortcutsEnabled = true;
            let recentlyAddedAssignment;
            let recentlyAddedAssignmentDiv;

            function setupColorStuff() {
                // Class links
                $.makeArray($("#classLinks a.nav-link")).slice(1).forEach((x, i) => $(x).css("color", colors[i]));

                // Overview Chart
                $.makeArray($(".overview")).forEach((x, i) => $(x).css("color", colors[Math.floor(i / 2) % colors.length]));

                // Sliders
                $.makeArray($(".classSlider")).forEach((x, i) => $(x).css("color", colors[i]));

                // Overall Grades in Weight Tables
                $.makeArray($(".weightOverall")).forEach((x, i) => $(x).css("color", colors[i]));

                // Render all charts
                renderAllCharts();
            }

            function colorAlphaFunction(delta) {
                let abs = Math.abs(delta);
                let max = 0.4;
                let maxInput = 10;
                let cutoff = Math.min(abs, maxInput);
                return max * Math.pow(cutoff / maxInput, 1 / 2.5);
            }

            function refresh(changedClassIndex) {
                // Trying to be efficient and only change affected data
                clearTimeout(refreshing);
                parseData(changedClassIndex);
                setupWeightsTables(changedClassIndex);
                setupOverviewTable(changedClassIndex);
                setupClassTables(changedClassIndex);
                setupGPADisplays();
                setupIncorrectGradeMessages(changedClassIndex);
                setPointBasedWeights(changedClassIndex);
                renderAllCharts(changedClassIndex);
            }

            function refreshWithoutReload(doItNow = false, changedClassIndex) {
                if (doItNow) {
                    if (refreshing) {
                        clearTimeout(refreshing);
                    }
                    refresh(changedClassIndex);
                } else {
                    if (refreshing) {
                        clearTimeout(refreshing);
                    }
                    for (let i = 0; i < _data.length; i++) {
                        if (changedClassIndex === undefined || changedClassIndex === i) {
                            $(`#chart-container${changedClassIndex}`).html("<button id=\"reset-zoom" + changedClassIndex + "\" style=\"position: absolute; top: 0; right: 0; height: fit-content; display:none\" class=\"btn btn-sm\" onclick=\"resetZoom(" + changedClassIndex + "); $(this).hide()\">Reset</button><div class=\"chart-placeholder fa fa-spin fa-spinner\"></div><canvas id=\"chart" + changedClassIndex + "\"></canvas>");
                        }
                    }
                    refreshing = setTimeout(() => {
                        refresh(changedClassIndex);
                    }, 400);
                }
            }

            let appearance = <%- appearance; %>;
            let alerts = <%- alerts; %>;
            let personalInfo = <%- personalInfo; %>;
            let username = "<%= username; %>";
            let schoolUsername = "<%= schoolUsername; %>";
            let isAdmin = <%= isAdmin; %>;
            let gradeSync = <%= gradeSync; %>;
            let data = <%- gradeData; %>;
            let aData = data.map(c => Array(c.grades.length).fill(undefined)); // added assignment placeholders will go in here
            let editedAssignments = <%- editedAssignments; %>;
            let _editedAssignments = JSON.parse(JSON.stringify(editedAssignments)); // Copy to apply edits to edits to
            let addedAssignments = <%- addedAssignments; %>;
            let _addedAssignments = JSON.parse(JSON.stringify(addedAssignments)); // Copy to apply edits to added assignments to
            let weights = <%- weightData; %>;
            let relClassData = <%- relevantClassData; %>;
            let gradeHistoryLetters = <%- gradeHistory; %>;
            let chartData = [];
            let parsedData = [];
            let categorySortedData = [];
            let unobtainedWeights = {};
            let tempWeights = {};
            let currentPage = (isNaN(parseInt(sessionStorage.getItem("currentPage"))) ? -1 : parseInt(sessionStorage.getItem("currentPage")));
            let cardsDisplayed = [];
            let minCardZIndex = 25;
            let charts = [];
            let currentTab = 1;
            let maxTab = $(".tabcontent").length;
            let darkMode;
            let colors = appearance.classColors;
            let darkModeStart = appearance.darkModeStart || 18;
            let darkModeFinish = appearance.darkModeFinish || 7;
            let mobile = window.innerWidth <= 991;

            if (!appearance.showNonAcademic && Object.keys(Object.fromEntries(Object.entries(relClassData).filter(([, v]) => v.classType === "non-academic"))).length > 0) {
                colors = colors.slice(0, data.length).filter(color => relClassData[data[colors.indexOf(color)].class_name].classType !== "non-academic");
                data = data.filter(grade => relClassData[grade.class_name].classType !== "non-academic");
                weights = Object.fromEntries(Object.entries(weights).filter(([className]) => relClassData[className].classType !== "non-academic"));
            }
            let _data = JSON.parse(JSON.stringify(data)); // Copy to apply edits to assignments to

            let changeTransition;
            let theme = appearance.theme;
            let checkingTheme;
            if (theme === "auto") {
                darkMode = (appearance.theme === "dark" || (appearance.theme === "auto" && (((appearance.darkModeStart < appearance.darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= appearance.darkModeStart - (isDST() ? (appearance.darkModeStart === 0 ? -23 : 1) : 0)) && ((Date.now() / 1000 / 3600 - 8) % 24) < appearance.darkModeFinish - (isDST() ? (appearance.darkModeFinish === 1 ? -23 : 1) : 0))) || ((appearance.darkModeStart > appearance.darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8) % 24) >= appearance.darkModeStart - (isDST() ? (appearance.darkModeStart === 0 ? -23 : 1) : 0)) || ((Date.now() / 1000 / 3600 - 8) % 24) < appearance.darkModeFinish - (isDST() ? (appearance.darkModeFinish === 1 ? -23 : 1) : 0))))));
                checkTime();
            } else {
                darkMode = theme === "dark";
            }

            // This should only happen once
            let {dateSort, categorySort} = <%- sortingData; %>;
            refreshWithoutReload(true);
            setupWeightsTableListeners();
            setupInputListeners();
            setupAddAssignments();
            setupGradeChanges(false);
            $("#termSwitcher").addClass("hover");
            setTimeout(() => $("#termSwitcher").removeClass("hover"), 2000);

            if (alerts.lastUpdated.length !== 0) {
                try {
                    renderAllCharts();
                } catch (e) {
                }
            }
            try {
                showPage(currentPage);
                sessionStorage.setItem("currentPage", currentPage);
            } catch (e) {
                currentPage = -1;
                try {
                    showPage(-1);
                    sessionStorage.setItem("currentPage", currentPage);
                } catch (e) {
                }
            }
            if (gradeSync) {
                $("#syncGradesDiv").hide();
                $("#gradeSyncDiv").show();
                checkUpdateBackground();
            } else {
                $("#gradeSyncDiv").hide();
                $("#syncGradesDiv").show();
                $(".updateGradesMessage").find(".messageTxt").text("GradeSync is not enabled");
                if (alerts.lastUpdated.length) {
                    showLatest(false);
                } else {
                    $.ajax({
                               url: "/latestVersionSeen", type: "POST", async: true
                           });
                }
            }
            document.getElementById("darkModeStart").setAttribute("placeholder", (darkModeStart === 0 ? "12" : darkModeStart > 12 ? (darkModeStart - 12).toString() : darkModeStart.toString()));
            document.getElementById("darkModeFinish").setAttribute("placeholder", (darkModeFinish === 24 ? "12" : darkModeFinish > 12 ? (darkModeFinish - 12).toString() : darkModeFinish.toString()));

            function isDST() {
                return Math.max(new Date(new Date(Date.now()).getFullYear(), 0, 1).getTimezoneOffset(), new Date(new Date(Date.now()).getFullYear(), 6, 1).getTimezoneOffset()) !== new Date(Date.now()).getTimezoneOffset();
            }

            function setAutoTheme() {
                if (theme !== "auto") {
                    if (checkingTheme) {
                        clearInterval(checkingTheme);
                    }
                    return;
                }
                darkModeStart = parseInt(darkModeStart);
                darkModeFinish = parseInt(darkModeFinish);
                if (theme === "dark" || (theme === "auto" && (((darkModeStart < darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8 + (isDST() ? 1 : 0)) % 24) >= darkModeStart) && ((Date.now() / 1000 / 3600 - 8 + (isDST() ? 1 : 0)) % 24) < darkModeFinish)) || ((darkModeStart > darkModeFinish) && ((((Date.now() / 1000 / 3600 - 8 + (isDST() ? 1 : 0)) % 24) >= darkModeStart) || ((Date.now() / 1000 / 3600 - 8 + (isDST() ? 1 : 0)) % 24) < darkModeFinish))))) {
                    let oldDarkMode = document.getElementById("pageStyle").getAttribute("href") === "public/css/dark_mode.css";
                    darkMode = true;
                    if (darkMode !== oldDarkMode) {
                        clearTimeout(changeTransition);
                        document.getElementById("fade").disabled = false;
                        document.getElementById("pageStyle").setAttribute("href", "public/css/dark_mode.css");
                        if (appearance.blurEffects) {
                            document.getElementById("blur_overrides").setAttribute("href", "public/css/dark_blur.css");
                        }
                        renderAllCharts();
                        $(".navbar-brand img").attr("src", "/public/resources/dark_mode/logo.png");
                        $(".navbar").removeClass("navbar-light").addClass("navbar-dark");
                        setTimeout(() => {
                            document.getElementById("fade").disabled = true;
                        }, 2000);
                    }
                } else {
                    let oldDarkMode = document.getElementById("pageStyle").getAttribute("href") === "public/css/dark_mode.css";
                    darkMode = false;
                    if (darkMode !== oldDarkMode) {
                        clearTimeout(changeTransition);
                        document.getElementById("fade").disabled = false;
                        document.getElementById("pageStyle").setAttribute("href", "public/css/light_mode.css");
                        if (appearance.blurEffects) {
                            document.getElementById("blur_overrides").setAttribute("href", "public/css/light_blur.css");
                        }
                        renderAllCharts();
                        $(".navbar-brand img").attr("src", "/public/resources/light_mode/logo.png");
                        $(".navbar").removeClass("navbar-dark").addClass("navbar-light");
                        setTimeout(() => {
                            document.getElementById("fade").disabled = true;
                        }, 2000);
                    }
                }
            }

            async function checkTime() {
                if (checkingTheme) {
                    clearInterval(checkingTheme);
                }
                setAutoTheme();
                checkingTheme = window.setInterval(function () {
                    setAutoTheme();
                }, 100);
            }

            setupTutorialPopups();

            function setupTutorialPopups() {
                if (!gradeSync) {
                    $("#syncPopup").addClass("always-show");
                    $(Object.entries(alerts.tutorialStatus).filter(([, k]) => !k).map(([t]) => "#" + t.substring(0, t.length - 4)).join("Popup, ") + "Popup").removeClass("always-show");
                } else {
                    $("#syncPopup").removeClass("always-show");
                    $(Object.entries(alerts.tutorialStatus).filter(([, k]) => !k).map(([t]) => "#" + t.substring(0, t.length - 4)).join("Popup, ") + "Popup").addClass("always-show");
                }

            }

            function updateTutorial(action) {
                if (window.innerWidth <= 991) {
                    return;
                }
                $.ajax({
                           url: "/UpdateTutorialStatus", type: "POST", async: true, data: {action: action}
                       }).done((response) => {
                    alerts.tutorialStatus = JSON.parse(response);
                    $("#" + action + "Popup").animate({opacity: 0}, 400, function () {
                        $(this).removeClass("always-show").css("opacity", "");
                    });
                    setupTutorialPopups();
                    updateTutorialProgress();
                });
            }

            function updateData(newData) {
                if (!newData.grades || !newData.weights) {
                    return {updated: true};
                }
                if (_.isEqual(_data.map(c => c.class_name), newData.grades.map(c => c.class_name)) && _.isEqual(weights, newData.weights)) {
                    _data = newData.grades;
                    return {updated: true};
                }
                clearTimeout(checkLastUpdated);
                return {updated: false};
            }

            async function checkUpdateBackground() {
                let checking = window.setInterval(function () {
                    $.get("/checkUpdateBackground", function (message, status) {
                        if (status === "success") {
                            if (message.message === "Sync Complete!") {
                                let newData = {
                                    grades: JSON.parse(message.grades), weights: JSON.parse(message.weights)
                                };
                                if (!updateData(newData).updated) {
                                    clearInterval(checking);
                                    if (cardsDisplayed.length === 0 || cardsDisplayed[cardsDisplayed.length - 1] === "updateGradesDisplay") {
                                        $(".updateGradesMessage").find(".messageTxt").text("Refreshing...");
                                        setTimeout(() => window.reload(), 400);
                                    } else {
                                        $(".updateGradesMessage").find(".messageTxt").css("cursor", "pointer").text("Click here to refresh").click(function (e) {
                                            e.preventDefault();
                                            e.stopPropagation();
                                            window.reload();
                                        });
                                    }
                                } else {
                                    alerts.lastUpdated.push(JSON.parse(message.updateData));
                                    setupGradeChanges();
                                    refreshWithoutReload(true);
                                }
                            } else if (message.message === "Already Synced!") {
                                clearInterval(checking);
                                showLatest(false);
                                setupLastUpdated();
                            } else if (message.message === "Did not sync") {
                                $(".updateGradesMessage").find(".messageTxt").text("Syncing...");
                                $(".fa-refresh").addClass("fa-spin").css("opacity", 0.5);
                            } else if (message.message === "Cannot access grades.") {
                                $("#syncNoData").show();
                                clearInterval(checking);
                                $(".updateGradesMessage").removeClass("alert-info").removeClass("alert-success").addClass("alert-danger");
                                showLatest(false);
                                setupLastUpdated();
                            } else if (message.message === "Sync Failed.") {
                                $("#syncFailure").show();
                                clearInterval(checking);
                                $(".updateGradesMessage").removeClass("alert-info").removeClass("alert-success").addClass("alert-danger");
                                setupLastUpdated();
                                showLatest(false);
                            } else if (message.message === "Not syncing") {
                                clearInterval(checking);
                                setupLastUpdated();
                            }
                        }
                    });
                }, 1000);
            }

            function disableScrolling() {
                $("body, html").addClass("no-scroll");
            }

            function enableScrolling() {
                $("body, html").removeClass("no-scroll");
            }

            function setupGPADisplays() {
                $("#GPA-display").text(getOverallGPA());
                if (gradeHistoryLetters.length) {
                    $("#GPA-display-cumulative").text(getCumulativeGPA());
                }
            }

            function setupIncorrectGradeMessages(classIndex) {
                $("#GPA-display").removeClass("ignored");
                for (let i = 0; i < _data.length; i++) {
                    if (classIndex === undefined || classIndex === i) {
                        if (!correctCalc(i)) {
                            $("#incorrectOverviewGrade" + i).css("display", "inline-block");
                            $("#incorrectOverallGrade" + i).css("display", "inline-block");
                        } else {
                            $("#incorrectOverviewGrade" + i).hide();
                            $("#incorrectOverallGrade" + i).hide();
                        }
                    }
                }
            }

            function correctCalc(classIndex) {
                let realOverallGrade = _data[classIndex].overall_percent;
                let realOverallLetter = _data[classIndex].overall_letter;
                let calculatedOverallGrade = getOverallGrade(classIndex);
                let correctDecimalPlaces = getOverallGrade(classIndex).toFixed(countDecimals(realOverallGrade));
                let calculatedOverallLetter = getLetterGrade(calculatedOverallGrade);
                return (correctDecimalPlaces == realOverallGrade && calculatedOverallLetter === realOverallLetter);
            }

            function countDecimals(value) {
                if (Math.floor(value) === value) {
                    return 0;
                }
                return value.toString().split(".")[1].length || 0;
            }

            function getCumulativeGPA() {
                let GPA = 0.0;
                let max = 0.0;
                let numClasses = gradeHistoryLetters.length;
                for (let i = 0; i < gradeHistoryLetters.length; i++) {
                    let classType = relClassData[Object.keys(gradeHistoryLetters[i])[0]].classType;
                    if (classType !== "non-academic" && !([false, "CR", "W"]).includes(Object.values(gradeHistoryLetters[i])[0])) {
                        if (appearance.weightedGPA && (classType === "ap" || classType === "honors")) {
                            GPA += 1;
                            max += 1;
                        }
                        GPA += getGPA(Object.values(gradeHistoryLetters[i])[0]);
                        max += 4;
                    } else {
                        numClasses--;
                    }
                }
                GPA /= numClasses;
                max /= numClasses;
                return GPA.toFixed(3) + "/" + max.toFixed(3);
            }

            function getOverallGPA() {
                let GPA = 0.0;
                let max = 0.0;
                let numClasses = _data.length;
                for (let i = 0; i < _data.length; i++) {
                    let className = _data[i].class_name;
                    let classType = relClassData[className]["classType"];
                    if (appearance.weightedGPA && (classType === "ap" || classType === "honors")) {
                        GPA += 1;
                        max += 1;
                    }
                    if (!([false, "CR", "W"]).includes(_data[i].overall_letter)) {
                        GPA += getGPA(_data[i].overall_letter);
                        max += 4;
                    } else {
                        numClasses--;
                    }
                }
                GPA /= numClasses;
                max /= numClasses;
                return GPA.toFixed(3) + "/" + max.toFixed(3);
            }

            function getGPA(letterGrade) {
                letterGrade = letterGrade.substring(0, 1);
                if (letterGrade === "A") {
                    return 4;
                } else if (letterGrade === "B") {
                    return 3;
                } else if (letterGrade === "C") {
                    return 2;
                } else if (letterGrade === "D") {
                    return 1;
                }
                return 0;
            }

            function getTotalWeight(classIndex) {
                let className = _data[classIndex].class_name;
                let classWeights = Object.values(weights[className]["weights"]);
                let totalWeight = 0;
                let classCategories = Object.keys(weights[className]["weights"]);
                for (let i = 0; i < classWeights.length; i++) {
                    if (getCategoryGottenAndPossible(classIndex, classCategories[i]).possible !== 0) {
                        totalWeight += Number(classWeights[i]);
                    }
                }
                return totalWeight;
            }

            function setPointBasedWeights(classIndex) {
                for (let i = 0; i < _data.length; i++) {
                    if (classIndex === undefined || classIndex === i) {
                        let totalPossible = 0;
                        let result = Object.fromEntries(Object.entries(weights[_data[i].class_name].weights).map(a => [a[0], 0]));
                        for (let assignment of _data[i]["grades"]) {
                            if (assignment["points_gotten"] !== false && assignment["points_possible"] !== false && assignment["exclude"] !== true) {
                                if (!result[assignment.category]) {
                                    result[assignment.category] = 0;
                                }
                                result[assignment.category] += assignment["points_possible"];
                                totalPossible += assignment["points_possible"];
                            }
                        }
                        for (let j = 0; j < Object.keys(result).length; j++) {
                            let weight = Object.keys(result)[j];
                            result[weight] = +(result[weight] / totalPossible * 100).toFixed(4) || 0;
                            $("#weightTableWeight" + i + j + " input").attr("placeholder", result[weight]);
                        }
                    }
                }
            }

            function getOverallGrade(classIndex) {
                let className = _data[classIndex].class_name;
                if (className in weights) {
                    let overallGrade = 0;
                    if (weights[className]["hasWeights"] === "false" || unobtainedWeights[className]) {
                        let points_earned = 0;
                        let points_total = 0;
                        for (let assignment of _data[classIndex]["grades"]) {
                            if (assignment["points_gotten"] !== false && assignment["points_possible"] !== false && assignment["exclude"] !== true) {
                                points_earned += assignment["points_gotten"];
                                points_total += assignment["points_possible"];
                            }
                        }
                        overallGrade = points_earned / points_total * 100;
                    } else {
                        let classCategories = Object.keys(weights[className]["weights"]);
                        let classWeights = Object.values(weights[className]["weights"]);
                        for (let i = 0; i < classCategories.length; i++) {
                            overallGrade += getCategoryGrade(classIndex, classCategories[i]) * classWeights[i] / 100;
                        }
                        let ratio = 100 / getTotalWeight(classIndex);
                        overallGrade *= ratio;
                    }
                    return overallGrade;
                }
                return null;
            }

            function getLetterGrade(grade) {
                if (grade >= 97.5) {
                    return "A+";
                } else if (grade >= 92.5) {
                    return "A";
                } else if (grade >= 89.5) {
                    return "A-";
                } else if (grade >= 87.5) {
                    return "B+";
                } else if (grade >= 82.5) {
                    return "B";
                } else if (grade >= 79.5) {
                    return "B-";
                } else if (grade >= 77.5) {
                    return "C+";
                } else if (grade >= 72.5) {
                    return "C";
                } else if (grade >= 69.5) {
                    return "C-";
                } else if (grade >= 67.5) {
                    return "D+";
                } else if (grade >= 62.5) {
                    return "D";
                } else if (grade >= 59.5) {
                    return "D-";
                }
                return "F";
            }

            let submittingWeights;

            function setupWeightsTableListeners() {
                for (let i = 0; i < _data.length; i++) {
                    let className = _data[i].class_name;
                    let tableCategories = Object.keys(weights[className]["weights"]);
                    for (let j = 0; j < tableCategories.length; j++) {
                        $("#weightTableWeight" + i + j + " input").blur(() => {
                            clearTimeout(submittingWeights);
                            submittingWeights = setTimeout(() => {
                                resetInputs("#weights" + i);
                                $("#weightTableWeight" + i + j).parents("form").submit();
                            }, 400);
                        }).on("keyup", (e) => {
                            e = e || window.event;
                            let keyCode = e.code;
                            if (keyCode === "Enter") {
                                $("#weightTableWeight" + i + j + " input").blur();
                            }
                        });
                    }
                }
            }

            function setupWeightsTables(classIndex) {
                for (let i = 0; i < _data.length; i++) {
                    if (classIndex === undefined || classIndex === i) {
                        disableInput("check" + i, "weightsTable" + i);
                        let className = _data[i].class_name;
                        let tableCategories = Object.keys(weights[className]["weights"]);
                        let enableReset = weights[className]["custom"];
                        //if custom and both haveWeights, enable reset only if db had diff value to give to user's weights
                        //stop reset from showing if custom is due to user having more categories than classes db
                        if (enableReset && relClassData[className]["hasWeights"] !== "false") {
                            enableReset = false;
                            let keys = Object.keys(weights[className]["weights"]);
                            for (let i = 0; i < keys.length; i++) {
                                if (weights[className]["hasWeights"] === "false" && keys[i] in relClassData[className]["weights"]) {
                                    enableReset = true;
                                } else if (relClassData[className]["weights"] && (keys[i] in relClassData[className]["weights"]) && weights[className]["weights"][keys[i]] != relClassData[className]["weights"][keys[i]]) {
                                    enableReset = true;
                                }
                            }
                        }

                        //Hide or Show Reset Button
                        if (enableReset) {
                            $("#reset" + i).show();
                            $("#weight-header" + i).css("font-style", "italic");
                        } else {
                            $("#reset" + i).hide();
                            $("#weight-header" + i).css("font-style", "normal");
                        }

                        //Hide or Show Ignoring weights
                        if (unobtainedWeights[className]) {
                            $("#ignoringWeights" + i).show();
                        } else {
                            $("#ignoringWeights" + i).hide();
                        }

                        for (let j = 0; j < tableCategories.length; j++) {
                            //Set italics of weights
                            if (enableReset) {
                                $("#weightTableWeight" + i + j).children().css("font-style", "italic");
                            } else {
                                $("#weightTableWeight" + i + j).children().css("font-style", "normal");
                            }

                            //Strikethrough weights if any are missing
                            let input = $("#weightTableWeight" + i + j + " input");
                            if (unobtainedWeights[className] && (!isNaN(parseFloat(input[0].valueAsNumber)))) {
                                input.addClass("ignored");
                            } else {
                                input.removeClass("ignored");
                            }

                            document.getElementById("weightTableCategory" + i + j).textContent = tableCategories[j];
                            let categoryGottenAndPossible = getCategoryGottenAndPossible(i, tableCategories[j]);
                            document.getElementById("weightTablePoints" + i + j).textContent = +categoryGottenAndPossible.gotten.toFixed(4) + ((categoryGottenAndPossible.possible !== 0) ? ("/" + +(categoryGottenAndPossible.possible.toFixed(4))) : "");
                            let categoryGrade = +(+getCategoryGrade(i, tableCategories[j])).toFixed(4);
                            if (categoryGottenAndPossible.possible !== 0) {
                                document.getElementById("weightTableGrade" + i + j).textContent = categoryGrade + "% (" + getLetterGrade(categoryGrade) + ")";
                            } else {
                                document.getElementById("weightTableGrade" + i + j).textContent = "--";
                            }
                        }
                        let overallGrade = getOverallGrade(i);
                        let assignmentData = parsedData[i].rawData;
                        let lastIndex = assignmentData.length - 1;
                        let delta = +(assignmentData[lastIndex] - assignmentData[lastIndex - 1]).toFixed(5);
                        let color;
                        if (delta > 0) {
                            delta = "<i class=\"fa fa-caret-up\"></i>" + delta + "%";
                            color = "green";
                        } else if (delta < 0) {
                            delta = "<i class=\"fa fa-caret-down\"></i>" + delta + "%";
                            color = "red";
                        }
                        delta = (delta ? (" <div style=\"display: inline-block; margin-left: 1rem; color: " + color + "\">" + delta + "</div>") : "");
                        if (overallGrade) {
                            document.getElementById("weightTableOverallGrade" + i).innerHTML = (+(overallGrade.toFixed(4))).toString() + "% (" + getLetterGrade(overallGrade) + ")" + delta;
                        } else {
                            document.getElementById("weightTableOverallGrade" + i).innerHTML = "--" + delta;
                        }
                        document.getElementById("weightTableOverallGrade" + i).style.display = "inline-block";

                    }
                }
            }

            function adjust(elements, offset, min, max) {

                // Initialize parameters
                offset = offset || 0;
                min = min || 0;
                max = max || Infinity;
                elements.each(function () {
                    let element = $(this);

                    // Add element to measure pixel length of text
                    let id = btoa(Math.floor(Math.random() * Math.pow(2, 64)));
                    let tag = $("<span id=\"" + id + "\">" + element.val() + "</span>").css({
                                                                                                "display": "none",
                                                                                                "font-family": element.css("font-family"),
                                                                                                "font-size": element.css("font-size")
                                                                                            }).appendTo("body");

                    // Adjust element width on keydown
                    function update() {

                        // Give browser time to add current letter
                        setTimeout(function () {

                            // Prevent whitespace from being collapsed
                            tag.html(element.val().replace(/ /g, "&nbsp;"));

                            // Clamp length and prevent text from scrolling
                            let size = Math.max(min, Math.min(max, tag.width() + offset));
                            if (size < max) {
                                element.scrollLeft(0);
                            }

                            // Apply width to element
                            element.width(size);

                        }, 0);
                    }

                    update();
                    element.keydown(update);
                });
            }

            function remToPixels(rem) {
                return rem * parseFloat(getComputedStyle(document.documentElement).fontSize);
            }

            function setSortMethod(element) {
                let classIndex = parseFloat($(element)[0].id.substring(6));
                let method = $(element)[0].selectedOptions[0].value;
                $(element).blur();
                $($(element)[0].nextElementSibling.children[0]).removeClass(dateSort[classIndex] ? "fa-sort-amount-desc" : "fa-sort-amount-asc").addClass(dateSort[classIndex] ? "fa-sort-amount-asc" : "fa-sort-amount-desc").removeClass("disabled").find("span").text(dateSort[classIndex] ? "Oldest to Newest" : "Newest to Oldest");
                categorySort[classIndex] = method === "category";
                postSortData();
                refreshWithoutReload(true, classIndex);
            }

            function addAssignment(classIndex) {
                let addDate = $(".addAssignmentDate input")[classIndex].value.split("-");
                addDate = addDate[1] + "/" + addDate[2] + "/" + addDate[0];
                let addName = $(".addAssignmentName input")[classIndex].value;
                let addCategory = $(".addAssignmentCategory select")[classIndex].selectedOptions[0].value;
                let inputs = $(".addAssignmentScore input");
                let addGotten = parseFloat(inputs[classIndex * 2].value);
                if (isNaN(addGotten)) {
                    addGotten = false;
                }
                let addPossible = parseFloat(inputs[classIndex * 2 + 1].value);
                if (isNaN(addPossible)) {
                    addPossible = false;
                }
                if (addPossible === false && addGotten !== false) {
                    addPossible = 0;
                }
                let addExclude = $(`#addExclude${classIndex}`).prop("checked");
                let addPercent = +(addGotten / addPossible * 100).toFixed(2) || false;
                if (addPercent === Infinity) {
                    addPercent = false;
                }
                let assignmentObject = {
                    assignment_name: addName,
                    date: addDate,
                    category: addCategory,
                    grade_percent: addPercent,
                    points_gotten: addGotten,
                    points_possible: addPossible,
                    exclude: addExclude
                };

                _addedAssignments[_data[classIndex].class_name].push(JSON.parse(JSON.stringify(assignmentObject)));
                addedAssignments[_data[classIndex].class_name].push(JSON.parse(JSON.stringify(assignmentObject)));
                $.ajax({type: "POST", url: "/updateAddedAssignments", data: {data: JSON.stringify(addedAssignments)}});

                let addAssignment = $($(".addAssignment")[currentPage]);
                addAssignment.trigger("click");
                recentlyAddedAssignment = assignmentObject;
                refreshWithoutReload(classIndex);
            }

            function updatePointsGotten(element) {
                let classes = $(element)[0].className.split(" ");
                let classIndex;
                let assignmentIndex;
                let test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "gotten");
                if (test.length) {
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(".gotten" + classIndex)).indexOf(element);
                    if (!dateSort[classIndex]) {
                        assignmentIndex = _data[classIndex]["grades"].length - assignmentIndex - 1;
                    }
                } else {
                    test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "categoryGotten");
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(".categoryGotten" + classIndex)).indexOf(element);
                    if (!dateSort[classIndex]) {
                        let assignmentCategories = categorySortedData[classIndex].assignmentCategories;
                        assignmentIndex = categorySortedData[classIndex].assignmentCategories.filter(c => c === assignmentCategories[assignmentIndex]).length - assignmentIndex + 2 * assignmentCategories.indexOf(assignmentCategories[assignmentIndex]) - 1;
                    }
                    assignmentIndex = categorySortedData[classIndex].originalIndices[assignmentIndex];
                }

                let doRefresh;
                if (aData[classIndex][assignmentIndex] !== undefined) {

                    let assignment = _addedAssignments[_data[classIndex].class_name][aData[classIndex][assignmentIndex]];

                    let temp = assignment.points_gotten;
                    assignment.points_gotten = parseFloat($(element)[0].value);
                    if (isNaN(assignment.points_gotten)) {
                        assignment.points_gotten = false;
                    } else if (assignment.points_possible === false) {
                        assignment.points_possible = 0;
                    }
                    if ((assignment.points_gotten || assignment.points_gotten === 0) && assignment.points_possible) {
                        assignment.grade_percent = +(parseFloat(assignment.points_gotten / assignment.points_possible * 100)).toFixed(2);
                    } else {
                        assignment.grade_percent = false;
                    }
                    if (isNaN(assignment.grade_percent)) {
                        assignment.grade_percent = false;
                    }

                    doRefresh = false;
                    if (temp != assignment.points_gotten) {
                        doRefresh = true;
                    }

                } else {

                    let assignment = _editedAssignments[_data[classIndex].class_name][_data[classIndex]["grades"][assignmentIndex].psaid];
                    let pointsPossible;

                    if (!assignment) {
                        _editedAssignments[_data[classIndex].class_name][_data[classIndex]["grades"][assignmentIndex].psaid] = {};
                        assignment = _editedAssignments[_data[classIndex].class_name][_data[classIndex]["grades"][assignmentIndex].psaid];
                        assignment.points_gotten = _data[classIndex].grades[assignmentIndex].points_gotten;
                        pointsPossible = _data[classIndex].grades[assignmentIndex].points_possible;
                    } else {
                        pointsPossible = assignment.points_possible || _data[classIndex].grades[assignmentIndex].points_possible;
                    }

                    let temp = assignment.points_gotten;
                    assignment.points_gotten = parseFloat($(element)[0].value);
                    if (isNaN(assignment.points_gotten)) {
                        assignment.points_gotten = false;
                    } else if (pointsPossible === false) {
                        pointsPossible = 0;
                    }
                    if ((assignment.points_gotten || assignment.points_gotten === 0) && pointsPossible) {
                        assignment.grade_percent = +(parseFloat(assignment.points_gotten / pointsPossible * 100)).toFixed(2);
                    } else {
                        assignment.grade_percent = false;
                    }
                    if (isNaN(assignment.grade_percent)) {
                        assignment.grade_percent = false;
                    }

                    doRefresh = false;
                    if (temp !== assignment.points_gotten && assignment.points_gotten !== _data[classIndex].grades[assignmentIndex].points_gotten) {
                        doRefresh = true;
                    }

                    cleanEdits(classIndex, assignmentIndex);
                }

                if (doRefresh) {
                    refreshWithoutReload(true, classIndex);
                }
            }

            function updatePointsPossible(element) {
                let classes = $(element)[0].className.split(" ");
                let classIndex;
                let assignmentIndex;
                let test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "possible");
                if (test.length) {
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(".possible" + classIndex)).indexOf(element);
                    if (!dateSort[classIndex]) {
                        assignmentIndex = _data[classIndex]["grades"].length - assignmentIndex - 1;
                    }
                } else {
                    test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "categoryPossible");
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(".categoryPossible" + classIndex)).indexOf(element);
                    if (!dateSort[classIndex]) {
                        let assignmentCategories = categorySortedData[classIndex].assignmentCategories;
                        assignmentIndex = categorySortedData[classIndex].assignmentCategories.filter(c => c === assignmentCategories[assignmentIndex]).length - assignmentIndex + 2 * assignmentCategories.indexOf(assignmentCategories[assignmentIndex]) - 1;
                    }
                    assignmentIndex = categorySortedData[classIndex].originalIndices[assignmentIndex];
                }

                let doRefresh;
                if (aData[classIndex][assignmentIndex] !== undefined) {

                    let assignment = _addedAssignments[_data[classIndex].class_name][aData[classIndex][assignmentIndex]];

                    let temp = assignment.points_possible;
                    assignment.points_possible = parseFloat($(element)[0].value);
                    if (isNaN(assignment.points_possible)) {
                        assignment.points_possible = false;
                    }
                    if (assignment.points_possible && assignment.points_gotten) {
                        assignment.grade_percent = +parseFloat(assignment.points_gotten / assignment.points_possible * 100).toFixed(2);
                    } else {
                        assignment.grade_percent = false;
                    }

                    doRefresh = false;
                    if (temp != assignment.points_possible) {
                        doRefresh = true;
                    }

                } else {

                    let assignment = _editedAssignments[_data[classIndex].class_name][_data[classIndex]["grades"][assignmentIndex].psaid];
                    let pointsGotten;

                    if (!assignment) {
                        _editedAssignments[_data[classIndex].class_name][_data[classIndex]["grades"][assignmentIndex].psaid] = {};
                        assignment = _editedAssignments[_data[classIndex].class_name][_data[classIndex]["grades"][assignmentIndex].psaid];
                        assignment.points_possible = _data[classIndex].grades[assignmentIndex].points_possible;
                        pointsGotten = _data[classIndex].grades[assignmentIndex].points_gotten;
                    } else {
                        pointsGotten = assignment.points_gotten || _data[classIndex].grades[assignmentIndex].points_gotten;
                    }

                    let temp = assignment.points_possible;
                    assignment.points_possible = parseFloat($(element)[0].value);
                    if (isNaN(assignment.points_possible)) {
                        assignment.points_possible = false;
                    }
                    if (assignment.points_possible && pointsGotten) {
                        assignment.grade_percent = +parseFloat(pointsGotten / assignment.points_possible * 100).toFixed(2);
                    } else {
                        assignment.grade_percent = false;
                    }

                    doRefresh = false;
                    if (temp != assignment.points_possible && assignment.points_possible != _data[classIndex].grades[assignmentIndex].points_possible) {
                        doRefresh = true;
                    }

                    cleanEdits(classIndex, assignmentIndex);

                }

                if (doRefresh) {
                    refreshWithoutReload(true, classIndex);
                }
            }

            function updateCategory(element) {
                let classes = $(element)[0].className.split(" ");
                let classIndex;
                let assignmentIndex;
                let test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "category");
                if (test.length) {
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(".category" + classIndex)).indexOf(element[0]);
                    if (!dateSort[classIndex]) {
                        assignmentIndex = _data[classIndex]["grades"].length - assignmentIndex - 1;
                    }
                } else {
                    test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "categoryCategory");
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(".categoryCategory" + classIndex)).indexOf(element[0]);
                    if (!dateSort[classIndex]) {
                        let assignmentCategories = categorySortedData[classIndex].assignmentCategories;
                        assignmentIndex = categorySortedData[classIndex].assignmentCategories.filter(c => c === assignmentCategories[assignmentIndex]).length - assignmentIndex + 2 * assignmentCategories.indexOf(assignmentCategories[assignmentIndex]) - 1;
                    }
                    assignmentIndex = categorySortedData[classIndex].originalIndices[assignmentIndex];
                }

                if (aData[classIndex][assignmentIndex] !== undefined) {
                    let assignment = _addedAssignments[_data[classIndex].class_name][aData[classIndex][assignmentIndex]];

                    assignment.category = $(element).find("option:selected").text();

                } else {
                    let assignment = _editedAssignments[_data[classIndex].class_name][_data[classIndex]["grades"][assignmentIndex].psaid];

                    if (!assignment) {
                        _editedAssignments[_data[classIndex].class_name][_data[classIndex]["grades"][assignmentIndex].psaid] = {};
                        assignment = _editedAssignments[_data[classIndex].class_name][_data[classIndex]["grades"][assignmentIndex].psaid];
                        assignment.category = _data[classIndex].grades[assignmentIndex].category;
                    }

                    assignment.category = $(element).find("option:selected").text();

                    cleanEdits(classIndex, assignmentIndex);
                }
            }

            function toggleExclude(element) {
                let classes = $(element)[0].className.split(" ");
                let classIndex;
                let assignmentIndex;
                let test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "exclude");
                if (test.length) {
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(".exclude" + classIndex)).indexOf(element);
                    if (!dateSort[classIndex]) {
                        assignmentIndex = _data[classIndex]["grades"].length - assignmentIndex - 1;
                    }
                } else {
                    test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "categoryExclude");
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(".categoryExclude" + classIndex)).indexOf(element);
                    if (!dateSort[classIndex]) {
                        let assignmentCategories = categorySortedData[classIndex].assignmentCategories;
                        assignmentIndex = categorySortedData[classIndex].assignmentCategories.filter(c => c === assignmentCategories[assignmentIndex]).length - assignmentIndex + 2 * assignmentCategories.indexOf(assignmentCategories[assignmentIndex]) - 1;
                    }
                    assignmentIndex = categorySortedData[classIndex].originalIndices[assignmentIndex];
                }

                if (aData[classIndex][assignmentIndex] !== undefined) {
                    let assignment = _addedAssignments[_data[classIndex].class_name][aData[classIndex][assignmentIndex]];

                    assignment.exclude = !assignment.exclude;
                } else {

                    let assignment = _editedAssignments[_data[classIndex].class_name][_data[classIndex]["grades"][assignmentIndex].psaid];
                    if (!assignment) {
                        _editedAssignments[_data[classIndex].class_name][_data[classIndex]["grades"][assignmentIndex].psaid] = {};
                        assignment = _editedAssignments[_data[classIndex].class_name][_data[classIndex]["grades"][assignmentIndex].psaid];
                        assignment.exclude = _data[classIndex].grades[assignmentIndex].exclude;
                    }

                    assignment.exclude = !assignment.exclude;

                    cleanEdits(classIndex, assignmentIndex);

                }
                refreshWithoutReload(true, classIndex);
            }

            function resetAll(element) {
                let classIndex = parseFloat($(element)[0].id.substring(8));
                let resetButtons = $(".resetRow" + classIndex);
                for (let i = 0; i < resetButtons.length; i++) {
                    resetRow(resetButtons[i], false);
                }
                refreshWithoutReload(false, classIndex);
            }

            function resetCategory(element) {
                let classes = $(element)[0].className.split(" ");
                let classIndex = parseFloat(classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "resetCategory")[0].match(/\d+$/)[0]);
                let categories = Object.keys(weights[_data[classIndex].class_name]["weights"]);
                let categoryIndex = $.makeArray($(".resetCategory" + classIndex)).indexOf(element);
                $($(".categoryTable" + classIndex)[categoryIndex]).removeClass("unround-top-right");
                let category = categories[categoryIndex];
                let startIndex = categorySortedData[classIndex].assignmentCategories.indexOf(category);
                let numOfCategory = categorySortedData[classIndex].assignmentCategories.filter(x => x === category).length;
                let resetButtons = $(".categoryResetRow" + classIndex);
                for (let i = startIndex; i < startIndex + numOfCategory; i++) {
                    resetRow(resetButtons[i], false);
                }
                refreshWithoutReload(false, classIndex);
            }

            function resetRow(element, notMassReset = true) {
                let classes = $(element)[0].className.split(" ");
                let classIndex;
                let assignmentIndex;
                let test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "resetRow");
                if (test.length) {
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(`.resetRow${classIndex}`)).indexOf(element);
                    if (!dateSort[classIndex]) {
                        assignmentIndex = _data[classIndex]["grades"].length - assignmentIndex - 1;
                    }

                    // This means that the row was never changed
                    if (!_editedAssignments[_data[classIndex].class_name][_data[classIndex].grades[assignmentIndex].psaid]) {
                        $($(`.resetRow${classIndex}`)[assignmentIndex]).addClass("disabled");
                        return;
                    }
                } else {
                    test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "categoryResetRow");
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(`.categoryResetRow${classIndex}`)).indexOf(element);
                    if (!dateSort[classIndex]) {
                        let assignmentCategories = categorySortedData[classIndex].assignmentCategories;
                        assignmentIndex = categorySortedData[classIndex].assignmentCategories.filter(c => c === assignmentCategories[assignmentIndex]).length - assignmentIndex + 2 * assignmentCategories.indexOf(assignmentCategories[assignmentIndex]) - 1;
                    }
                    assignmentIndex = categorySortedData[classIndex].originalIndices[assignmentIndex];

                    // This means that the row was never changed
                    if (!_editedAssignments[_data[classIndex].class_name][_data[classIndex].grades[assignmentIndex].psaid]) {
                        $($(".categoryResetRow" + classIndex)[assignmentIndex]).addClass("disabled");
                        return;
                    }
                }

                // Reset all edited values
                delete _editedAssignments[_data[classIndex].class_name][_data[classIndex].grades[assignmentIndex].psaid];
                delete editedAssignments[_data[classIndex].class_name][_data[classIndex].grades[assignmentIndex].psaid];
                $.ajax({
                           type: "POST",
                           url: "/updateEditedAssignments",
                           data: {data: JSON.stringify(editedAssignments)}
                       });

                if (notMassReset) {
                    refreshWithoutReload(false, classIndex);
                }

            }

            function trashAll(element) {
                let classIndex = parseFloat($(element)[0].id.substring(8));
                let trashButtons = $(".trashRow" + classIndex);
                for (let i = 0; i < trashButtons.length; i++) {
                    trashRow(trashButtons[i], false);
                }
                refreshWithoutReload(false, classIndex);
            }

            function trashCategory(element) {
                let classes = $(element)[0].className.split(" ");
                let classIndex = parseFloat(classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "trashCategory")[0].match(/\d+$/)[0]);
                let categories = Object.keys(weights[_data[classIndex].class_name]["weights"]);
                let categoryIndex = $.makeArray($(".trashCategory" + classIndex)).indexOf(element);
                $($(".categoryTable" + classIndex)[categoryIndex]).removeClass("unround-top-right");
                let category = categories[categoryIndex];
                let startIndex = categorySortedData[classIndex].assignmentCategories.indexOf(category);
                let numOfCategory = categorySortedData[classIndex].assignmentCategories.filter(x => x === category).length;
                let trashButtons = $(".categoryTrashRow" + classIndex);
                for (let i = startIndex; i < startIndex + numOfCategory; i++) {
                    trashRow(trashButtons[i], false);
                }
                refreshWithoutReload(false, classIndex);
            }

            function trashRow(element, notMassTrash = true) {
                let classes = $(element)[0].className.split(" ");
                let classIndex;
                let assignmentIndex;
                let test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "trashRow");
                if (test.length) {
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(`.trashRow${classIndex}`)).indexOf(element);
                    if (!dateSort[classIndex]) {
                        assignmentIndex = _data[classIndex]["grades"].length - assignmentIndex - 1;
                    }
                } else {
                    test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "categoryTrashRow");
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(`.categoryTrashRow${classIndex}`)).indexOf(element);
                    if (!dateSort[classIndex]) {
                        let assignmentCategories = categorySortedData[classIndex].assignmentCategories;
                        assignmentIndex = categorySortedData[classIndex].assignmentCategories.filter(c => c === assignmentCategories[assignmentIndex]).length - assignmentIndex + 2 * assignmentCategories.indexOf(assignmentCategories[assignmentIndex]) - 1;
                    }
                    assignmentIndex = categorySortedData[classIndex].originalIndices[assignmentIndex];
                }
                let addedAssignmentIndex = data[classIndex].grades[assignmentIndex];
                _addedAssignments[_data[classIndex].class_name].splice(addedAssignmentIndex, 1);
                addedAssignments[_data[classIndex].class_name].splice(addedAssignmentIndex, 1);

                $.ajax({
                           type: "POST", url: "/updateAddedAssignments", data: {data: JSON.stringify(addedAssignments)}
                       });

                if (notMassTrash) {
                    refreshWithoutReload(false, classIndex);
                }
            }

            function saveAll(element) {
                let classIndex = parseFloat($(element)[0].id.substring(7));
                let saveButtons = $(".saveRow" + classIndex);
                for (let i = 0; i < saveButtons.length; i++) {
                    saveRow(saveButtons[i], false);
                }
                refreshWithoutReload(false, classIndex);
            }

            function saveCategory(element) {
                let classes = $(element)[0].className.split(" ");
                let classIndex = parseFloat(classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "saveCategory")[0].match(/\d+$/)[0]);
                let categories = Object.keys(weights[_data[classIndex].class_name]["weights"]);
                let categoryIndex = $.makeArray($(".saveCategory" + classIndex)).indexOf(element);
                $($(".categoryTable" + classIndex)[categoryIndex]).removeClass("unround-top-right");
                let category = categories[categoryIndex];
                let startIndex = categorySortedData[classIndex].assignmentCategories.indexOf(category);
                let numOfCategory = categorySortedData[classIndex].assignmentCategories.filter(x => x === category).length;
                let saveButtons = $(".categorySaveRow" + classIndex);
                for (let i = startIndex; i < startIndex + numOfCategory; i++) {
                    saveRow(saveButtons[i], false);
                }
                refreshWithoutReload(false, classIndex);
            }

            function saveRow(element, notMassSave = true) {
                let classes = $(element)[0].className.split(" ");
                let classIndex;
                let assignmentIndex;
                let test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "saveRow");
                if (test.length) {
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(`.saveRow${classIndex}`)).indexOf(element);
                    if (!dateSort[classIndex]) {
                        assignmentIndex = _data[classIndex]["grades"].length - assignmentIndex - 1;
                    }
                } else {
                    test = classes.filter(x => (x.match(/^.*?(?=\d+)/) || [])[0] === "categorySaveRow");
                    classIndex = parseFloat(test[0].match(/\d+$/)[0]);
                    assignmentIndex = $.makeArray($(`.categorySaveRow${classIndex}`)).indexOf(element);
                    if (!dateSort[classIndex]) {
                        let assignmentCategories = categorySortedData[classIndex].assignmentCategories;
                        assignmentIndex = categorySortedData[classIndex].assignmentCategories.filter(c => c === assignmentCategories[assignmentIndex]).length - assignmentIndex + 2 * assignmentCategories.indexOf(assignmentCategories[assignmentIndex]) - 1;
                    }
                    assignmentIndex = categorySortedData[classIndex].originalIndices[assignmentIndex];
                }

                // Added
                if (aData[classIndex][assignmentIndex] !== undefined) {
                    addedAssignments[_data[classIndex].class_name][aData[classIndex][assignmentIndex]] = JSON.parse(JSON.stringify(_addedAssignments[_data[classIndex].class_name][aData[classIndex][assignmentIndex]]));
                    $.ajax({
                               type: "POST",
                               url: "/updateAddedAssignments",
                               data: {data: JSON.stringify(addedAssignments)}
                           });
                } else if (_editedAssignments[_data[classIndex].class_name][_data[classIndex].grades[assignmentIndex].psaid] || editedAssignments[_data[classIndex].class_name][_data[classIndex].grades[assignmentIndex].psaid]) {
                    // Edited
                    if (_editedAssignments[_data[classIndex].class_name][_data[classIndex].grades[assignmentIndex].psaid]) {
                        editedAssignments[_data[classIndex].class_name][_data[classIndex].grades[assignmentIndex].psaid] = JSON.parse(JSON.stringify(_editedAssignments[_data[classIndex].class_name][_data[classIndex].grades[assignmentIndex].psaid]));
                    } else {
                        delete editedAssignments[_data[classIndex].class_name][_data[classIndex].grades[assignmentIndex].psaid];
                    }
                    $.ajax({
                               type: "POST",
                               url: "/updateEditedAssignments",
                               data: {data: JSON.stringify(editedAssignments)}
                           });
                }

                if (notMassSave) {
                    refreshWithoutReload(false, classIndex);
                }
            }

            function setupInputListeners() {
                for (let i = 0; i < parsedData.length; i++) {
                    let classScores = $(".assignmentScore" + i);
                    for (let j = 0; j < parsedData[i].assignmentNames.length; j++) {
                        let inputs = $(classScores[j]).find(".dynamic-input");
                        $(inputs[0]).on("keyup", (e) => {
                            e = e || window.event;
                            let keyCode = e.code;
                            if (keyCode === "Enter") {
                                $(inputs[0]).blur();
                            }
                        });
                        $(inputs[1]).on("keyup", (e) => {
                            e = e || window.event;
                            let keyCode = e.code;
                            if (keyCode === "Enter") {
                                $(inputs[1]).blur();
                            }
                        });
                    }
                    classScores = $(".categoryAssignmentScore" + i);
                    for (let j = 0; j < categorySortedData[i].assignmentNames.length; j++) {
                        let inputs = $(classScores[j]).find(".dynamic-input");
                        $(inputs[0]).on("keyup", (e) => {
                            e = e || window.event;
                            let keyCode = e.code;
                            if (keyCode === "Enter") {
                                $(inputs[0]).blur();
                            }
                        });
                        $(inputs[1]).on("keyup", (e) => {
                            e = e || window.event;
                            let keyCode = e.code;
                            if (keyCode === "Enter") {
                                $(inputs[1]).blur();
                            }
                        });
                    }
                }
            }

            function toggleSortDirection(classIndex) {
                let icon = $($("#section" + classIndex).find(".tableOptions").find("i")[0]);
                if (icon.hasClass("fa-sort-amount-asc")) {
                    dateSort[classIndex] = false;
                    icon.removeClass("fa-sort-amount-asc").addClass("fa-sort-amount-desc");
                    $(icon.find("span")[0]).text("Newest to Oldest");
                } else {
                    dateSort[classIndex] = true;
                    icon.removeClass("fa-sort-amount-desc").addClass("fa-sort-amount-asc");
                    $(icon.find("span")[0]).text("Oldest to Newest");
                }
                postSortData();
                setupClassTables(classIndex);
            }

            function postSortData() {
                $.ajax({
                           type: "POST", url: "/updateSortData", data: {
                        sortingData: JSON.stringify({
                                                        dateSort: dateSort, categorySort: categorySort
                                                    })
                    }
                       });
            }

            function setupAddAssignments() {
                let categorySelectReferences = $(".addCategory");
                for (let i = 0; i < parsedData.length; i++) {
                    let dropdown = $(categorySelectReferences[i]);
                    let categories = Object.keys(weights[_data[i].class_name]["weights"]);

                    // Adjust widths
                    adjust($(".addAssignmentName input"), 0, remToPixels(8), remToPixels(12));
                    adjust($(".addAssignmentScore input"), 0, remToPixels(2), remToPixels(4));

                    // Set up categories
                    if (!$(dropdown).find("option").length) {
                        for (let j = 0; j < categories.length; j++) {
                            dropdown.append($("<option>").text(categories[j]));
                        }
                    }
                    $("#addAssignmentForm" + i).submit(function (e) {
                        e.preventDefault();
                        addAssignment(i);
                        $("#addAssignmentForm" + i + " input").val("").trigger("input").trigger("blur");
                    });
                }
            }

            function setupClassTables(classIndex) {
                for (let i = 0; i < parsedData.length; i++) {
                    if (classIndex === undefined || classIndex === i) {
                        let categories = Object.keys(weights[_data[i].class_name]["weights"]);
                        let assignmentData;
                        let assignmentDates;
                        let assignmentNames;
                        let assignmentCategories;
                        let assignmentScoresParsed;
                        let assignmentPercents;
                        let assignmentExcludes;
                        let assignmentAdds;
                        let rowDivs;
                        let row;
                        let assignmentDateDivs;
                        let assignmentNameDivs;
                        let assignmentCategoryDivs;
                        let excludeDivs;
                        let assignmentScoreDivs;
                        let modTabDivs;
                        let resetRowDivs;
                        let trashRowDivs;
                        let saveRowDivs;
                        let assignmentPercentDivs;
                        let assignmentOverallDivs;
                        let resetCategoryDivs;
                        let trashCategoryDivs;
                        let saveCategoryDivs;

                        if (categorySort[i]) {
                            // Data
                            assignmentData = categorySortedData[i].rawData;
                            assignmentDates = categorySortedData[i].assignmentDates;
                            assignmentNames = categorySortedData[i].assignmentNames;
                            assignmentCategories = categorySortedData[i].assignmentCategories;
                            assignmentScoresParsed = categorySortedData[i].assignmentScoresParsed;
                            assignmentPercents = categorySortedData[i].assignmentPercents;
                            assignmentExcludes = categorySortedData[i].assignmentExcludes;
                            assignmentAdds = categorySortedData[i].assignmentAdds;

                            rowDivs = $(`.categoryClassTableRow${i}`);
                            row = `<tr class="categoryClassTableRow${i}">
                                       <td class="categoryAssignmentDate${i}"></td>
                                       <td>
                                           <div class="excludeToggle"
                                                style="display: flex; justify-content: space-between; align-items: center;">
                                               <div class="categoryAssignmentName${i}"></div>
                                               <div style="display: flex; justify-content: center; flex-flow: column; align-items: center">
                                                   <i class="fa fa-ban categoryExclude${i}"
                                                      style="cursor: pointer"
                                                      onclick="toggleExclude(this);">
                                                       <label style="cursor: pointer !important; margin: 0; display: block; font-weight: bolder; font-size: 0.5rem">Exclude</label>
                                                   </i>
                                               </div>
                                           </div>
                                       </td>
                                       <td class="categoryAssignmentCategory${i}">
                                           <select class="minimal categoryCategory${i}"
                                                   style="margin: 0"></select>
                                       </td>
                                       <td class="form-weights form-signin form-group categoryAssignmentScore${i}">
                                           <div style="display: flex; justify-content: center; align-items: center">
                                               <input class="form-control text-view dynamic-input categoryGotten${i}"
                                                      type="number" step="0.001"
                                                      style="padding: 0; width: 0 !important; "
                                                      placeholder="--"
                                                      onblur="{updatePointsGotten(this);}">
                                                   /<input style="padding: 0; width: 0 !important; "
                                                           class="form-control text-view dynamic-input categoryPossible${i}"
                                                           type="number" step="0.001"
                                                           placeholder="--"
                                                           onblur="{updatePointsPossible(this);}">
                                           </div>
                                       </td>
                                       <td class="categoryAssignmentPercent${i}"></td>
                                       <td class="categoryAssignment${i}"></td>
                                       <td class="toolTab categoryModTab${i}">
                                           <span class="popup">
                                               <i class="fa fa-undo categoryResetRow${i} disabled"
                                                  onclick="{resetRow(this);}">
                                                   <span class="popup-left">
                                                       Revert Changes
                                                   </span>
                                               </i>
                                           </span>
                                           <span class="popup">
                                               <i class="fa fa-trash categoryTrashRow${i} disabled"
                                                  onclick="{trashRow(this);}">
                                                   <span class="popup-left">
                                                       Delete Assignment
                                                   </span>
                                               </i>
                                           </span>
                                           <span class="popup">
                                               <i class="fa fa-check categorySaveRow${i} disabled"
                                                  onclick="{saveRow(this);}">
                                                   <span class="popup-left">
                                                       Save Changes
                                                   </span>
                                               </i>
                                           </span>
                                       </td>
                                   </tr>`;

                            for (let j = rowDivs.length; j < assignmentData.length; j++) {
                                rowDivs.push(row);
                            }

                            // Move rows
                            for (let j = 0; j < assignmentData.length; j++) {
                                $($(`.categoryTable${i} .categoryStart + tbody`)[categories.indexOf(assignmentCategories[j])]).append(rowDivs[j]);

                                // Bind listeners
                                adjust($($(`.categoryAssignmentScore${i}`)[j]).find(".dynamic-input"), 0, remToPixels(2), remToPixels(4));
                            }

                            // Remove extra rows
                            for (let j = assignmentData.length; j < rowDivs.length; j++) {
                                rowDivs[j].remove();
                            }

                            rowDivs = $(`.categoryClassTableRow${i}`);

                            // Round corners
                            for (let j = 0; j < rowDivs.length; j++) {
                                if (j === assignmentCategories.lastIndexOf(assignmentCategories[j])) {
                                    $(rowDivs[j]).addClass("beforeSeparator");
                                } else {
                                    $(rowDivs[j]).removeClass("beforeSeparator");
                                }
                            }

                            // Div References
                            assignmentDateDivs = $(`.categoryAssignmentDate${i}`);
                            assignmentNameDivs = $(`.categoryAssignmentName${i}`);
                            assignmentCategoryDivs = $(`.categoryAssignmentCategory${i}`);
                            excludeDivs = $(`.categoryExclude${i}`);
                            assignmentScoreDivs = $(`.categoryAssignmentScore${i}`);
                            modTabDivs = $(`.categoryModTab${i}`);
                            resetRowDivs = $(`.categoryResetRow${i}`);
                            trashRowDivs = $(`.categoryTrashRow${i}`);
                            saveRowDivs = $(`.categorySaveRow${i}`);
                            assignmentPercentDivs = $(`.categoryAssignmentPercent${i}`);
                            assignmentOverallDivs = $(`.categoryAssignment${i}`);

                            // Set up visuals
                            resetCategoryDivs = $(`.resetCategory${i}`);
                            trashCategoryDivs = $(`.trashCategory${i}`);
                            saveCategoryDivs = $(`.saveCategory${i}`);
                            $(`#table${i}`).hide();
                            $(`.categoryModAllTab${i}`).css("visibility", "hidden").children("span").children("i").addClass("disabled");
                            $(`.categoryTable${i}`).show();
                        } else {
                            // Data
                            assignmentData = parsedData[i].rawData;
                            assignmentDates = parsedData[i].assignmentDates;
                            assignmentNames = parsedData[i].assignmentNames;
                            assignmentCategories = parsedData[i].assignmentCategories;
                            assignmentScoresParsed = parsedData[i].assignmentScoresParsed;
                            assignmentPercents = parsedData[i].assignmentPercents;
                            assignmentExcludes = parsedData[i].assignmentExcludes;
                            assignmentAdds = parsedData[i].assignmentAdds;

                            rowDivs = $(`.classTableRow${i}`);
                            row = `<tr class="classTableRow${i}">
                                       <td class="compact assignmentDate${i}"></td>
                                       <td>
                                           <div class="excludeToggle">
                                               <div class="assignmentName${i}"></div>
                                               <div>
                                                   <i class="fa fa-ban exclude${i}"
                                                      style="display: flex; flex-flow: column; cursor: pointer; justify-content: center; align-items: center;"
                                                      onclick="toggleExclude(this);">
                                                       <label style="cursor: pointer !important; margin: 0; display: block; font-weight: bolder; font-size: 0.5rem">Exclude</label>
                                                    </i>
                                               </div>
                                           </div>
                                       </td>
                                       <td class="compact assignmentCategory${i}">
                                           <select class="minimal category${i}"
                                                   style="margin: 0"></select>
                                       </td>
                                       <td class="form-weights form-signin form-group assignmentScore${i}">
                                           <div style="display: flex; justify-content: center; align-items: center">
                                               <input class="form-control text-view dynamic-input gotten${i}"
                                                      type="number" step="0.001"
                                                      style="padding: 0; width: 0 !important; "
                                                      placeholder="--"
                                                      onblur="{updatePointsGotten(this);}">
                                                   /<input style="padding: 0; width: 0 !important; "
                                                           class="form-control text-view dynamic-input possible${i}"
                                                           type="number" step="0.001"
                                                           placeholder="--"
                                                           onblur="{updatePointsPossible(this);}">
                                           </div>
                                       </td>
                                       <td class="compact assignmentPercent${i}"></td>
                                       <td class="overall assignment${i}"></td>
                                       <td class="toolTab modTab${i}">
                                           <span class="popup">
                                               <i class="fa fa-undo resetRow${i} disabled"
                                                  onclick="{resetRow(this);}">
                                                   <span class="popup-left">
                                                       Revert Changes
                                                   </span>
                                               </i>
                                           </span>
                                           <span class="popup">
                                               <i class="fa fa-trash trashRow${i} disabled"
                                                  onclick="{trashRow(this);}">
                                                   <span class="popup-left">
                                                       Delete Assignment
                                                   </span>
                                               </i>
                                           </span>
                                           <span class="popup">
                                               <i class="fa fa-check saveRow${i} disabled"
                                                  onclick="{saveRow(this);}">
                                                   <span class="popup-left">
                                                       Save Changes
                                                   </span>
                                               </i>
                                           </span>
                                       </td>
                                   </tr>`;

                            // Add missing rows
                            for (let j = rowDivs.length; j < assignmentData.length; j++) {
                                $(`#table${i}`).append(row);

                                // Bind listeners
                                adjust($($(`.assignmentScore${i}`)[j]).find(".dynamic-input"), 0, remToPixels(2), remToPixels(4));
                            }

                            // Remove extra rows
                            for (let j = assignmentData.length; j < rowDivs.length; j++) {
                                $(`.classTableRow${i}:last-child`).remove();
                            }

                            rowDivs = $(`.classTableRow${i}`);

                            // Div References
                            assignmentDateDivs = $(`.assignmentDate${i}`);
                            assignmentNameDivs = $(`.assignmentName${i}`);
                            assignmentCategoryDivs = $(`.assignmentCategory${i}`);
                            excludeDivs = $(`.exclude${i}`);
                            assignmentScoreDivs = $(`.assignmentScore${i}`);
                            modTabDivs = $(`.modTab${i}`);
                            resetRowDivs = $(`.resetRow${i}`);
                            trashRowDivs = $(`.trashRow${i}`);
                            saveRowDivs = $(`.saveRow${i}`);
                            assignmentPercentDivs = $(`.assignmentPercent${i}`);
                            assignmentOverallDivs = $(`.assignment${i}`);

                            // Set up visuals
                            $(`.categoryTable${i}`).hide();
                            $(`#modAllTab${i}`).css("visibility", "hidden").children("span").children("i").addClass("disabled");
                            $(`#table${i}`).removeClass("unround-top-right").show();
                        }
                        // Rows
                        for (let j = 0; j < assignmentData.length; j++) {
                            let assignmentIndex;
                            if (categorySort[i] && !dateSort[i]) {
                                assignmentIndex = assignmentCategories.filter(c => c === assignmentCategories[j]).length - j + 2 * assignmentCategories.indexOf(assignmentCategories[j]) - 1;
                            } else if (dateSort[i]) {
                                assignmentIndex = j;
                            } else {
                                assignmentIndex = assignmentData.length - 1 - j;
                            }

                            // Set up dates
                            $(assignmentDateDivs[assignmentIndex]).text(assignmentDates[j]);

                            // Set up names
                            $(assignmentNameDivs[assignmentIndex]).text(assignmentNames[j]);

                            // Set up categories
                            let dropdown = $(assignmentCategoryDivs[assignmentIndex]).children("select");

                            // Bind listeners only once
                            if (!$(dropdown).find("option").length) {
                                for (let k = 0; k < categories.length; k++) {
                                    dropdown.append($("<option>").text(categories[k]));
                                }
                                dropdown.on("change", () => {
                                    updateCategory(dropdown);
                                    refreshWithoutReload(true, i);
                                    dropdown.blur();
                                });
                            }

                            // Select assignment category
                            $(dropdown.find("option")[categories.indexOf(assignmentCategories[j])]).prop("selected", true);

                            // Set up excludes
                            if (assignmentExcludes[j]) {
                                $(excludeDivs[assignmentIndex]).find("label").text("Unexclude").addClass("always-show");
                            } else {
                                $(excludeDivs[assignmentIndex]).find("label").text("Exclude").removeClass("always-show");
                            }

                            // Set up scores
                            let scoreDiv = $(assignmentScoreDivs[assignmentIndex]);
                            let score = assignmentScoresParsed[j];
                            if (score.substring(score.length - 2, score.length) === "--") {
                                score = score.substring(0, score.length - 2);
                            }
                            if (score.substring(0, 2) === "--") {
                                score = score.substring(2);
                            }
                            if (score && score.indexOf("/") === -1) {
                                score += "/0";
                            }
                            score = score.split("/");
                            let inputs = scoreDiv.find(".dynamic-input");
                            $(inputs[0]).val(score[0]);
                            $(inputs[1]).val(score[1]);

                            // Set up tooltab buttons
                            let modTab = $(modTabDivs[assignmentIndex]);
                            let resetButton = $(resetRowDivs[assignmentIndex]);
                            let trashButton = $(trashRowDivs[assignmentIndex]);
                            let saveButton = $(saveRowDivs[assignmentIndex]);
                            modTab.css("visibility", "hidden");
                            let realIndex = categorySort[i] ? categorySortedData[i].originalIndices[j] : j;

                            // Set up trash button
                            if (assignmentAdds[j]) {
                                if (recentlyAddedAssignment && _.isEqual(_data[i].grades[realIndex], recentlyAddedAssignment)) {
                                    recentlyAddedAssignment = undefined;
                                    recentlyAddedAssignmentDiv = $(resetButton.parents("tr")[0]);
                                }
                                trashButton.removeClass("disabled");
                                modTab.css("visibility", "visible");
                                $(`#modAllTab${i}`).css("visibility", "visible");
                                $(`#trashAll${i}`).removeClass("disabled");
                                $($(`.categoryModAllTab${i}`)[categories.indexOf(assignmentCategories[j])]).css("visibility", "visible");
                                $($(`.trashCategory${i}`)[categories.indexOf(assignmentCategories[j])]).removeClass("disabled");
                                $(`#table${i}`).addClass("unround-top-right");
                            } else {
                                trashButton.addClass("disabled");
                            }

                            // Set up revert buttons
                            if (!assignmentAdds[j] && _editedAssignments[_data[i].class_name][_data[i].grades[realIndex].psaid]) {
                                resetButton.removeClass("disabled");
                                modTab.css("visibility", "visible");
                                $(`#modAllTab${i}`).css("visibility", "visible");
                                $(`#resetAll${i}`).removeClass("disabled");
                                $($(`.categoryModAllTab${i}`)[categories.indexOf(assignmentCategories[j])]).css("visibility", "visible");
                                $($(`.resetCategory${i}`)[categories.indexOf(assignmentCategories[j])]).removeClass("disabled");
                                $(`#table${i}`).addClass("unround-top-right");
                            } else {
                                resetButton.addClass("disabled");
                            }

                            // Set up save buttons
                            if (assignmentAdds[j] && !_.isEqual(_addedAssignments[_data[i].class_name][aData[i][realIndex]], addedAssignments[_data[i].class_name][aData[i][realIndex]]) || !_.isEqual(editedAssignments[_data[i].class_name][_data[i].grades[realIndex].psaid], _editedAssignments[_data[i].class_name][_data[i].grades[realIndex].psaid])) {
                                saveButton.removeClass("disabled");
                                modTab.css("visibility", "visible");
                                $(`#modAllTab${i}`).css("visibility", "visible");
                                $(`#saveAll${i}`).removeClass("disabled");
                                $($(`.categoryModAllTab${i}`)[categories.indexOf(assignmentCategories[j])]).css("visibility", "visible");
                                $($(`.saveCategory${i}`)[categories.indexOf(assignmentCategories[j])]).removeClass("disabled");
                                $(`#table${i}`).addClass("unround-top-right");
                            } else {
                                saveButton.addClass("disabled");
                            }

                            // Set up percents
                            let percent = assignmentPercents[j];
                            let letterGrade = "";
                            if (isNaN(parseFloat(percent))) {
                                percent = "--";
                            } else {
                                letterGrade = " (" + getLetterGrade(percent) + ")";
                                percent += "%";
                            }
                            $(assignmentPercentDivs[assignmentIndex]).html("<div style=\"display: flex; align-items: center; justify-content: center;\"><div>" + percent + "</div><div style=\"margin-left: 0.4rem\">" + letterGrade + "</div></div>");

                            // Set up coloring and gain/loss
                            let display = +isNaN(parseFloat(assignmentData[j]).toFixed(2)) ? +parseFloat(assignmentData[assignmentData.length - 1]).toFixed(2) : parseFloat(assignmentData[j]).toFixed(2);
                            let delta = (assignmentData[j] - (assignmentData[j - 1] || 100)).toFixed(3);
                            if (categorySort[i] && assignmentCategories[j] !== assignmentCategories[j - 1]) {
                                delta = assignmentData[j] - 100;
                            }
                            let colorClass;
                            let bgColor;

                            if (delta > 0) {
                                colorClass = "improve";
                                bgColor = "rgba(0, 255, 0, " + colorAlphaFunction(delta) + ")";
                                delta = "+" + delta + "% <i class=\"fa fa-long-arrow-up\"></i>";
                            } else if (delta < 0) {
                                colorClass = "deprove";
                                bgColor = "rgba(255, 0, 0, " + colorAlphaFunction(delta) + ")";
                                delta = delta + "% <i class=\"fa fa-long-arrow-down\"></i>";
                            } else {
                                colorClass = "";
                                bgColor = "";
                                delta = "±0.000% <i class=\"fa fa-arrows-v\"></i>";
                            }
                            display = "<div class=\"" + colorClass + "\" style=\"display: flex; justify-content: space-around; align-items: flex-end;\"><div style=\"display: flex; flex-flow: row; justify-content: center; align-items: center\"><div>" + display + "%" + "</div><div style=\"margin-left: 0.4rem\">(" + getLetterGrade(display) + ")</div></div><div class=\"delta\" style=\"font-family: 'Maison Mono',monospace\">" + delta + "</div></div>";
                            $(assignmentOverallDivs[assignmentIndex]).html(display).css("font-weight", "bold");
                            $(rowDivs[assignmentIndex]).css("background-color", bgColor);

                            // Set up exclusion
                            if (assignmentExcludes[j]) {
                                $(rowDivs[assignmentIndex]).addClass("excluded").find(".dynamic-input").addClass("excluded");
                            } else {
                                $(rowDivs[assignmentIndex]).removeClass("excluded").find(".dynamic-input").removeClass("excluded");
                            }
                        }
                    }
                }
                if (recentlyAddedAssignmentDiv) {
                    $("html, body").animate({scrollTop: recentlyAddedAssignmentDiv.offset().top - $(window).height() / 2 - recentlyAddedAssignmentDiv.height() / 2}, 400);
                    recentlyAddedAssignmentDiv.addClass("addAssignmentAnimation");
                    recentlyAddedAssignmentDiv.on("webkitAnimationEnd oanimationend msAnimationEnd animationend", function () {
                        $(this).removeClass("addAssignmentAnimation");
                    });
                    recentlyAddedAssignmentDiv = undefined;
                }
            }

            function setupOverviewTable() {
                for (let i = 0; i < parsedData.length; i++) {
                    let overallGrade = _data[i].overall_percent;
                    let assignmentData = parsedData[i].rawData;
                    let lastIndex = assignmentData.length - 1;
                    let delta = +(assignmentData[lastIndex] - assignmentData[lastIndex - 1]).toFixed(5);
                    let color;

                    if (delta > 0) {
                        delta = "<i class=\"fa fa-caret-up\"></i>" + delta + "%";
                        color = "green";
                    } else if (delta < 0) {
                        delta = "<i class=\"fa fa-caret-down\"></i>" + delta + "%";
                        color = "red";
                    }
                    delta = (delta ? (" <div class=\"delta\" style=\"color: " + color + "\">" + delta + "</div>") : "");
                    if (overallGrade) {
                        document.getElementById("overviewChart" + i).innerHTML = "<div class=\"overallGrade\">" + (+(overallGrade.toFixed(4))).toString() + "%" + "</div><div class=\"overallLetter\">" + _data[i].overall_letter + "</div>" + delta;
                        document.getElementById("link" + i).querySelectorAll("a")[0].innerHTML = _data[i].class_name + `<br>` + _data[i].overall_percent + ` (` + _data[i].overall_letter + `)<span class="popup"><i id="incorrectOverviewGrade` + i + `"class="fa fa-exclamation-triangle" style="display: none; margin-left: 0.2rem"><span class="popup-bottom">Does not match calculated grade</span></i></span>`;
                    } else {
                        document.getElementById("overviewChart" + i).innerHTML = "N/A";
                        document.getElementById("link" + i).querySelectorAll("a")[0].innerHTML = _data[i].class_name + `<br>N/A<span class="popup"><i id="incorrectOverviewGrade` + i + `"class="fa fa-exclamation-triangle" style="display: none; margin-left: 0.2rem"><span class="popup-bottom">Does not match calculated grade</span></i></span>`;
                    }
                }
            }

            function getCategoryGottenAndPossible(classIndex, categoryName) {
                let grades = _data[classIndex].grades;
                let totalGotten = 0;
                let totalPossible = 0;
                for (let i = 0; i < grades.length; i++) {
                    if (!grades[i].exclude && grades[i].category === categoryName) {
                        if (grades[i].points_gotten !== false && grades[i].points_possible !== false) {
                            totalGotten += grades[i].points_gotten;
                            totalPossible += grades[i].points_possible;
                        }
                    }
                }
                return {"gotten": totalGotten, "possible": totalPossible};
            }

            function getCategoryGrade(classIndex, categoryName) {
                let categoryGottenAndPossible = getCategoryGottenAndPossible(classIndex, categoryName);
                let totalGotten = categoryGottenAndPossible.gotten;
                let totalPossible = categoryGottenAndPossible.possible;
                if (totalPossible === 0) {
                    return null;
                }
                return totalGotten / totalPossible * 100;
            }

            function cleanEdits(classIndex, assignmentIndex) {
                let edited = _editedAssignments[_data[classIndex].class_name][_data[classIndex].grades[assignmentIndex].psaid];
                let current = data[classIndex].grades.find(g => g.psaid === _data[classIndex].grades[assignmentIndex].psaid);
                let keys = Object.keys(edited);
                for (let i = 0; i < keys.length; i++) {
                    let key = keys[i];
                    if (edited[key] === current[key]) {
                        delete edited[key];
                    }
                }
                if (Object.keys(edited).length === 0) {
                    delete edited;
                }
            }

            /**
             * Parses all data
             * @param classIndex index of class to parse. If not given or undefined, all classes are parsed
             */
            function parseData(classIndex) {

                // Reset local data copies
                if (classIndex === undefined) {
                    _data = JSON.parse(JSON.stringify(data));
                    aData = data.map(c => Array(c.grades.length).fill(undefined));
                } else {
                    _data[classIndex] = JSON.parse(JSON.stringify(data[classIndex]));
                    aData[classIndex] = Array(data[classIndex].grades.length).fill(undefined);
                }

                // Get unobtained weights
                for (let i = 0; i < _data.length; i++) {
                    if (classIndex === undefined || classIndex === i) {
                        let classData = _data[i];
                        let className = classData.class_name;
                        let localMissingCategories = Object.keys(weights[className]["weights"]).filter(category => !weights[className]["weights"][category] && weights[className]["weights"][category] !== 0);
                        delete unobtainedWeights[className];
                        if (localMissingCategories.length > 0 && weights[className]["hasWeights"] !== "false") {
                            unobtainedWeights[className] = localMissingCategories;
                        }
                    }
                }

                // Insert added assignments
                for (let i = 0; i < _data.length; i++) {
                    if (classIndex === undefined || classIndex === i) {
                        for (let j = 0; j < _addedAssignments[_data[i].class_name].length; j++) {
                            let assignmentObject = JSON.parse(JSON.stringify(_addedAssignments[_data[i].class_name][j]));
                            if (_.findIndex(_data[i].grades, (a) => _.isMatch(a, assignmentObject)) > -1 || _data[i].grades.indexOf(j) > -1) {
                                continue;
                            }
                            let insertAt = _data[i].grades.findIndex(g => new Date(g.date) > new Date(assignmentObject.date));
                            if (insertAt >= 0) {
                                _data[i].grades.splice(insertAt, 0, assignmentObject);
                                aData[i].splice(insertAt, 0, j);
                            } else {
                                _data[i].grades.push(assignmentObject);
                                aData[i].push(j);
                            }
                        }
                    }
                }

                // Apply edits
                for (let i = 0; i < _data.length; i++) {
                    if (classIndex === undefined || classIndex === i) {
                        for (let j = 0; j < Object.keys(_editedAssignments[_data[i].class_name]).length; j++) {
                            let searchID = parseInt(Object.keys(_editedAssignments[_data[i].class_name])[j]);
                            let needsEdits = _data[i].grades.find(g => g.psaid === searchID);
                            Object.assign(needsEdits, _editedAssignments[_data[i].class_name][searchID]);
                            if (!Object.keys(_editedAssignments[_data[i].class_name][searchID]).length) {
                                delete _editedAssignments[_data[i].class_name][searchID];
                            }
                        }
                    }
                }

                //Add array to each object in parsedData: one for weights (not needed?), one for missing weights
                //Get data for one class
                for (let i = 0; i < _data.length; i++) {
                    let categories = Object.keys(weights[_data[i].class_name]["weights"]);
                    if (classIndex === undefined || classIndex === i) {
                        //Add sorting vars
                        if (!dateSort[i] && dateSort[i] !== false) {
                            dateSort[i] = false;
                        }
                        if (!categorySort[i] && categorySort[i] !== false) {
                            categorySort[i] = false;
                        }

                        let classData = _data[i].grades;
                        let className = _data[i].class_name;
                        let overallGradeSteps = [];
                        let excludedGradeSteps = [];
                        let categoryGradeSteps = [];
                        let categoryGrades = {}; // If category is default
                        let totalPossiblesAndGottens = {}; //by category
                        let totalWeightValue = 0; // divide by the total weight amount - so even if the final is not entered the grade is still of of 100
                        // VERY JANK CHANGE LATER
                        let doesntHaveWeights = (className in unobtainedWeights) || (weights[className]["hasWeights"] === "false");
                        for (let grade of classData) {
                            let category = grade.category;
                            if (doesntHaveWeights) {
                                category = "default";
                                if (!categoryGrades[grade.category]) {
                                    categoryGrades[grade.category] = {
                                        totalPossible: 0, totalGotten: 0
                                    };
                                }
                            }
                            try {
                                if (typeof totalPossiblesAndGottens[category] === "undefined" && !grade.exclude && grade.points_possible !== false && grade.points_gotten !== false) {
                                    let weightVal = 100;
                                    if (!doesntHaveWeights) {
                                        weightVal = Number(weights[className]["weights"][category]);
                                    }
                                    totalPossiblesAndGottens[category] = {
                                        totalPossible: 0, totalGotten: 0, weight: weightVal
                                    };
                                    totalWeightValue += weightVal;
                                }
                                if (!grade.exclude) {
                                    if (grade.points_possible !== false && grade.points_gotten !== false) {
                                        totalPossiblesAndGottens[category].totalPossible += grade.points_possible;
                                        totalPossiblesAndGottens[category].totalGotten += grade.points_gotten;
                                        if (doesntHaveWeights) {
                                            categoryGrades[grade.category].totalPossible += grade.points_possible;
                                            categoryGrades[grade.category].totalGotten += grade.points_gotten;
                                        }
                                        let overallPercent = 0;
                                        for (let [, value] of Object.entries(totalPossiblesAndGottens)) {
                                            if (value.totalGotten === false || value.totalPossible === false) {
                                                totalWeightValue -= value.weight;
                                                value.weight = 0;
                                                continue;
                                            }
                                            overallPercent += ((value.weight * (value.totalPossible !== 0 ? (value.totalGotten / value.totalPossible) : 1)));
                                        }
                                        let total = overallPercent / totalWeightValue * 100;
                                        overallGradeSteps.push(total);
                                    } else {
                                        overallGradeSteps.push(overallGradeSteps.filter(x => x).slice(-1)[0] || 100);
                                    }
                                } else {
                                    overallGradeSteps.push(false);
                                    excludedGradeSteps.push(overallGradeSteps.filter(x => x).slice(-1)[0] || 100);
                                }
                                if (doesntHaveWeights) {
                                    if (categoryGrades[grade.category]) {
                                        categoryGradeSteps.push((categoryGrades[grade.category].totalPossible !== 0 ? categoryGrades[grade.category].totalGotten / categoryGrades[grade.category].totalPossible : 1) * 100);
                                    } else {
                                        categoryGradeSteps.push(100);
                                    }
                                } else {
                                    if (totalPossiblesAndGottens[category]) {
                                        categoryGradeSteps.push((totalPossiblesAndGottens[category].totalPossible !== 0 ? totalPossiblesAndGottens[category].totalGotten / totalPossiblesAndGottens[category].totalPossible : 1) * 100);
                                    } else {
                                        categoryGradeSteps.push(100);
                                    }
                                }
                            } catch (err) {
                                // console.log(err);
                                // console.log("bad weight input");
                            }
                        }
                        let assignmentNames = classData.filter(x => !x.exclude).map(x => x.assignment_name);
                        let assignmentDates = classData.filter(x => !x.exclude).map(x => x.date);
                        let assignmentTimestamps = classData.filter(x => !x.exclude).map(x => new Date(x.date));
                        let assignmentPercents = classData.filter(x => !x.exclude).map(x => x.grade_percent);
                        let assignmentScoresParsed = classData.filter(x => !x.exclude).map(x => (x.points_gotten === false ? "--" : x.points_gotten) + "/" + (x.points_possible === false ? "--" : x.points_possible));
                        let assignmentCategories = classData.filter(x => !x.exclude).map(x => x.category);
                        let mixedData = overallGradeSteps.filter(x => x).map((grade, i) => {
                            return {x: assignmentTimestamps[i], y: grade};
                        });
                        chartData[i] = {
                            assignmentNames: assignmentNames,
                            assignmentDates: assignmentDates,
                            assignmentTimestamps: assignmentTimestamps,
                            assignmentPercents: assignmentPercents,
                            assignmentScoresParsed: assignmentScoresParsed,
                            assignmentCategories: assignmentCategories,
                            mixedData: mixedData
                        };
                        assignmentNames = classData.map(x => x.assignment_name);
                        assignmentDates = classData.map(x => x.date);
                        assignmentPercents = classData.map(x => x.grade_percent);
                        assignmentScoresParsed = classData.map(x => parseScore(x.points_gotten, x.points_possible));
                        assignmentCategories = classData.map(x => x.category);
                        let assignmentExcludes = classData.map(x => x.exclude);
                        let assignmentAdds = classData.map((grade, index) => aData[i][index] !== undefined);
                        let rawData = overallGradeSteps.map((grade, index) => grade === false ? (index >= 0 ? excludedGradeSteps.shift() : 100) : grade);
                        parsedData[i] = {
                            assignmentNames: assignmentNames,
                            assignmentDates: assignmentDates,
                            assignmentPercents: assignmentPercents,
                            assignmentScoresParsed: assignmentScoresParsed,
                            assignmentCategories: assignmentCategories,
                            assignmentExcludes: assignmentExcludes,
                            assignmentAdds: assignmentAdds,
                            rawData: rawData
                        };

                        // This took forever...I am so proud of it - Joel 06/03/20 10:25PM
                        let sortHelper = Array.apply(null, Array(assignmentCategories.length)).map((x, index) => index).sort((a, b) => categories.indexOf(assignmentCategories[a]) - categories.indexOf(assignmentCategories[b]));
                        categorySortedData[i] = {
                            assignmentNames: assignmentNames.map((x, index, arr) => arr[sortHelper[index]]),
                            assignmentDates: assignmentDates.map((x, index, arr) => arr[sortHelper[index]]),
                            assignmentPercents: assignmentPercents.map((x, index, arr) => arr[sortHelper[index]]),
                            assignmentScoresParsed: assignmentScoresParsed.map((x, index, arr) => arr[sortHelper[index]]),
                            assignmentCategories: assignmentCategories.map((x, index, arr) => arr[sortHelper[index]]),
                            assignmentExcludes: assignmentExcludes.map((x, index, arr) => arr[sortHelper[index]]),
                            assignmentAdds: assignmentAdds.map((x, index, arr) => arr[sortHelper[index]]),
                            rawData: categoryGradeSteps.map((x, index, arr) => arr[sortHelper[index]]),
                            originalIndices: sortHelper
                        };
                    }
                }
            }

            function parseScore(points_gotten, points_possible) {
                return (points_gotten === false ? "--" : points_gotten) + (points_possible === false ? "" : "/" + points_possible);
            }

            function renderAllCharts(classIndex) {
                if (_data && _data.length && !mobile) {
                    renderOverviewChart();
                    $("#chart-1").click(function (e) {
                        let activePoints = charts[0].getElementsAtEvent(e);
                        let activeDataSet = charts[0].getDatasetAtEvent(e);

                        if (activePoints.length > 0) {
                            let clickedDatasetIndex = activeDataSet[0]._datasetIndex;
                            showPage(clickedDatasetIndex);
                        }
                    });
                    for (let i = 0; i < _data.length; i++) {
                        if (classIndex === undefined || classIndex === i) {
                            renderChart(i);
                        }
                    }
                }
            }

            function resetZoom(id) {
                // After experimenting, any chart without 28 keys does not reset, so rerender it
                if (Object.keys(charts[id + 1]).length !== 28) {
                    if (id >= 0) {
                        renderChart(id);
                    } else {
                        renderOverviewChart();
                    }
                } else {
                    charts[id + 1].resetZoom();
                }
            }

            let hoveredDatasetIndex = -1;

            let running;

            function renderOverviewChart() {
                $("#chart-1").remove();
                $("#chart-container-1").html("<button id=\"reset-zoom-1\" style=\"position: absolute; top: 0; right: 0; height: fit-content; display:none\" class=\"btn btn-sm\" onclick=\"resetZoom(-1); $(this).hide()\">Reset</button><canvas id=\"chart-1\"></canvas>");
                let ctx = document.getElementById("chart-1");
                let dataset = [];
                let _colors = colors;
                if (!_data) {
                    return;
                }
                let startDate = Infinity;
                let endDate = 0;
                let lowScore = Infinity;
                for (let i = 0; i < _data.length; i++) {
                    startDate = Math.min(startDate, chartData[i].mixedData.reduce((a, b) => Math.min(a, Date.parse(b.x)), Infinity));
                    endDate = Math.max(endDate, chartData[i].mixedData.reduce((a, b) => Math.max(a, Date.parse(b.x)), 0));
                    lowScore = Math.min(lowScore, chartData[i].mixedData.reduce((a, b) => Math.min(a, b.y), Infinity));
                    let _mixedData = JSON.parse(JSON.stringify(chartData[i].mixedData));
                    if (!correctCalc(i)) {
                        if (endDate === 0) {
                            _mixedData.push({
                                                x: new Date(Date.now() - 24 * 60 * 60 * 1000),
                                                y: _data[i].overall_percent
                                            });
                            _mixedData.push({x: new Date(Date.now()), y: _data[i].overall_percent});
                        } else {
                            _mixedData.push({x: new Date(endDate + 24 * 60 * 60 * 1000), y: _data[i].overall_percent});
                        }
                    }
                    dataset.push({
                                     label: _data[i].class_name,
                                     backgroundColor: "transparent",
                                     pointBackgroundColor: _colors[i],
                                     pointBorderColor: "transparent",
                                     borderColor: (correctCalc(i) ? _colors[i] : "darkgray"),
                                     data: _mixedData,
                                     cubicInterpolationMode: "monotone",
                                     borderDash: (correctCalc(i) ? [0, 0] : [3, 3]),
                                     spanGaps: false,
                                     pointRadius: 3,
                                     borderWidth: (correctCalc(i) ? 3 : 1),
                                     pointHoverRadius: 7,
                                     pointHoverBackgroundColor: _colors[i],
                                     pointHoverBorderColor: _colors[i],
                                     pointHoverBorderWidth: 2
                                 });
                }
                let possibles;
                let possibleLabels;
                if (startDate < endDate) {
                    possibles = [{"A-": 89.5}, {"B-": 79.5}, {"C-": 69.5}, {"D-": 59.5}];
                    possibles = possibles.filter(element => Object.values(element)[0] > lowScore - 5);
                    possibleLabels = possibles.map(element => Object.keys(element)[0]);
                    possibles = possibles.map(element => Object.values(element)[0]);
                    for (let i = 0; i < possibles.length; i++) {
                        let mixedData = [];
                        for (let j = startDate; j < endDate; j += Math.ceil((endDate - startDate) / 100)) {
                            mixedData.push({x: new Date(j), y: possibles[i]});
                        }
                        dataset.push({
                                         label: "undefined",
                                         backgroundColor: "transparent",
                                         pointBackgroundColor: "transparent",
                                         pointBorderColor: "transparent",
                                         borderColor: darkMode ? "white" : "black",
                                         data: mixedData,
                                         cubicInterpolationMode: "monotone",
                                         spanGaps: false,
                                         borderDash: [10, 10],
                                         pointRadius: 0,
                                         borderWidth: 1,
                                         pointHoverRadius: 0,
                                         pointHoverBackgroundColor: "transparent",
                                         pointHoverBorderColor: darkMode ? "white" : "black",
                                         pointHoverBorderWidth: 0
                                     });
                    }
                }
                let numRunning = 0;
                charts[0] = new Chart(ctx, {
                    type: "line", data: {
                        datasets: dataset
                    }, options: {
                        hover: {
                            mode: "nearest", intersect: false
                        }, onHover: function onHover(evt, activeElements) {
                            if (!activeElements || !activeElements.length) {
                                for (let i = 0; i < this.data.datasets.length; i++) {
                                    if (i >= chartData.length) {
                                        continue;
                                    }
                                    if (!correctCalc(i)) {
                                        continue;
                                    }
                                    let dataset = this.data.datasets[i];
                                    dataset.borderWidth = 3;
                                    dataset.pointRadius = 3;
                                }
                                this.update(1000);
                                return;
                            }
                            let datasetIndex = activeElements[0]._datasetIndex;
                            let activeDataset = this.data.datasets[datasetIndex];
                            for (let i = 0; i < this.data.datasets.length; i++) {
                                if (i >= chartData.length) {
                                    continue;
                                }
                                if (!correctCalc(i)) {
                                    continue;
                                }
                                let inactiveDataset = this.data.datasets[i];
                                inactiveDataset.borderWidth = 3;
                                inactiveDataset.pointRadius = 3;
                            }
                            if (datasetIndex < chartData.length && correctCalc(datasetIndex)) {
                                activeDataset.borderWidth = 6;
                                activeDataset.pointRadius = 6;
                            }
                            this.update(100);
                        }, scales: {
                            xAxes: [{
                                type: "time", time: {
                                    unit: chartData.filter(d => new Date(d.assignmentDates.slice(-1)[0]).getMonth() !== new Date(d.assignmentDates[0]).getMonth()).length ? "month" : "day"
                                }, ticks: {
                                    fontColor: (darkMode ? "white" : "black"), fontFamily: "Verdana", fontSize: "13"
                                }, gridLines: {
                                    color: (darkMode ? "#555555" : "#CCCCCC")
                                }
                            }], yAxes: [{
                                ticks: {
                                    suggestedMax: appearance.regularizeClassGraphs ? 110 : undefined,
                                    suggestedMin: appearance.regularizeClassGraphs ? 70 : undefined,
                                    fontColor: (darkMode ? "white" : "black"),
                                    fontFamily: "Verdana",
                                    fontSize: "12"
                                }, gridLines: {
                                    color: (darkMode ? "#555555" : "#CCCCCC"), drawBorder: false
                                }
                            }]
                        }, animation: {
                            easing: "easeOutCubic"
                        }, legend: {
                            display: true, position: "top", labels: {
                                usePointStyle: true,
                                fontColor: (darkMode ? "white" : "black"),
                                fontFamily: "Verdana",
                                boxWidth: 20,
                                fontSize: 13,
                                filter: function (item) {
                                    return !item.text.includes("undefined");
                                }
                            }
                        }, tooltips: {
                            enabled: true,
                            mode: "nearest",
                            intersect: false,
                            displayColors: true,
                            caretSize: 10,
                            backgroundColor: darkMode ? "black" : "white",
                            callbacks: {
                                title: function (tooltipItems, data) {
                                    if (tooltipItems[0].datasetIndex >= chartData.length) {
                                        return possibles[tooltipItems[0].datasetIndex - chartData.length] + "% (" + possibleLabels[tooltipItems[0].datasetIndex - chartData.length] + ")";
                                    }
                                    if (!correctCalc(tooltipItems[0].datasetIndex)) {
                                        if (!chartData[tooltipItems[0].datasetIndex].mixedData.length) {
                                            return "Unknown Date " + _data[tooltipItems[0].datasetIndex].overall_percent + "% (" + _data[tooltipItems[0].datasetIndex].overall_letter + ")";
                                        }
                                        if (tooltipItems[0].index >= chartData[tooltipItems[0].datasetIndex].mixedData.length) {
                                            return moment(tooltipItems[0].xLabel).format("MM/DD/YY") + " " + _data[tooltipItems[0].datasetIndex].overall_percent + "% (" + _data[tooltipItems[0].datasetIndex].overall_letter + ")";
                                        }
                                        return moment(tooltipItems[0].xLabel).format("MM/DD/YY") + " N/A [Inaccurate weights]";
                                    }
                                    return moment(tooltipItems[0].xLabel).format("MM/DD/YY") + " " + +parseFloat(tooltipItems[0].value).toFixed(2) + "% (" + getLetterGrade(tooltipItems[0].value) + ")";
                                }, label: function (tooltipItem) {
                                    if (tooltipItem.datasetIndex >= chartData.length) {
                                        return;
                                    }
                                    if (!chartData[tooltipItem.datasetIndex].mixedData.length) {
                                        return;
                                    }
                                    if (tooltipItem.index >= chartData[tooltipItem.datasetIndex].mixedData.length) {
                                        let delta = +(_data[tooltipItem.datasetIndex].overall_percent - chartData[tooltipItem.datasetIndex].mixedData.slice(-1)[0].y).toFixed(3);
                                        if (delta > 0) {
                                            delta = "+" + delta;
                                        }
                                        return delta + "% (To Match PowerSchool)";
                                    }
                                    return ["[" + chartData[tooltipItem.datasetIndex].assignmentCategories[tooltipItem.index] + "] " + chartData[tooltipItem.datasetIndex].assignmentNames[tooltipItem.index] + ((chartData[tooltipItem.datasetIndex].assignmentPercents[tooltipItem.index] !== false && chartData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].substring(0, 2) !== "--") ? (" - " + chartData[tooltipItem.datasetIndex].assignmentPercents[tooltipItem.index] + "% ") : (" ")) + ((chartData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].substring(chartData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].length - 2)) !== "/0" ? ("(" + chartData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index] + ")") : ("(" + chartData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].substring(0, chartData[tooltipItem.datasetIndex].assignmentScoresParsed[tooltipItem.index].length - 2) + ")"))];
                                }
                            }
                        }, responsive: true, maintainAspectRatio: false, plugins: {
                            zoom: {
                                zoom: {
                                    enabled: true, mode: "y", speed: 0.05, onZoom: ({chart}) => {
                                        $("#reset-zoom-1").show();

                                        // Disable hovering and tooltips to make animation smoother
                                        chart.options.hover.mode = null;
                                        chart.options.tooltips.enabled = false;
                                    }, onZoomComplete: ({chart}) => {
                                        chart.options.hover.mode = "nearest";
                                        chart.options.tooltips.enabled = true;
                                    }
                                }, pan: {
                                    enabled: true, mode: "y", speed: 0.05, onPan: ({chart}) => {
                                        $("#reset-zoom-1").show();

                                        // Disable hovering and tooltips to make animation smoother
                                        chart.options.hover.mode = null;
                                        chart.options.tooltips.enabled = false;
                                    }, onPanComplete: ({chart}) => {
                                        chart.options.hover.mode = "nearest";
                                        chart.options.tooltips.enabled = true;
                                    }
                                }
                            }
                        }
                    }
                });
            }

            Chart.pluginService.register({
                                             afterRender: chartInstance => {
                                                 $(`#chart-container${chartInstance.chart.ctx.canvas.id.substring(5)} .chart-placeholder`).remove();
                                             }
                                         });

            function renderChart(id) {
                $("#chart" + id).remove();
                // if (chartData[id].mixedData.length) {
                $("#chart-container" + id).html("<button id=\"reset-zoom" + id + "\" style=\"position: absolute; top: 0; right: 0; height: fit-content; display:none\" class=\"btn btn-sm\" onclick=\"resetZoom(" + id + "); $(this).hide()\">Reset</button><div class=\"chart-placeholder fa fa-spin fa-spinner\"></div><canvas id=\"chart" + id + "\"></canvas>");
                let ctx = document.getElementById("chart" + id);
                let _colors = colors;
                let startDate = chartData[id].mixedData.reduce((a, b) => Math.min(a, Date.parse(b.x)), Infinity);
                let endDate = chartData[id].mixedData.reduce((a, b) => Math.max(a, Date.parse(b.x)), 0);
                let lowScore = chartData[id].mixedData.reduce((a, b) => Math.min(a, b.y), Infinity);
                let dataset = [];
                let _mixedData = JSON.parse(JSON.stringify(chartData[id].mixedData));
                if (!correctCalc(id)) {
                    if (endDate === 0) {
                        _mixedData.push({x: new Date(Date.now() - 24 * 60 * 60 * 1000), y: _data[id].overall_percent});
                        _mixedData.push({x: new Date(Date.now()), y: _data[id].overall_percent});
                    } else {
                        _mixedData.push({x: new Date(endDate + 24 * 60 * 60 * 1000), y: _data[id].overall_percent});
                    }
                }
                dataset.push({
                                 label: "chartData[id]",
                                 backgroundColor: (darkMode ? "rgba(256,256,256,0.05)" : "rgba(0,0,0,0.05)"),
                                 pointBackgroundColor: _colors[id],
                                 pointBorderColor: _colors[id],
                                 borderColor: (correctCalc(id) ? _colors[id] : "darkgray"),
                                 fill: "start",
                                 data: _mixedData,
                                 cubicInterpolationMode: "monotone",
                                 borderDash: (correctCalc(id) ? [0, 0] : [3, 3]),
                                 spanGaps: false,
                                 pointRadius: 3,
                                 borderWidth: (correctCalc(id) ? 3 : 1),
                                 pointHoverRadius: 7,
                                 pointHoverBackgroundColor: _colors[id],
                                 pointHoverBorderColor: _colors[id],
                                 pointHoverBorderWidth: 2
                             });
                let possibles;
                let possibleLabels;
                if (startDate < endDate) {
                    possibles = [{"A-": 89.5}, {"B-": 79.5}, {"C-": 69.5}, {"D-": 59.5}];
                    possibles = possibles.filter(element => Object.values(element)[0] > lowScore - 5);
                    possibleLabels = possibles.map(element => Object.keys(element)[0]);
                    possibles = possibles.map(element => Object.values(element)[0]);
                    for (let i = 0; i < possibles.length; i++) {
                        let mixedData = [];
                        for (let j = startDate; j < endDate; j += Math.ceil((endDate - startDate) / 100)) {
                            mixedData.push({x: new Date(j), y: possibles[i]});
                        }
                        dataset.push({
                                         label: "undefined",
                                         backgroundColor: "transparent",
                                         pointBackgroundColor: "transparent",
                                         pointBorderColor: "transparent",
                                         borderColor: darkMode ? "white" : "black",
                                         data: mixedData,
                                         cubicInterpolationMode: "monotone",
                                         spanGaps: false,
                                         borderDash: [10, 10],
                                         pointRadius: 0,
                                         borderWidth: 1,
                                         pointHoverRadius: 0,
                                         pointHoverBackgroundColor: "transparent",
                                         pointHoverBorderColor: darkMode ? "white" : "black",
                                         pointHoverBorderWidth: 0
                                     });
                    }
                }
                charts[id + 1] = new Chart(ctx, {
                    type: "line", data: {
                        datasets: dataset
                    }, options: {
                        hover: {
                            mode: "nearest", intersect: false
                        }, scales: {
                            xAxes: [{
                                type: "time", time: {
                                    unit: new Date(chartData[id].assignmentDates.slice(-1)[0]).getMonth() === new Date(chartData[id].assignmentDates[0]).getMonth() ? "day" : "month"
                                }, ticks: {
                                    fontColor: (darkMode ? "white" : "black"), fontFamily: "Verdana", fontSize: "13"
                                }, gridLines: {
                                    color: (darkMode ? "#555555" : "#CCCCCC")
                                }
                            }], yAxes: [{
                                ticks: {
                                    suggestedMax: appearance.regularizeClassGraphs ? 110 : undefined,
                                    suggestedMin: appearance.regularizeClassGraphs ? 70 : undefined,
                                    fontColor: (darkMode ? "white" : "black"),
                                    fontFamily: "Verdana",
                                    fontSize: "12"
                                }, gridLines: {
                                    color: (darkMode ? "#555555" : "#CCCCCC"), drawBorder: false
                                }
                            }]
                        }, animation: {
                            easing: "easeOutCubic"
                        }, legend: {
                            display: false
                        }, tooltips: {
                            enabled: true, position: "nearest", intersect: false, displayColors: false, callbacks: {
                                title: function (tooltipItems) {
                                    if (tooltipItems[0].datasetIndex >= 1) {
                                        return possibles[tooltipItems[0].datasetIndex - 1] + "% (" + possibleLabels[tooltipItems[0].datasetIndex - 1] + ")";
                                    }
                                    if (!correctCalc(id)) {
                                        if (!chartData[id].mixedData.length) {
                                            return "Unknown Date " + _data[id].overall_percent + "% (" + _data[id].overall_letter + ")";
                                        }
                                        if (tooltipItems[0].index >= chartData[id].mixedData.length) {
                                            return moment(tooltipItems[0].xLabel).format("MM/DD/YY") + " " + _data[id].overall_percent + "% (" + _data[id].overall_letter + ")";
                                        }
                                        return moment(tooltipItems[0].xLabel).format("MM/DD/YY") + " N/A [Inaccurate weights]";
                                    }
                                    return moment(tooltipItems[0].xLabel).format("MM/DD/YY") + " " + +parseFloat(tooltipItems[0].value).toFixed(4) + "% (" + getLetterGrade(tooltipItems[0].value) + ")";
                                }, label: function (tooltipItem) {
                                    if (tooltipItem.datasetIndex >= 1) {
                                        return;
                                    }
                                    if (!chartData[tooltipItem.datasetIndex].mixedData.length) {
                                        return;
                                    }
                                    if (tooltipItem.index >= chartData[id].mixedData.length) {
                                        let delta = +(_data[id].overall_percent - chartData[id].mixedData.slice(-1)[0].y).toFixed(3);
                                        if (delta > 0) {
                                            delta = "+" + delta;
                                        }
                                        return delta + "% (To Match PowerSchool)";
                                    }
                                    return ["[" + chartData[id].assignmentCategories[tooltipItem.index] + "] " + chartData[id].assignmentNames[tooltipItem.index] + ((chartData[id].assignmentPercents[tooltipItem.index] !== false && chartData[id].assignmentScoresParsed[tooltipItem.index].substring(0, 2) !== "--") ? (" - " + chartData[id].assignmentPercents[tooltipItem.index] + "% ") : (" ")) + ((chartData[id].assignmentScoresParsed[tooltipItem.index].substring(chartData[id].assignmentScoresParsed[tooltipItem.index].length - 2)) !== "/0" ? ("(" + chartData[id].assignmentScoresParsed[tooltipItem.index] + ")") : ("(" + chartData[id].assignmentScoresParsed[tooltipItem.index].substring(0, chartData[id].assignmentScoresParsed[tooltipItem.index].length - 2) + ")"))];
                                }
                            }
                        }, responsive: true, maintainAspectRatio: false, plugins: {
                            zoom: {
                                zoom: {
                                    enabled: true, mode: "y", speed: 0.05, onZoom: ({chart}) => {
                                        $("#reset-zoom" + id).show();

                                        // Disable hovering and tooltips to make animation smoother
                                        chart.options.hover.mode = null;
                                        chart.options.tooltips.enabled = false;
                                    }, onZoomComplete: ({chart}) => {
                                        chart.options.hover.mode = "nearest";
                                        chart.options.tooltips.enabled = true;
                                    }
                                }, pan: {
                                    enabled: true, mode: "y", speed: 0.05, onPan: ({chart}) => {
                                        $("#reset-zoom" + id).show();

                                        // Disable hovering and tooltips to make animation smoother
                                        chart.options.hover.mode = null;
                                        chart.options.tooltips.enabled = false;
                                    }, onPanComplete: ({chart}) => {
                                        chart.options.hover.mode = "nearest";
                                        chart.options.tooltips.enabled = true;
                                    }
                                }
                            }
                        }
                    }
                });
                // } else {
                //     $("#chart-container" + id).html("<div style=\"height: 100%; font-size: 3rem; font-weight: bold;text-align: center; filter: opacity(0.5); line-height: 100%\">No Data</div>");
                // }
            }

            function showPage(id) {
                document.getElementById("pageNumber").textContent = id;
                for (let i = -1; i < _data.length; i++) {
                    document.getElementById("link" + i).classList.remove("active");
                }
                document.getElementById("link" + id).classList.add("active");
                for (let i = -1; i < _data.length; i++) {
                    document.getElementById("section" + i).style.display = "none";
                }
                document.getElementById("section" + id).style.display = "block";

                if (id !== -1 && mobile) {
                    $(".backToHome").show();
                } else {
                    $(".backToHome").hide();
                }

                sessionStorage.setItem("currentPage", id);
                currentPage = id;
            }

            document.onkeydown = function (e) {
                if (e.ctrlKey || e.altKey) {
                    // Do nothing
                } else if ($("input").is(":focus") || !shortcutsEnabled) {
                    // Do nothing
                } else if (e.key === "ArrowUp") {
                    // up arrow
                } else if (e.key === "ArrowDown") {
                    // down arrow
                } else if (e.key === "ArrowLeft") {
                    // left arrow
                    if (cardsDisplayed.slice(-1)[0] === "settingsCardDisplay") {
                        if (currentTab === 1) {
                            openTab(maxTab);
                        } else {
                            openTab(currentTab - 1);
                        }
                    } else if (cardsDisplayed.length === 0) {
                        if (currentPage === -1) {
                            showPage(_data.length - 1);
                        } else {
                            showPage(currentPage - 1);
                        }
                    }
                } else if (e.key === "ArrowRight") {
                    // right arrow
                    if (cardsDisplayed.slice(-1)[0] === "settingsCardDisplay") {
                        if (currentTab === maxTab) {
                            openTab(1);
                        } else {
                            openTab(currentTab + 1);
                        }
                    } else if (cardsDisplayed.length === 0) {
                        if (currentPage === _data.length - 1) {
                            showPage(-1);
                        } else {
                            showPage(currentPage + 1);
                        }
                    }
                } else if (e.key === "s") {
                    if (cardsDisplayed.includes("settingsCardDisplay")) {
                        if (cardsDisplayed.indexOf("settingsCardDisplay") !== cardsDisplayed.length - 1) {
                            showCard("#settingsCardDisplay");
                        } else {
                            closeForm("settingsCardDisplay");
                        }
                    } else {
                        showCard("#settingsCardDisplay");
                        openTab(1);
                    }
                } else if (e.key === "w") {
                    if (cardsDisplayed.includes("latestDisplay")) {
                        if (cardsDisplayed.indexOf("latestDisplay") !== cardsDisplayed.length - 1) {
                            showLatest(true);
                        } else {
                            closeForm("latestDisplay");
                        }
                    } else {
                        showLatest(true);
                    }
                } else if (e.key === "q") {
                    if (cardsDisplayed.includes("changelogDisplay")) {
                        if (cardsDisplayed.indexOf("changelogDisplay") !== cardsDisplayed.length - 1) {
                            showChangelog();
                        } else {
                            closeForm("changelogDisplay");
                        }
                    } else {
                        showChangelog();
                    }
                } else if (e.key === "k") {
                    if (cardsDisplayed.includes("shortcutsDisplay")) {
                        if (cardsDisplayed.indexOf("shortcutsDisplay") !== cardsDisplayed.length - 1) {
                            showCard("#shortcutsDisplay");
                        } else {
                            closeForm("shortcutsDisplay");
                        }
                    } else {
                        showCard("#shortcutsDisplay");
                    }
                } else if (e.key === "a") {
                    if (currentPage === -1) {
                        return;
                    }
                    let addAssignment = $($(".addAssignment")[currentPage]);
                    addAssignment.trigger("click");
                    $(addAssignment.parent().parent().find("input")[0]).focus();
                } else if (e.key === "h") {
                    if (cardsDisplayed.includes("settingsCardDisplay")) {
                        if (cardsDisplayed.indexOf("settingsCardDisplay") !== cardsDisplayed.length - 1) {
                            showCard("#settingsCardDisplay");
                        }
                        openTab(3);
                    } else {
                        showCard("#settingsCardDisplay");
                        openTab(3);
                    }
                    <% if (JSON.parse(betaFeatures).active) { %>
                } else if (e.key === "b") {
                    if (cardsDisplayed.includes("settingsCardDisplay")) {
                        if (cardsDisplayed.indexOf("settingsCardDisplay") !== cardsDisplayed.length - 1) {
                            showCard("#settingsCardDisplay");
                        }
                        openTab(5);
                    } else {
                        showCard("#settingsCardDisplay");
                        openTab(5);
                    }
                    <% } %>
                } else if (e.key === "g") {
                    if (cardsDisplayed.includes("gradeChangesCardDisplay")) {
                        if (cardsDisplayed.indexOf("gradeChangesCardDisplay") !== cardsDisplayed.length - 1) {
                            setupGradeChanges();
                        } else {
                            closeForm("gradeChangesCardDisplay");
                        }
                    } else {
                        setupGradeChanges();
                    }
                } else {
                    //console.log(e.code);
                }
            };

            function resetWeights(index) {
                let className = _data[index].class_name;
                $("#check" + index).prop("checked", relClassData[className]["hasWeights"] === "false");
                disableInput("check" + index, "weightsTable" + index);
                let keys = Object.keys(weights[className]["weights"]);
                for (let i = 0; i < keys.length; i++) {
                    if (keys[i] in relClassData[className]["weights"]) {
                        $("#weightTableWeight" + index + i + " input").val(relClassData[className]["weights"][keys[i]]);
                    } else if (tempWeights[className]) {
                        $("#weightTableWeight" + index + i + " input").val(tempWeights[className][keys[i]]);
                    }
                }

                let hasWeights = eval(relClassData[className]["hasWeights"]);
                if (eval(weights[className]["hasWeights"]) !== eval(hasWeights)) {
                    if (!hasWeights) {
                        tempWeights[className] = Object.assign({}, weights[className]["weights"]);
                    }
                }
            }

            //Resets inputs to old weight value when exiting point based
            function resetInputs(form) {
                let hasWeights = !($(form).find("input[name=\"hasWeights\"]")).is(":checked");
                let className = _data[$(form)[0].id.substring(7)].class_name;
                if (eval(weights[className]["hasWeights"]) != eval(hasWeights)) {
                    if (!hasWeights) {
                        tempWeights[className] = Object.assign({}, weights[className]["weights"]);
                    } else if (tempWeights[className]) {
                        for (let i = 0; i < Object.keys(weights[className]["weights"]).length; i++) {
                            let weight = $("#weightTableWeight" + $(form)[0].id.substring(7) + i + " input");
                            weight.val(tempWeights[className][Object.keys(tempWeights[className])[i]]);
                        }
                    }
                }
            }

            $(function initAjaxFormPosts() {
                if ($("form.form-weights").length > 0) {
                    $("form.form-weights").each(function () {
                        let form = $(this);
                        $(form).submit(function (event) {
                            event.preventDefault();
                            event.stopImmediatePropagation();
                            let hasWeights = !($(form).find("input[name=\"hasWeights\"]")).is(":checked");
                            let className = _data[$(form)[0].id.substring(7)].class_name;

                            let weightData = $(form).serializeArray();
                            let weightURI = {};
                            jQuery.map(weightData, function (n, i) {
                                if (n.name !== "hasWeights") {
                                    weightURI[n.name] = isNaN(parseFloat(n.value)) ? null : parseFloat(n.value);
                                }
                            });
                            if (_.isEqual(weights[className]["weights"], weightURI) && ((weights[className]["hasWeights"] === "true") === hasWeights)) {
                                return;
                            }
                            let formData = {
                                "className": className,
                                "hasWeights": hasWeights,
                                "newWeights": JSON.stringify(weightURI)
                            };

                            $.ajax({
                                       type: "POST", url: "/updateWeights", data: formData
                                   }).done((response) => {
                                // Make sure that the formMessages div has the alert-success class.
                                weights[className]["custom"] = response.includes("Custom");
                                for (let i = 0; i < Object.keys(weights[className]["weights"]).length; i++) {
                                    let weight = $("#weightTableWeight" + $(form)[0].id.substring(7) + i + " input");
                                    if (weight[0].value) {
                                        weight.addClass("text-view");
                                        weight.css("border-color", "unset");
                                    } else {
                                        weight.removeClass("text-view");
                                        weight.css("border-color", "lightcoral");
                                    }
                                }
                                if (weightData[0].value === "on") {
                                    weights[className]["hasWeights"] = "false";
                                    setPointBasedWeights();
                                } else {
                                    weights[className]["hasWeights"] = "true";
                                    if (weightData.length === 0) {
                                        return;
                                    }
                                    for (let weight of weightData) {
                                        weights[className]["weights"][weight.name] = parseFloat(weight.value);
                                    }
                                }
                                refreshWithoutReload();
                            });
                        });
                        $(form).find("input").prop("disabled", false);
                    });
                }
            });

            // Get the navbar
            let navbar = document.getElementById("classLinks");
            let sticky, height;

            if ($(".navbar")[0]) {
                // Get the offset position of the navbar
                sticky = navbar.offsetTop - $(".navbar")[0].offsetTop;

                // Get the height of the navbar
                height = navbar.offsetHeight + parseInt(getComputedStyle(navbar).marginBottom);

                function stickyNavbar() {
                    if (window.pageYOffset >= sticky) {
                        $(".container").css("padding-top", height);
                        navbar.classList.add("sticky");
                    } else {
                        navbar.classList.remove("sticky");
                        $(".container").css("padding-top", "unset");
                    }
                }

                let hidingBack;

                function setupBackToHome() {
                    clearTimeout(hidingBack);
                    $(".backToHome").removeClass("showDetails");
                    hidingBack = setTimeout(() => {
                        $(".backToHome").addClass("showDetails");
                    }, 400);
                }

                // Do it once on load
                stickyNavbar();
                setupBackToHome();

                // When the user scrolls the page
                window.onscroll = () => {
                    if (!mobile) {
                        stickyNavbar();
                    } else {
                        setupBackToHome();
                    }
                };
            }

            document.onload = disableMobileGraphFeatures();

            function disableMobileGraphFeatures() {
                //Disable zoom for mobile
                if (mobile) {
                    charts.forEach((chart, index) => {
                        // Reset zoom
                        chart.resetZoom();
                        $("#reset-zoom" + (index - 1)).hide();

                        // Disable zoom and pan
                        chart.options.plugins.zoom.zoom.enabled = false;
                        chart.options.plugins.zoom.pan.enabled = false;

                        // Disable tooltips and hover
                        chart.options.hover.mode = null;
                        chart.options.tooltips.enabled = false;
                    });
                } else {
                    charts.forEach(chart => {
                        // Enabled zoom and pan
                        chart.options.plugins.zoom.zoom.enabled = true;
                        chart.options.plugins.zoom.pan.enabled = true;

                        // Enabled tooltips and hover
                        chart.options.hover.mode = "nearest";
                        chart.options.tooltips.enabled = true;
                    });
                }

            }

            let resizeTimer;
            window.onresize = () => {
                mobile = window.innerWidth <= 991;
                clearTimeout(resizeTimer);
                resizeTimer = setTimeout(() => {
                    disableMobileGraphFeatures();

                    if (navbar && !mobile) {
                        navbar.classList.remove("sticky");
                        disableScrolling();

                        // Get the offset position of the navbar
                        sticky = navbar.offsetTop - $(".navbar")[0].offsetTop;

                        enableScrolling();

                        // Get the height of the navbar
                        height = navbar.offsetHeight + parseInt(getComputedStyle(navbar).marginBottom);

                        // Render all charts if not already rendered
                        if ($(".chartjs-size-monitor").length !== _data.length + 1) {
                            renderAllCharts();
                        }
                    }

                    if (currentPage !== -1 && mobile) {
                        $(".backToHome").show();
                    } else {
                        $(".backToHome").hide();
                    }

                    // Reset changelog
                    if (cardsDisplayed.includes("changelogDisplay")) {
                        showChangelog();
                    }
                }, 1000);
            };

            // Collapse add assignment when click outside
            $(document).mousedown(function (e) {
                if (!$(e.target).parents(".add-assignment-container").length && currentPage >= 0 && $($(".add-assignment-container")[currentPage]).hasClass("active")) {
                    $($(".addAssignment")[currentPage]).trigger("click");
                }
            });

        </script>
<% } %>
<script>
    // This is very important for mobile
    $("*:not(input:not([type=checkbox],[type=radio]),select)").focus(function () {
        $(this).blur();
    });

    function scrollToBottom(div) {
        div.animate({scrollTop: div[0].scrollHeight - div[0].clientHeight}, (div[0].scrollHeight - div[0].clientHeight - div.scrollTop()) / 5);
    }

    let swappingPrivacyButtons;

    $("#privacyScroller").scroll(function () {
        if (swappingPrivacyButtons) {
            clearTimeout(swappingPrivacyButtons);
        }
        swappingPrivacyButtons = setTimeout(() => {
            if (Math.abs(this.scrollTop - this.scrollHeight + this.clientHeight) <= 100) {
                $("#privacy-down").hide();
                $("#accept-privacy").fadeIn();
            } else {
                $("#accept-privacy").hide();
                $("#privacy-down").fadeIn();
            }
        }, 100);
    });

    let swappingTermsButtons;

    $("#termsScroller").scroll(function () {
        if (swappingTermsButtons) {
            clearTimeout(swappingTermsButtons);
        }
        swappingTermsButtons = setTimeout(() => {
            if (Math.abs(this.scrollTop - this.scrollHeight + this.clientHeight) <= 100) {
                $("#terms-down").hide();
                $("#accept-terms").fadeIn();
            } else {
                $("#accept-terms").hide();
                $("#terms-down").fadeIn();
            }
        }, 100);
    });
</script>
</body>
</html>
