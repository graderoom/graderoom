<!doctype html>
<html lang="en-US">
<head>
    <title>Graderoom</title>
    <link rel="icon" href="/public/resources/common/icon.png">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat:500&display=swap">
    <% let theme; %>
    <% let date = new Date(); %>
    <% let zeroTime = new Date("0/" + date.getHours() + ":" + date.getMinutes()); %>
    <% zeroTime = zeroTime.getTime(); %>
    <% if (_appearance.theme === "dark") { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="/public/css/dark_mode.css">
    <% } else if (_appearance.theme === "light") { %>
        <% theme = false; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="/public/css/light_mode.css">
    <% } else if (_appearance.theme === "auto" && (((_appearance.darkModeStart < _appearance.darkModeFinish) && ((zeroTime >= _appearance.darkModeStart) && (zeroTime < _appearance.darkModeFinish))) || ((_appearance.darkModeStart > _appearance.darkModeFinish) && ((zeroTime >= _appearance.darkModeStart) || (zeroTime < _appearance.darkModeFinish))))) { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="/public/css/dark_mode.css">
    <% } else if (_appearance.theme === "system") { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="/public/css/dark_mode.css">
    <% } else if (_appearance.theme === "sun" && ((zeroTime >= sunset.getTime()) || (zeroTime <= sunrise.getTime()))) { %>
        <% theme = true; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="/public/css/dark_mode.css">
    <% } else { %>
        <% theme = false; %>
        <link id="pageStyle" rel="stylesheet" type="text/css" href="/public/css/light_mode.css">
    <% } %>
    <link rel="stylesheet" type="text/css" href="/public/css/main.css">
    <link id="blur_base" rel="stylesheet" type="text/css" href="/public/css/blur.css"
          <% if (!_appearance.blurEffects) { %>disabled
            <% } %>
    >
    <link id="blur_overrides" rel="stylesheet" type="text/css"
    <% if (theme === true) { %>
          href="/public/css/dark_blur.css"
    <% } else if (theme === false) { %> href="/public/css/light_blur.css"
            <% } %>
          <% if (!_appearance.blurEffects) { %>disabled
            <% } %>
    >
    <link id="reduceMotion" rel="stylesheet" type="text/css" href="/public/css/reduce_motion.css"
          <% if (!_appearance.reduceMotion) { %>disabled
            <% } %>
    >
    <link id="fade" rel="stylesheet" type="text/css" href="/public/css/fade.css" disabled>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://cdn.jsdelivr.net/npm/moment@2.24.0/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.5.1/dist/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-zoom/1.1.1/chartjs-plugin-zoom.min.js"
            integrity="sha512-NxlWEbNbTV6acWnTsWRLIiwzOw0IwHQOYUCKBiu/NqZ+5jSy7gjMbpYI+/4KvaNuZ1qolbw+Vnd76pbIUYEG8g=="
            crossorigin="anonymous"
            referrerpolicy="no-referrer"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
</head>
<body>

<% if (page === "charts") { %>
    <%- include('../partials/user/navbar.ejs', {theme: theme, page: page}); %>
<script>
    let alerts = <%- JSON.stringify(_alerts); %>;
    setupTutorialPopups();
    function setupTutorialPopups() {
        $(Object.entries(alerts.tutorialStatus).filter(([, k]) => !k).map(([t]) => "#" + t.substring(0, t.length - 4)).join("Popup, ") + "Popup").addClass("always-show");
    }

    function updateTutorial(action) {
        if (window.innerWidth <= 991) {
            return;
        }
        $.ajax({
                   url: "/UpdateTutorialStatus", type: "POST", async: true, data: {action: action}
               }).done((response) => {
            if (typeof response === "string" && response.startsWith("<!")) {  // If logged out
                $(".session-timeout").show();
                $("body").find("*").not(".session-timeout").remove();
                return;
            }
            alerts.tutorialStatus = JSON.parse(response);
            $("#" + action + "Popup").animate({opacity: 0}, 400, function () {
                $(this).removeClass("always-show").css("opacity", "");
            });
            setupTutorialPopups();
        });
    }

    $(".gotIt").on("click", function (e) {
        e.preventDefault();
        e.stopPropagation();
        let id = $(this).parents("span.tutorial-popup")[0].id;
        updateTutorial(id.substring(0, id.length - 5));
    });
</script>
<% } else { %>
    <%- include('../partials/viewer/viewer_navbar.ejs', {theme: theme, page: page}); %>
<% } %>
<div class="container">
    <br>
    <div class="chart-container chart" style="height: unset; width: unset; display: block">
        <h1>
            Usage
        </h1>
        <h6 id="user-desc"></h6>
        <h6 id="curr-logins"></h6>
        <div class="chart-tab tab" style="border-radius: 0.5rem">
            <btn id="btn-0" class="tablinks" onclick="setBounds(0, chart)">5D</btn>
            <btn id="btn-1" class="tablinks" onclick="setBounds(1, chart)">1M</btn>
            <btn id="btn-2" class="tablinks active" onclick="setBounds(2, chart)">6M</btn>
            <btn id="btn-3" class="tablinks" onclick="setBounds(3, chart)">YTD</btn>
            <btn id="btn-4" class="tablinks" onclick="setBounds(4, chart)">1Y</btn>
            <btn id="btn-4" class="tablinks" onclick="setBounds(5, chart)">2Y</btn>
            <btn id="btn-4" class="tablinks" onclick="setBounds(6, chart)">MAX</btn>
        </div>
        <button id="reset-zoom-1" style="display:none; position: absolute; right: 0"
                class="btn btn-sm" onclick="resetZoom(chart); $(this).hide()">Reset
        </button>
        <canvas id="chart">
        </canvas>
    </div>
    <br>
    <div class="chart-container chart" style="height: unset; width: unset; display: block">
        <h1>
            Users by graduation year
        </h1>
        <h3>Users are graduated in June of each year</h3>
        <div class="chart-tab tab" style="border-radius: 0.5rem">
            <btn id="btn-0" class="tablinks" onclick="setBounds(0, gradYearChart)">5D</btn>
            <btn id="btn-1" class="tablinks" onclick="setBounds(1, gradYearChart)">1M</btn>
            <btn id="btn-2" class="tablinks" onclick="setBounds(2, gradYearChart)">6M</btn>
            <btn id="btn-3" class="tablinks" onclick="setBounds(3, gradYearChart)">YTD</btn>
            <btn id="btn-4" class="tablinks" onclick="setBounds(4, gradYearChart)">1Y</btn>
            <btn id="btn-4" class="tablinks active" onclick="setBounds(5, gradYearChart)">2Y</btn>
            <btn id="btn-4" class="tablinks" onclick="setBounds(6, gradYearChart)">MAX</btn>
        </div>
        <button id="reset-zoom0" style="display:none; position: absolute; right: 0"
                class="btn btn-sm" onclick="resetZoom(gradYearChart); $(this).hide()">Reset
        </button>
        <canvas id="users">
        </canvas>
    </div>
    <br>
    <br>
    <div style="display: flex; justify-content: space-between; flex-wrap: wrap; padding-bottom: 20px">
        <div class="chart-container chart" style="display: block; width: max(400px, calc(50% - 1rem))">
            <h4>
                Usage by day of the week
            </h4>
            <h6 id="weekday-desc"></h6>
            <canvas id="chart-weekdays">
            </canvas>
        </div>
        <div class="chart-container chart" style="display: block; width: max(400px, calc(50% - 1rem))">
            <h4>Users breakdown by school</h4>
            <canvas id="schools"></canvas>
        </div>
    </div>
</div>

<script>
    let colors = ["rgba(255, 99, 132, 0.2)", "rgba(255, 159, 64, 0.2)", "rgba(255, 205, 86, 0.2)", "rgba(75, 192, 192, 0.2)", "rgba(54, 162, 235, 0.2)", "rgba(153, 102, 255, 0.2)", "rgba(201, 203, 207, 0.2)"];
    let schoolColors = {
        "bellarmine": "rgba(54, 162, 235, 0.2)",
        "basis": "rgba(255, 99, 132, 0.2)",
        "ndsj": "rgba(153, 102, 255, 0.2)",
    };
    let borders = ["rgb(255, 99, 132)", "rgb(255, 159, 64)", "rgb(255, 205, 86)", "rgb(75, 192, 192)", "rgb(54, 162, 235)", "rgb(153, 102, 255)", "rgb(201, 203, 207)"];
    let schoolBorders = {
        "bellarmine": "rgb(54, 162, 235)",
        "basis": "rgb(255, 99, 132)",
        "ndsj": "rgb(153, 102, 255)",
    };

    let checkingTheme;
    let theme = appearance.theme;
    let darkModeStart = appearance.darkModeStart ?? null;
    let darkModeFinish = appearance.darkModeFinish ?? null;
    let sunrise = <%= sunrise.getTime(); %>;
    let sunset = <%= sunset.getTime(); %>;
    let SchoolAbbr = <%- JSON.stringify(_SchoolAbbr); %>;
    let PrettySchools = <%- JSON.stringify(_PrettySchools); %>;

    if (theme === "auto" || theme === "sun") {
        checkTime();
    }

    function setAutoTheme() {
        let date = new Date();
        let zeroTime = new Date("0/" + date.getHours() + ":" + date.getMinutes());
        if (theme !== "auto" && theme !== "sun" && theme !== "system") {
            if (checkingTheme) {
                clearInterval(checkingTheme);
            }
            return;
        }

        if ((theme === "system" && window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches) || (theme === "sun" && (zeroTime >= sunset || zeroTime <= sunrise)) || (theme === "auto" && (((darkModeStart < darkModeFinish) && ((zeroTime >= darkModeStart) && (zeroTime < darkModeFinish)) || ((darkModeStart > darkModeFinish) && ((zeroTime >= darkModeStart) || (zeroTime < darkModeFinish))))))) {
            let oldDarkMode = document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css";
            darkMode = true;
            if (darkMode !== oldDarkMode) {
                document.getElementById("fade").disabled = false;
                document.getElementById("pageStyle").setAttribute("href", "/public/css/dark_mode.css");
                if (appearance.blurEffects) {
                    document.getElementById("blur_overrides").setAttribute("href", "/public/css/dark_blur.css");
                }
                $(".navbar-brand img").attr("src", "/public/resources/dark_mode/logo.png");
                $(".navbar").removeClass("navbar-light").addClass("navbar-dark");
                setTimeout(() => {
                    document.getElementById("fade").disabled = true;
                }, 500);
                if (appearance.seasonalEffects) {
                    init = performance.now();
                    if (darkMode === false) {
                        $("#light_snowfall").attr("media", "");
                    } else if (darkMode) {
                        $("#light_snowfall").attr("media", "not all");
                    }
                }
                setupAllCharts();
            }
        } else {
            let oldDarkMode = document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css";
            darkMode = false;
            if (darkMode !== oldDarkMode) {
                document.getElementById("fade").disabled = false;
                document.getElementById("pageStyle").setAttribute("href", "/public/css/light_mode.css");
                if (appearance.blurEffects) {
                    document.getElementById("blur_overrides").setAttribute("href", "/public/css/light_blur.css");
                }
                $(".navbar-brand img").attr("src", "/public/resources/light_mode/logo.png");
                $(".navbar").removeClass("navbar-dark").addClass("navbar-light");
                setTimeout(() => {
                    document.getElementById("fade").disabled = true;
                }, 500);
                if (appearance.seasonalEffects) {
                    init = performance.now();
                    if (darkMode === false) {
                        $("#light_snowfall").attr("media", "");
                    } else if (darkMode) {
                        $("#light_snowfall").attr("media", "not all");
                    }
                }
                setupAllCharts();
            }
        }
    }

    async function checkTime() {
        if (checkingTheme) {
            clearInterval(checkingTheme);
        }
        setAutoTheme();
        checkingTheme = window.setInterval(function () {
            setAutoTheme();
        }, 100);
    }

    let loginData = <%- JSON.stringify(_loginData); %>;
    let uniqueLoginData = <%- JSON.stringify(_uniqueLoginData); %>;
    let syncData = <%- JSON.stringify(_syncData); %>;
    let userData = <%- JSON.stringify(_userData); %>;

    let weekdayLoginData = Array(7).fill(0);
    let weekdayUniqueLoginData = Array(7).fill(0);
    let weekdaySyncData = Array(7).fill(0);

    let schoolData = <%- JSON.stringify(_schoolData); %>;

    // Fill in holes in loginData
    let minDate = Math.min(new Date(loginData[0].x).getTime(), new Date(syncData[0].x).getTime());
    let maxDate = Math.max(new Date(loginData.slice(-1)[0].x).getTime(), new Date(syncData.slice(-1)[0].x).getTime());
    fillHoles(loginData);
    fillHoles(uniqueLoginData);
    fillHoles(syncData);
    fillHoles(userData, true);

    // calculate weekday stats
    for (let i = 0; i < loginData.length; i++) {
        weekdayLoginData[new Date(loginData[i].x).getDay()] += loginData[i].y;
    }
    for (let i = 0; i < uniqueLoginData.length; i++) {
        weekdayUniqueLoginData[new Date(uniqueLoginData[i].x).getDay()] += uniqueLoginData[i].y;
    }
    for (let i = 0; i < syncData.length; i++) {
        weekdaySyncData[new Date(syncData[i].x).getDay()] += syncData[i].y;
    }

    let updated = new Date(<%= lastUpdated - 24 * 60 * 60 * 1000 %>);
    let count = <%- JSON.stringify(_loggedInData.data.value) %>;
    $("#user-desc").text(`${Object.values(userData.slice(-1)[0].y).reduce((a, b) => a + b, 0)} total real user(s) as of ${updated.toDateString()}.`);
    $("#curr-logins").text(`${count.count} active session(s). ${count.uniqueCount} currently active user(s).`);
    $("#weekday-desc").text(`${weekdayLoginData.reduce((a, b) => a + b, 0)} logins, ${weekdaySyncData.reduce((a, b) => a + b, 0)} syncs all time`)

    let chart;
    let weekdayLoginChart;
    let gradYearChart;
    let schoolChart;

    function fillHoles(data, fillWithPreviousValue=false) {
        if (new Date(data[0].x).getTime() !== minDate) {
            data.unshift({x: new Date(minDate).toISOString(), y: 0});
        }
        if (new Date(data[data.length - 1].x).getTime() !== maxDate) {
            data.push({x: new Date(maxDate).toISOString(), y: fillWithPreviousValue ? data[data.length - 1].y : 0});
        }
        for (let i = 1; i < data.length; i++) {
            let prevDate = new Date(data[i - 1].x);
            let currDate = new Date(data[i].x);

            let diffInDays = Math.round((currDate.getTime() - prevDate.getTime()) / (24 * 60 * 60 * 1000));

            for (let j = 1; j < diffInDays; j++) {
                data.splice(i + j - 1, 0, {
                    x: new Date(prevDate.getTime() + j * 24 * 60 * 60 * 1000).toISOString(), y: fillWithPreviousValue ? data[i - 1].y : 0
                });
            }

            i += Math.max(diffInDays - 1, 0);
        }
    }

    function resetZoom(_chart) {
        _chart.resetZoom();
    }

    let dataset = [];
    let loginsDataset = {
        label: "Logins",
        backgroundColor: "transparent",
        pointBackgroundColor: "green",
        pointBorderColor: "transparent",
        borderColor: "green",
        data: loginData,
        cubicInterpolationMode: "monotone",
        spanGaps: false,
        pointRadius: 1,
        borderWidth: 1,
        pointHoverRadius: 3,
        pointHoverBackgroundColor: "green",
        pointHoverBorderColor: "green",
        pointHoverBorderWidth: 2
    };
    let uniqueLoginDataset = {
        label: "Unique Logins",
        backgroundColor: "transparent",
        pointBackgroundColor: "red",
        pointBorderColor: "transparent",
        borderColor: "red",
        data: uniqueLoginData,
        cubicInterpolationMode: "monotone",
        spanGaps: false,
        pointRadius: 1,
        borderWidth: 1,
        pointHoverRadius: 3,
        pointHoverBackgroundColor: "red",
        pointHoverBorderColor: "red",
        pointHoverBorderWidth: 2
    };
    let syncsDataset = {
        label: "Syncs",
        backgroundColor: "transparent",
        pointBackgroundColor: "orange",
        pointBorderColor: "transparent",
        borderColor: "orange",
        data: syncData,
        cubicInterpolationMode: "monotone",
        spanGaps: false,
        pointRadius: 1,
        borderWidth: 1,
        pointHoverRadius: 3,
        pointHoverBackgroundColor: "orange",
        pointHoverBorderColor: "orange",
        pointHoverBorderWidth: 2
    };
    dataset.push(loginsDataset);
    dataset.push(uniqueLoginDataset);
    dataset.push(syncsDataset);

    function setupAllCharts() {
        setupChart();
        setupWeekdayChart();
        setupGradYearChart();
        setupSchoolChart();
    }

    setupChart();
    function setupChart() {
        let ctx = document.getElementById("chart");
        if (chart) {
            chart.destroy();
        }
        let now = Date.now();
        const dayLength = 24 * 60 * 60 * 1000;
        now = (now - (now % dayLength));
        chart = new Chart(ctx, {
            type: "line", data: {
                datasets: dataset
            }, options: {
                hover: {
                    mode: "index", intersect: false
                }, scales: {
                    xAxis: {
                        type: "time", time: {
                            unit: "month"
                        }, ticks: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "white" : "black"),
                            fontFamily: "Verdana",
                            fontSize: "13"
                        }, grid: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "#555555" : "#CCCCCC")
                        },
                        max: now,
                        min: now - 183 * dayLength,
                    }, yAxis: {
                        ticks: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "white" : "black"),
                            fontFamily: "Verdana",
                            fontSize: "12"
                        }, grid: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "#555555" : "#CCCCCC"),
                            drawBorder: false
                        }
                    }
                }, animation: {
                    easing: "easeOutCubic",
                    duration: 250,
                }, responsive: true, maintainAspectRatio: true, plugins: {
                    legend: {
                        display: true, position: "top", labels: {
                            usePointStyle: true,
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "white" : "black"),
                            fontFamily: "Verdana",
                            boxWidth: 20,
                            fontSize: 13,
                            filter: function (item) {
                                return !item.text.includes("undefined");
                            }
                        }
                    }, tooltip: {
                        enabled: true, mode: "index", intersect: false, position: "nearest", displayColors: true, caretSize: 10, callbacks: {
                            title: function (tooltipItems) {
                                return new Date(tooltipItems[0].label).toDateString();
                            }
                        }
                    }, zoom: {
                        zoom: {
                            wheel: {
                                enabled: true, speed: 0.05
                            }, pinch: {
                                enabled: true, threshold: 100
                            }, mode: "xy", onZoom: ({chart}) => {
                                $("#reset-zoom-1").show();

                                // Disable hovering to make animation smoother
                                chart.options.hover.mode = null;
                            }, onZoomComplete: ({chart}) => {
                                chart.options.hover.mode = "index";
                            }
                        },
                        pan: {
                            enabled: true,
                            onPan: ({chart}) => {
                                $("#reset-zoom-1").show();

                                // Disable hovering to make animation smoother
                                chart.options.hover.mode = null;
                            }, onPanComplete: ({chart}) => {
                                chart.options.hover.mode = "index";
                            }
                        }
                    }
                }
            }
        });
    }

    setupGradYearChart();
    function setupGradYearChart() {
        let ctx = document.getElementById("users");
        if (gradYearChart) {
            gradYearChart.destroy();
        }
        let now = Date.now();
        const dayLength = 24 * 60 * 60 * 1000;
        now = (now - (now % dayLength));
        let gradData = (["Freshman", "Sophomore", "Junior", "Senior", "Graduate", "Other", "Unknown"]).map((g, i) => {
            return {
                label: g,
                pointBackgroundColor: borders[i],
                pointBorderColor: "transparent",
                spanGaps: false,
                pointRadius: 1,
                pointHoverRadius: 0,
                pointHoverBackgroundColor: borders[i],
                pointHoverBorderColor: borders[i],
                pointHoverBorderWidth: 0,
                backgroundColor: borders[i],
                borderColor: borders[i],
                borderWidth: 1,
                hidden: i > 3,
                data: userData.map(u => {
                    return {
                        x: u.x,
                        y: u.y[g]
                    }
                }),
                fill: true,
            };
        });
        gradYearChart = new Chart(ctx, {
            type: "line", data: {
                datasets: gradData
            }, options: {
                hover: {
                    mode: "index", intersect: false
                }, scales: {
                    xAxis: {
                        type: "time", time: {
                            unit: "month"
                        }, ticks: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "white" : "black"),
                            fontFamily: "Verdana",
                            fontSize: "13"
                        }, grid: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "#555555" : "#CCCCCC")
                        },
                        max: now,
                        min: now - 732 * dayLength,
                    }, yAxis: {
                        stacked: true,
                        ticks: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "white" : "black"),
                            fontFamily: "Verdana",
                            fontSize: "12"
                        }, grid: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "#555555" : "#CCCCCC"),
                            drawBorder: false
                        }
                    }
                }, animation: {
                    easing: "easeOutCubic",
                    duration: 250,
                }, responsive: true, maintainAspectRatio: true, plugins: {
                    legend: {
                        display: true, position: "top", labels: {
                            usePointStyle: true,
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "white" : "black"),
                            fontFamily: "Verdana",
                            boxWidth: 20,
                            fontSize: 13,
                            filter: function (item) {
                                return !item.text.includes("undefined");
                            }
                        }
                    }, tooltip: {
                        enabled: true, mode: "index", intersect: false, position: "nearest", displayColors: true, caretSize: 10, callbacks: {
                            title: function (tooltipItems) {
                                return new Date(tooltipItems[0].label).toDateString();
                            },
                            footer: function (tooltipItems) {
                                return `${tooltipItems.reduce((a, b) => a + b.parsed.y, 0)} total users`;
                            },
                            label: function (tooltipItem) {
                                if (!tooltipItem.parsed.y) return null;
                                return `${tooltipItem.dataset.label}: ${tooltipItem.parsed.y}`;
                            }
                        }
                    }, zoom: {
                        zoom: {
                            wheel: {
                                enabled: true, speed: 0.05
                            }, pinch: {
                                enabled: true, threshold: 100
                            }, mode: "xy", onZoom: ({chart}) => {
                                $("#reset-zoom0").show();

                                // Disable hovering to make animation smoother
                                chart.options.hover.mode = null;
                            }, onZoomComplete: ({chart}) => {
                                chart.options.hover.mode = "index";
                            }
                        },
                        pan: {
                            enabled: true,
                            onPan: ({chart}) => {
                                $("#reset-zoom0").show();

                                // Disable hovering to make animation smoother
                                chart.options.hover.mode = null;
                            }, onPanComplete: ({chart}) => {
                                chart.options.hover.mode = "index";
                            }
                        }
                    }
                }
            }
        });
    }

    function setBounds(index, _chart) {
        // 0 is 5 days
        // 1 is 1 month
        // 2 is 6 months
        // 3 is year to date
        // 4 is 1 year
        // 5 is 2 years
        // 6 is max

        // First activate the right buttons
        let numBtns = 7;
        let btns = $(".chart-container .tablinks").slice(_chart === chart ? 0 : numBtns, _chart === chart ? numBtns : 2 * numBtns);
        btns.removeClass("active");
        $(btns[index]).addClass("active");

        // Then, update the chart
        resetZoom(_chart);

        let now = Date.now();
        const dayLength = 24 * 60 * 60 * 1000;
        now = (now - (now % dayLength)); // Get full day

        let min, max, unit;

        switch (index) {
            case 0:
                min = now - 5 * dayLength;
                unit = "day";
                break;
            case 1:
                min = now - 30 * dayLength;
                unit = "week";
                break;
            case 2:
                min = now - 183 * dayLength;
                unit = "month";
                break;
            case 3:
                min = new Date(`1/1/${new Date().getFullYear()}`).getTime();
                max = new Date(`1/1/${new Date().getFullYear() + 1}`).getTime();
                unit = "month";
                break;
            case 4:
                min = now - 366 * dayLength;
                unit = "month";
                break;
            case 5:
                min = now - 732 * dayLength;
                unit = "month";
                break;
            case 6:
                unit = "year";
                break;
        }
        _chart.options.scales.xAxis.min = min;
        _chart.options.scales.xAxis.max = max;
        _chart.options.scales.xAxis.time.unit = unit;
        _chart.options.hover.mode = "index";
        _chart.update(0);

        // Also hide the reset button
        if (_chart === chart) {
            $("#reset-zoom-1").hide();
        } else if (_chart === gradYearChart) {
            $("#reset-zoom0").hide();
        }
    }

    setupWeekdayChart();
    function setupWeekdayChart() {
        let ctx = document.getElementById("chart-weekdays");
        if (weekdayLoginChart) {
            weekdayLoginChart.destroy();
        }
        weekdayLoginChart = new Chart(ctx, {
            type: "bar", data: {
                labels: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], datasets: [{
                    label: "Unique Logins",
                    backgroundColor: colors[0],
                    borderColor: borders[0],
                    borderWidth: 1,
                    data: weekdayUniqueLoginData
                }, {
                    label: "Logins",
                    backgroundColor: colors[3],
                    borderColor: borders[3],
                    borderWidth: 1,
                    data: weekdayLoginData
                }, {
                    label: "Syncs",
                    backgroundColor: colors[2],
                    borderColor: borders[2],
                    borderWidth: 1,
                    data: weekdaySyncData
                }]
            }, options: {
                scales: {
                    y: {
                        beginAtZero: true, ticks: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "white" : "black"),
                            fontFamily: "Verdana",
                            fontSize: "13"
                        }, grid: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "#555555" : "#CCCCCC")
                        }
                    }, x: {
                        ticks: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "white" : "black"),
                            fontFamily: "Verdana",
                            fontSize: "12"
                        }, grid: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "#555555" : "#CCCCCC")
                        }
                    }
                }, plugins: {
                    legend: {
                        display: true, position: "top", labels: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "white" : "black"),
                            fontFamily: "Verdana",
                            boxWidth: 20,
                            fontSize: 13,
                            filter: function (item) {
                                return !item.text.includes("undefined");
                            }
                        }
                    }
                }
            }
        });
    }

    setupSchoolChart();
    function setupSchoolChart() {
        let ctx = document.getElementById("schools");
        let realSchoolData = schoolData.map((s, i) => {
            return {
                label: SchoolAbbr[s.x],
                backgroundColor: schoolColors[s.x],
                borderColor: schoolBorders[s.x],
                borderWidth: 1,
                data: [s.y],
                stack: "schools"
            };
        });
        schoolChart = new Chart(ctx, {
            type: "bar", data: {
                labels: [""], datasets: realSchoolData
            }, options: {
                indexAxis: "y", scales: {
                    y: {
                        beginAtZero: true, ticks: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "white" : "black"),
                            fontFamily: "Verdana",
                            fontSize: "13"
                        }, grid: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "#555555" : "#CCCCCC")
                        }
                    }, x: {
                        ticks: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "white" : "black"),
                            fontFamily: "Verdana",
                            fontSize: "12"
                        }, grid: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "#555555" : "#CCCCCC")
                        }
                    }
                }, plugins: {
                    legend: {
                        display: true, position: "left", labels: {
                            color: (document.getElementById("pageStyle").getAttribute("href") === "/public/css/dark_mode.css" ? "white" : "black"),
                            fontFamily: "Verdana",
                            boxWidth: 20,
                            fontSize: 13,
                            filter: function (item) {
                                return !item.text.includes("undefined");
                            },
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                return `${PrettySchools[tooltipItem.dataset.label]}: ${tooltipItem.parsed.x}`;
                            }
                        }
                    }
                }
            }
        });
    }
</script>
</body>
