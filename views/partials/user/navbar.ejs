<!-- Nav Bar -->
<nav class="navbar navbar-dark navbar-expand-lg justify-content-center">
    <span class="d-flex w-50 mr-auto">
        <a href="/" class="navbar-brand">
            <h1> <img src="/public/resources/dark_mode/logo.png" style="width: 3rem" class="d-inline-block logo" alt=""> Graderoom </h1>
        </a>
    </span>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#collapsingNav"
            aria-controls="collapsingNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="navbar-collapse collapse w-100" id="collapsingNav">
        <% if (user.username.length > 0) { %>
            <ul class="navbar-nav w-100 justify-content-center">
                <li class="nav-item">
                    <h5><%= user.username %></h5>
                </li>
            </ul>
        <% } %>
        <ul class="navbar-nav w-100 justify-content-end align-items-end ml-auto">
            <% if (user.isAdmin) { %>
                <li id="toggleAdmin" class="nav-item toggle-admin">
                    <a class="btn btn-med" href="/admin"> <i class="fa fa-fighter-jet" aria-hidden="true"></i> Admin
                    </a>
                </li>
            <% } %>
            <% if (current == 'home') { %>
                <li id="finalGradeCalculator" class="nav-item">
                    <a class="btn btn-med" href="/finalgradecalculator"> <i class="fa fa-calculator"
                                                                            aria-hidden="true"></i> Calculator </a>
                </li>
            <% } else { %>
                <li id="home" class="nav-item">
                    <a class="btn btn-med" href="/"> <i class="fa fa-home" aria-hidden="true"></i> Home </a>
                </li>
            <% } %>
            <li id="editWeights" class="nav-item">
                <btn class="btn btn-med" onclick="showUpdateWeights(document.getElementById('pageNumber').textContent)">
                    <i class="fa fa-pencil" aria-hidden="true"></i> Weights
                </btn>
            </li>
            <li id="syncGrades" class="nav-item">
                <btn class="btn btn-med" onclick="$('#updateGradesDisplay').show(); $('#inputPassword').focus()">
                    <i class="fa fa-refresh" aria-hidden="true"></i> Sync
                </btn>
            </li>
            <li id="settings" class="nav-item">
                <btn class="btn btn-med" onclick="$('#settingsCardDisplay').show()">
                    <i class="fa fa-cog" aria-hidden="true"></i> Settings
                </btn>
            </li>
            <li class="nav-item active">
                <a href="/logout" class="btn btn-med"> <i class="fa fa-sign-out" aria-hidden="true"></i> Logout </a>
            </li>
        </ul>
    </div>
</nav>

<!-- Cards -->
<% include settings_card.ejs %> <% include sync_grades_card.ejs %>

<!-- Custom JavaScript -->
<script>
    function ajaxPostForm(formID, fieldIDsToClear, messagesDivID, async) {
        // Get the form.
        let form = $(formID);
        $(form).submit(function (event) {
            event.preventDefault();
            event.stopImmediatePropagation();

            let formData;
            let message;
            let formMessagesDiv;

            if (formID === '#syncGradesForm' || formID === '#gradeSyncForm') {
                $('#loadingDisplay').show();
                $('#loadingUnfocus').focus();
            }

            // Different behavior for class colors
            if (formID === '#randomizeClassColors') {
                let data = getLockedColorIndices();
                let dataArr = [];
                for (let i = 0; i < data.length; i++) {
                    dataArr.push(`${data[i]}`);
                }
                formData = 'lockedColorIndices=' + JSON.stringify(dataArr);
            } else {

                // Serialize the form data.
                formData = $(form).serialize();

                // Get the messages.
                formMessagesDiv = $(messagesDivID);
                message = $(formMessagesDiv).find('.messageTxt');
            }

            // Submit the form using AJAX.
            $.ajax({
                       type: 'POST', url: $(form).attr('action'), data: formData, async: async,
                   }).done(function (response) {
                // Special behavior for class colors.
                if (formID === '#randomizeClassColors') {
                    // numClasses is contained in messagesDivID
                    // colors come from response
                    updateClassColors(messagesDivID, response);
                } else {

                    // Make sure that the formMessages div has the alert-success class.
                    $(formMessagesDiv).removeClass('alert-danger');
                    $(formMessagesDiv).addClass('alert-success');

                    // Set the message text.
                    $(message).text(response);

                    // Show the div.
                    $(formMessagesDiv).css('display', 'block');

                    // Clear fields to clear
                    for (let i = 0; i < fieldIDsToClear.length; i++) {
                        $(fieldIDsToClear[i]).val('');
                    }

                    // Show correct sync div
                    console.log(response);
                    if (response === "GradeSync Enabled. Updated grades!") {
                        $('#syncGradesDiv').hide();
                        $('#gradeSyncDiv').show();
                    }
                }
            }).fail(function (data) {
                // Make sure that the formMessages div has the alert-danger class
                $(formMessagesDiv).removeClass('alert-success');
                $(formMessagesDiv).addClass('alert-danger');

                // Set the message text.
                if (data.responseText !== '') {
                    $(message).text(data.responseText);
                } else {
                    $(message).text('Oops! An error occurred and your message could not be sent.');
                }

                // Show the div.
                $(formMessagesDiv).css('display', 'block');

                if (formID === '#syncGradesForm' || formID === '#gradeSyncForm') {
                    $('#inputPassword').focus();
                }

            }).always(function () {
                if (formID === '#syncGradesForm' || formID === '#gradeSyncForm') {
                    $('#loadingDisplay').hide();
                }
            });
        });
    }

    function closeForm(id) {
        let form = document.getElementById(id);
        form.style.display = "none";
        if (id !== 'updateWeightsDisplay' && id !== 'updateGradesDisplay') {
            let inputFields = form.getElementsByClassName('form-control');
            for (let i = 0; i < inputFields.length; i++) {
                inputFields[i].value = "";
            }
        } else {
            window.location.reload(true);
        }

        // Manage darkMode checkbox, if it exists
        try {
            let darkModeCheckbox = document.getElementById('darkModeToggle');
            if (user.appearance.darkMode && !darkModeCheckbox.checked) {
                darkModeCheckbox.checked = true;
            } else if (!user.appearance.darkMode && darkModeCheckbox.checked) {
                darkModeCheckbox.checked = false;
            }
        } catch {
        }

        // Manage gradeSync checkbox, if it exists
        try {
            let gradeSync = document.getElementById('gradeSyncToggle');
            if (user.schoolPassword && !gradeSync.checked) {
                gradeSync.checked = true;
            } else if (!uesr.schoolPassword && gradeSync.checked) {
                gradeSync.checked = false;
            }
        } catch {
        }

        // Manage autoRefresh checkbox, if it exists
        try {
            let autoRefresh = document.getElementById('autoRefreshToggle');
            if (user.autoRefresh && !autoRefresh.checked) {
                autoRefresh.checked = true;
            } else if (!user.autoRefresh && autoRefresh.checked) {
                autoRefresh.checked = false;
            }
        } catch {
        }
    }

    // Collapse navbar or card when click outside
    $(document).click(function (e) {
        //Auto hide for any card with blurred-login
        if ($(e.target).closest('.blurred-login').length) {
            if (!$(e.target).closest('.card').length) {
                closeForm($(e.target).closest('.blurred-login')[0].id);
            }
        }
        if (!$(e.target).closest('#collapsingNav').length && !$(e.target).is('#collapsingNav')) {
            $('.navbar-collapse').collapse('hide');
        }
    });
    // Collapse navbar or card when press escape
    $(document).keyup(function (e) {
        if (e.key === "Escape") { // escape key maps to keycode `27`
            try {
                $('.navbar-collapse').collapse('hide');
                closeForm('toggle');
            } catch (e) {
            }
            closeForm('updateGradesDisplay');
            closeForm('settingsCardDisplay');
            closeForm('updateWeightsDisplay');
        }
    });
</script>
