<!-- Changelog Card -->
<div class="blurred-login" id="changelogDisplay"
     style="position:fixed; display:none; height: 100%; width: 100%; top: 0; left: 0; z-index: 1">
    <div class="blurred-background"></div>
    <div class="col-sm-11 col-md-10 col-lg-9 col-xl-8 mx-auto">
        <div id="changelogCard" class="card card-signin my-5">
            <btn class="btn btn-md"
                 onclick="closeForm('changelogDisplay')"
                 style="width: fit-content; width: -moz-fit-content; margin-bottom:0">
                <i class="fa fa-close" aria-hidden="true"></i> Close
            </btn>
            <div class="card-body">
                <h1 class="card-title text-center changelog-title">
                    <span class="fa fa-book"></span>Changelog
                </h1>
                <div class="changelog-legend changelog-container">
                    <h6>Legend</h6>
                    <span>
                        <div class="square stable"></div>
                        <span>Stable</span></span>
                    <span>
                        <div class="square current"></div>
                        <span>Current</span></span>
                    <span>
                        <div class="square announcement"></div>
                        <span>Announcement</span></span>
                    <span>
                        <div class="square known-issues"></div>
                        <span>Known Issues</span></span>
                </div>
                <div class="card changelog">
                    <div style="display: none" id="version-up" class="scroll-to up"
                         onclick="scrollToVersion('Known Issues');"><span
                                class="fa fa-arrow-up"><label
                                    style="font-family: 'JetBrains Mono',monospace; font-size: 0.75rem; cursor: pointer; margin-left: 0.5rem">Back
                                to Top</label></span>
                    </div>
                    <div id="changelog-container" class="changelog-container"></div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>

    let changelogContainer = $("#changelog-container");
    let versionOffsets = {};
    let versionNames = [];
    let stableVersionNames = [];
    let versionDisplayed;
    let nextVersion;
    let previousVersion;
    let changelogArray;
    let changelogReferences;
    let numDisplayed = 4;

    function showChangelog() {
        closeForm("changelogDisplay");
        $.ajax({
                   url: "/changelog", type: "GET", async: true
               }).done(function (response) {
            $("#changelogDisplay").fadeIn(500);
            cardsDisplayed.push("changelogDisplay");
            $(".blurred-background").each(function () {
                if (cardsDisplayed.includes($($(this).parent())[0].id)) {
                    $(this).parent().css("z-index", cardsDisplayed.indexOf($($(this).parent())[0].id) + minCardZIndex);
                }
            });
            changelogArray = response;
            changelogReferences = changelogArray.map(x => $(x));
            changelogContainer.html(changelogReferences);
            let versions = $("#changelogDisplay .changelog-item").not(".announcement");
            let currentVersion = getOnScreenVersion();
            changelogContainer.animate({scrollTop: 0}, 0, () => {
                versionNames = [];
                versionOffsets = {};
                for (let version of versions) {
                    let title = $(version).find(".header")[0].innerText;
                    versionNames.push(title.substring(0, title.indexOf("\n")));
                    versionOffsets[versionNames.slice(-1)[0]] = $(version).offset().top - changelogContainer.offset().top;
                }
                changelogReferences.forEach((x, index) => x.css('display', index >= numDisplayed ? "none" : ""));
                scrollToVersion(currentVersion, 0);
                stableVersionNames = versionNames.filter(n => n.substring(0, 6) === "Stable" || n === "Known Issues");
                manageScrollers();
            });
            let fixedIn = versions.find(".content").children(".body").children("strong");
            for (let i = 0; i < fixedIn.length; i++) {
                let link = $(fixedIn[i]);
                link.click(() => {
                    scrollToVersion(link[0].innerText.substring(10, link[0].innerText.length - 1));
                });
            }
        });
    }

    function scrollToNextVersion() {
        scrollToVersion(nextVersion);
    }

    function scrollToPreviousVersion() {
        scrollToVersion(previousVersion);
    }

    let scrolling = false;

    function scrollToVersion(version, scrollTime = 1000) {
        if (scrolling) {
            changelogContainer.stop();
        }
        scrolling = true;
        changelogContainer.animate({scrollTop: versionOffsets[version]}, scrollTime, () => {
            scrolling = false;
        });
    }

    function getOnScreenVersion() {
        let versions = $("#changelogDisplay .changelog-item").not(".announcement");
        let onScreenVersion;
        let onScreenOffset;
        for (let i = 0; i < versions.length; i++) {
            if (onScreenOffset === undefined || Math.abs($(versions[i]).offset().top - changelogContainer.offset().top) < onScreenOffset) {
                onScreenOffset = Math.abs($(versions[i]).offset().top - changelogContainer.offset().top);
                onScreenVersion = i;
            }
        }
        return versionNames[onScreenVersion];
    }

    function manageScrollers() {
        if (versionNames.indexOf(getOnScreenVersion()) > 0) {
            $(".up").fadeIn(100);
        } else {
            $(".up").fadeOut(100);
        }
    }

    let hidingLegend;

    function setupChangelogLegend() {
        clearTimeout(hidingLegend);
        $(".changelog-legend").css("opacity", 0.3);
        hidingLegend = setTimeout(() => {
            $(".changelog-legend").css("opacity", "");
        }, 400);
    }

    function loadMore() {
        if (numDisplayed < changelogArray.length) {
            changelogReferences[numDisplayed++].show();
        }
    }

    changelogContainer.scroll(function () {
        manageScrollers();
        setupChangelogLegend();
        let gracePeriod = 100;
        if (Math.abs(this.scrollTop - this.scrollHeight + this.offsetHeight) < gracePeriod) {
            loadMore();
        }
    });

</script>
